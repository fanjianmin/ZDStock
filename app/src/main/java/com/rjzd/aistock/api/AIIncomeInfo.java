/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AIIncomeInfo implements org.apache.thrift.TBase<AIIncomeInfo, AIIncomeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AIIncomeInfo>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AIIncomeInfo");

  private static final org.apache.thrift.protocol.TField START_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("startFund", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ACHIEVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("achievement", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField COMPARE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("compareResult", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField INCOME_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("incomePoints", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField HS300_INCOME_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hs300IncomePoints", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_CAPITAL_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCapital", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STOCK_CAPITAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCapital", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TRADE_DATES_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDates", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField STRATEGY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AIIncomeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AIIncomeInfoTupleSchemeFactory());
  }

  private double startFund; // required
  private double achievement; // required
  private double compareResult; // required
  private List<Double> incomePoints; // required
  private List<Double> hs300IncomePoints; // required
  private String startTime; // required
  private String endTime; // required
  private double totalCapital; // required
  private double stockCapital; // required
  private List<String> tradeDates; // optional
  private String strategyName; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeDouble(startFund);
    out.writeDouble(achievement);
    out.writeDouble(compareResult);
    out.writeList(incomePoints);
    out.writeList(hs300IncomePoints);
    out.writeString(startTime);
    out.writeString(endTime);
    out.writeDouble(totalCapital);
    out.writeDouble(stockCapital);
    out.writeList(tradeDates);
    out.writeString(strategyName);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AIIncomeInfo(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.startFund = in.readDouble();
    this.achievement = in.readDouble();
    this.compareResult = in.readDouble();
    this.incomePoints = new ArrayList<Double>();
    in.readList(this.incomePoints, AIIncomeInfo.class.getClassLoader());
    this.hs300IncomePoints = new ArrayList<Double>();
    in.readList(this.hs300IncomePoints, AIIncomeInfo.class.getClassLoader());
    this.startTime= in.readString();
    this.endTime= in.readString();
    this.totalCapital = in.readDouble();
    this.stockCapital = in.readDouble();
    this.tradeDates = new ArrayList<String>();
    in.readList(this.tradeDates, AIIncomeInfo.class.getClassLoader());
    this.strategyName= in.readString();
  }

  public static final android.os.Parcelable.Creator<AIIncomeInfo> CREATOR = new android.os.Parcelable.Creator<AIIncomeInfo>() {
    @Override
    public AIIncomeInfo[] newArray(int size) {
      return new AIIncomeInfo[size];
    }

    @Override
    public AIIncomeInfo createFromParcel(android.os.Parcel in) {
      return new AIIncomeInfo(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_FUND((short)1, "startFund"),
    ACHIEVEMENT((short)2, "achievement"),
    COMPARE_RESULT((short)3, "compareResult"),
    INCOME_POINTS((short)4, "incomePoints"),
    HS300_INCOME_POINTS((short)5, "hs300IncomePoints"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    TOTAL_CAPITAL((short)8, "totalCapital"),
    STOCK_CAPITAL((short)9, "stockCapital"),
    TRADE_DATES((short)10, "tradeDates"),
    STRATEGY_NAME((short)11, "strategyName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_FUND
          return START_FUND;
        case 2: // ACHIEVEMENT
          return ACHIEVEMENT;
        case 3: // COMPARE_RESULT
          return COMPARE_RESULT;
        case 4: // INCOME_POINTS
          return INCOME_POINTS;
        case 5: // HS300_INCOME_POINTS
          return HS300_INCOME_POINTS;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // TOTAL_CAPITAL
          return TOTAL_CAPITAL;
        case 9: // STOCK_CAPITAL
          return STOCK_CAPITAL;
        case 10: // TRADE_DATES
          return TRADE_DATES;
        case 11: // STRATEGY_NAME
          return STRATEGY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTFUND_ISSET_ID = 0;
  private static final int __ACHIEVEMENT_ISSET_ID = 1;
  private static final int __COMPARERESULT_ISSET_ID = 2;
  private static final int __TOTALCAPITAL_ISSET_ID = 3;
  private static final int __STOCKCAPITAL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRADE_DATES,_Fields.STRATEGY_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_FUND, new org.apache.thrift.meta_data.FieldMetaData("startFund", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACHIEVEMENT, new org.apache.thrift.meta_data.FieldMetaData("achievement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPARE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("compareResult", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCOME_POINTS, new org.apache.thrift.meta_data.FieldMetaData("incomePoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.HS300_INCOME_POINTS, new org.apache.thrift.meta_data.FieldMetaData("hs300IncomePoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_CAPITAL, new org.apache.thrift.meta_data.FieldMetaData("totalCapital", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOCK_CAPITAL, new org.apache.thrift.meta_data.FieldMetaData("stockCapital", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_DATES, new org.apache.thrift.meta_data.FieldMetaData("tradeDates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRATEGY_NAME, new org.apache.thrift.meta_data.FieldMetaData("strategyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AIIncomeInfo.class, metaDataMap);
  }

  public AIIncomeInfo() {
  }

  public AIIncomeInfo(
    double startFund,
    double achievement,
    double compareResult,
    List<Double> incomePoints,
    List<Double> hs300IncomePoints,
    String startTime,
    String endTime,
    double totalCapital,
    double stockCapital)
  {
    this();
    this.startFund = startFund;
    set_startFund_isSet(true);
    this.achievement = achievement;
    set_achievement_isSet(true);
    this.compareResult = compareResult;
    set_compareResult_isSet(true);
    this.incomePoints = incomePoints;
    this.hs300IncomePoints = hs300IncomePoints;
    this.startTime = startTime;
    this.endTime = endTime;
    this.totalCapital = totalCapital;
    set_totalCapital_isSet(true);
    this.stockCapital = stockCapital;
    set_stockCapital_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AIIncomeInfo(AIIncomeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startFund = other.startFund;
    this.achievement = other.achievement;
    this.compareResult = other.compareResult;
    if (other.is_set_incomePoints()) {
      List<Double> __this__incomePoints = new ArrayList<Double>(other.incomePoints);
      this.incomePoints = __this__incomePoints;
    }
    if (other.is_set_hs300IncomePoints()) {
      List<Double> __this__hs300IncomePoints = new ArrayList<Double>(other.hs300IncomePoints);
      this.hs300IncomePoints = __this__hs300IncomePoints;
    }
    if (other.is_set_startTime()) {
      this.startTime = other.startTime;
    }
    if (other.is_set_endTime()) {
      this.endTime = other.endTime;
    }
    this.totalCapital = other.totalCapital;
    this.stockCapital = other.stockCapital;
    if (other.is_set_tradeDates()) {
      List<String> __this__tradeDates = new ArrayList<String>(other.tradeDates);
      this.tradeDates = __this__tradeDates;
    }
    if (other.is_set_strategyName()) {
      this.strategyName = other.strategyName;
    }
  }

  public AIIncomeInfo deepCopy() {
    return new AIIncomeInfo(this);
  }

  public void clear() {
    set_startFund_isSet(false);
    this.startFund = 0.0;
    set_achievement_isSet(false);
    this.achievement = 0.0;
    set_compareResult_isSet(false);
    this.compareResult = 0.0;
    if (this.incomePoints != null) {
      this.incomePoints.clear();
    }
    if (this.hs300IncomePoints != null) {
      this.hs300IncomePoints.clear();
    }
    this.startTime = null;
    this.endTime = null;
    set_totalCapital_isSet(false);
    this.totalCapital = 0.0;
    set_stockCapital_isSet(false);
    this.stockCapital = 0.0;
    if (this.tradeDates != null) {
      this.tradeDates.clear();
    }
    this.strategyName = null;
  }

  public double get_startFund() {
    return this.startFund;
  }

  public void set_startFund(double startFund) {
    this.startFund = startFund;
    set_startFund_isSet(true);
  }

  public void unset_startFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTFUND_ISSET_ID);
  }

  /** Returns true if field startFund is set (has been assigned a value) and false otherwise */
  public boolean is_set_startFund() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTFUND_ISSET_ID);
  }

  public void set_startFund_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTFUND_ISSET_ID, value);
  }

  public double get_achievement() {
    return this.achievement;
  }

  public void set_achievement(double achievement) {
    this.achievement = achievement;
    set_achievement_isSet(true);
  }

  public void unset_achievement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACHIEVEMENT_ISSET_ID);
  }

  /** Returns true if field achievement is set (has been assigned a value) and false otherwise */
  public boolean is_set_achievement() {
    return EncodingUtils.testBit(__isset_bitfield, __ACHIEVEMENT_ISSET_ID);
  }

  public void set_achievement_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACHIEVEMENT_ISSET_ID, value);
  }

  public double get_compareResult() {
    return this.compareResult;
  }

  public void set_compareResult(double compareResult) {
    this.compareResult = compareResult;
    set_compareResult_isSet(true);
  }

  public void unset_compareResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPARERESULT_ISSET_ID);
  }

  /** Returns true if field compareResult is set (has been assigned a value) and false otherwise */
  public boolean is_set_compareResult() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPARERESULT_ISSET_ID);
  }

  public void set_compareResult_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPARERESULT_ISSET_ID, value);
  }

  public int get_incomePoints_size() {
    return (this.incomePoints == null) ? 0 : this.incomePoints.size();
  }

  public java.util.Iterator<Double> get_incomePoints_iterator() {
    return (this.incomePoints == null) ? null : this.incomePoints.iterator();
  }

  public void add_to_incomePoints(double elem) {
    if (this.incomePoints == null) {
      this.incomePoints = new ArrayList<Double>();
    }
    this.incomePoints.add(elem);
  }

  public List<Double> get_incomePoints() {
    return this.incomePoints;
  }

  public void set_incomePoints(List<Double> incomePoints) {
    this.incomePoints = incomePoints;
  }

  public void unset_incomePoints() {
    this.incomePoints = null;
  }

  /** Returns true if field incomePoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_incomePoints() {
    return this.incomePoints != null;
  }

  public void set_incomePoints_isSet(boolean value) {
    if (!value) {
      this.incomePoints = null;
    }
  }

  public int get_hs300IncomePoints_size() {
    return (this.hs300IncomePoints == null) ? 0 : this.hs300IncomePoints.size();
  }

  public java.util.Iterator<Double> get_hs300IncomePoints_iterator() {
    return (this.hs300IncomePoints == null) ? null : this.hs300IncomePoints.iterator();
  }

  public void add_to_hs300IncomePoints(double elem) {
    if (this.hs300IncomePoints == null) {
      this.hs300IncomePoints = new ArrayList<Double>();
    }
    this.hs300IncomePoints.add(elem);
  }

  public List<Double> get_hs300IncomePoints() {
    return this.hs300IncomePoints;
  }

  public void set_hs300IncomePoints(List<Double> hs300IncomePoints) {
    this.hs300IncomePoints = hs300IncomePoints;
  }

  public void unset_hs300IncomePoints() {
    this.hs300IncomePoints = null;
  }

  /** Returns true if field hs300IncomePoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_hs300IncomePoints() {
    return this.hs300IncomePoints != null;
  }

  public void set_hs300IncomePoints_isSet(boolean value) {
    if (!value) {
      this.hs300IncomePoints = null;
    }
  }

  public String get_startTime() {
    return this.startTime;
  }

  public void set_startTime(String startTime) {
    this.startTime = startTime;
  }

  public void unset_startTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_startTime() {
    return this.startTime != null;
  }

  public void set_startTime_isSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String get_endTime() {
    return this.endTime;
  }

  public void set_endTime(String endTime) {
    this.endTime = endTime;
  }

  public void unset_endTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_endTime() {
    return this.endTime != null;
  }

  public void set_endTime_isSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public double get_totalCapital() {
    return this.totalCapital;
  }

  public void set_totalCapital(double totalCapital) {
    this.totalCapital = totalCapital;
    set_totalCapital_isSet(true);
  }

  public void unset_totalCapital() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCAPITAL_ISSET_ID);
  }

  /** Returns true if field totalCapital is set (has been assigned a value) and false otherwise */
  public boolean is_set_totalCapital() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCAPITAL_ISSET_ID);
  }

  public void set_totalCapital_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCAPITAL_ISSET_ID, value);
  }

  public double get_stockCapital() {
    return this.stockCapital;
  }

  public void set_stockCapital(double stockCapital) {
    this.stockCapital = stockCapital;
    set_stockCapital_isSet(true);
  }

  public void unset_stockCapital() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOCKCAPITAL_ISSET_ID);
  }

  /** Returns true if field stockCapital is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockCapital() {
    return EncodingUtils.testBit(__isset_bitfield, __STOCKCAPITAL_ISSET_ID);
  }

  public void set_stockCapital_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOCKCAPITAL_ISSET_ID, value);
  }

  public int get_tradeDates_size() {
    return (this.tradeDates == null) ? 0 : this.tradeDates.size();
  }

  public java.util.Iterator<String> get_tradeDates_iterator() {
    return (this.tradeDates == null) ? null : this.tradeDates.iterator();
  }

  public void add_to_tradeDates(String elem) {
    if (this.tradeDates == null) {
      this.tradeDates = new ArrayList<String>();
    }
    this.tradeDates.add(elem);
  }

  public List<String> get_tradeDates() {
    return this.tradeDates;
  }

  public void set_tradeDates(List<String> tradeDates) {
    this.tradeDates = tradeDates;
  }

  public void unset_tradeDates() {
    this.tradeDates = null;
  }

  /** Returns true if field tradeDates is set (has been assigned a value) and false otherwise */
  public boolean is_set_tradeDates() {
    return this.tradeDates != null;
  }

  public void set_tradeDates_isSet(boolean value) {
    if (!value) {
      this.tradeDates = null;
    }
  }

  public String get_strategyName() {
    return this.strategyName;
  }

  public void set_strategyName(String strategyName) {
    this.strategyName = strategyName;
  }

  public void unset_strategyName() {
    this.strategyName = null;
  }

  /** Returns true if field strategyName is set (has been assigned a value) and false otherwise */
  public boolean is_set_strategyName() {
    return this.strategyName != null;
  }

  public void set_strategyName_isSet(boolean value) {
    if (!value) {
      this.strategyName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_FUND:
      if (value == null) {
        unset_startFund();
      } else {
        set_startFund((Double)value);
      }
      break;

    case ACHIEVEMENT:
      if (value == null) {
        unset_achievement();
      } else {
        set_achievement((Double)value);
      }
      break;

    case COMPARE_RESULT:
      if (value == null) {
        unset_compareResult();
      } else {
        set_compareResult((Double)value);
      }
      break;

    case INCOME_POINTS:
      if (value == null) {
        unset_incomePoints();
      } else {
        set_incomePoints((List<Double>)value);
      }
      break;

    case HS300_INCOME_POINTS:
      if (value == null) {
        unset_hs300IncomePoints();
      } else {
        set_hs300IncomePoints((List<Double>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unset_startTime();
      } else {
        set_startTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unset_endTime();
      } else {
        set_endTime((String)value);
      }
      break;

    case TOTAL_CAPITAL:
      if (value == null) {
        unset_totalCapital();
      } else {
        set_totalCapital((Double)value);
      }
      break;

    case STOCK_CAPITAL:
      if (value == null) {
        unset_stockCapital();
      } else {
        set_stockCapital((Double)value);
      }
      break;

    case TRADE_DATES:
      if (value == null) {
        unset_tradeDates();
      } else {
        set_tradeDates((List<String>)value);
      }
      break;

    case STRATEGY_NAME:
      if (value == null) {
        unset_strategyName();
      } else {
        set_strategyName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_FUND:
      return get_startFund();

    case ACHIEVEMENT:
      return get_achievement();

    case COMPARE_RESULT:
      return get_compareResult();

    case INCOME_POINTS:
      return get_incomePoints();

    case HS300_INCOME_POINTS:
      return get_hs300IncomePoints();

    case START_TIME:
      return get_startTime();

    case END_TIME:
      return get_endTime();

    case TOTAL_CAPITAL:
      return get_totalCapital();

    case STOCK_CAPITAL:
      return get_stockCapital();

    case TRADE_DATES:
      return get_tradeDates();

    case STRATEGY_NAME:
      return get_strategyName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_FUND:
      return is_set_startFund();
    case ACHIEVEMENT:
      return is_set_achievement();
    case COMPARE_RESULT:
      return is_set_compareResult();
    case INCOME_POINTS:
      return is_set_incomePoints();
    case HS300_INCOME_POINTS:
      return is_set_hs300IncomePoints();
    case START_TIME:
      return is_set_startTime();
    case END_TIME:
      return is_set_endTime();
    case TOTAL_CAPITAL:
      return is_set_totalCapital();
    case STOCK_CAPITAL:
      return is_set_stockCapital();
    case TRADE_DATES:
      return is_set_tradeDates();
    case STRATEGY_NAME:
      return is_set_strategyName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AIIncomeInfo)
      return this.equals((AIIncomeInfo)that);
    return false;
  }

  public boolean equals(AIIncomeInfo that) {
    if (that == null)
      return false;

    boolean this_present_startFund = true;
    boolean that_present_startFund = true;
    if (this_present_startFund || that_present_startFund) {
      if (!(this_present_startFund && that_present_startFund))
        return false;
      if (this.startFund != that.startFund)
        return false;
    }

    boolean this_present_achievement = true;
    boolean that_present_achievement = true;
    if (this_present_achievement || that_present_achievement) {
      if (!(this_present_achievement && that_present_achievement))
        return false;
      if (this.achievement != that.achievement)
        return false;
    }

    boolean this_present_compareResult = true;
    boolean that_present_compareResult = true;
    if (this_present_compareResult || that_present_compareResult) {
      if (!(this_present_compareResult && that_present_compareResult))
        return false;
      if (this.compareResult != that.compareResult)
        return false;
    }

    boolean this_present_incomePoints = true && this.is_set_incomePoints();
    boolean that_present_incomePoints = true && that.is_set_incomePoints();
    if (this_present_incomePoints || that_present_incomePoints) {
      if (!(this_present_incomePoints && that_present_incomePoints))
        return false;
      if (!this.incomePoints.equals(that.incomePoints))
        return false;
    }

    boolean this_present_hs300IncomePoints = true && this.is_set_hs300IncomePoints();
    boolean that_present_hs300IncomePoints = true && that.is_set_hs300IncomePoints();
    if (this_present_hs300IncomePoints || that_present_hs300IncomePoints) {
      if (!(this_present_hs300IncomePoints && that_present_hs300IncomePoints))
        return false;
      if (!this.hs300IncomePoints.equals(that.hs300IncomePoints))
        return false;
    }

    boolean this_present_startTime = true && this.is_set_startTime();
    boolean that_present_startTime = true && that.is_set_startTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.is_set_endTime();
    boolean that_present_endTime = true && that.is_set_endTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_totalCapital = true;
    boolean that_present_totalCapital = true;
    if (this_present_totalCapital || that_present_totalCapital) {
      if (!(this_present_totalCapital && that_present_totalCapital))
        return false;
      if (this.totalCapital != that.totalCapital)
        return false;
    }

    boolean this_present_stockCapital = true;
    boolean that_present_stockCapital = true;
    if (this_present_stockCapital || that_present_stockCapital) {
      if (!(this_present_stockCapital && that_present_stockCapital))
        return false;
      if (this.stockCapital != that.stockCapital)
        return false;
    }

    boolean this_present_tradeDates = true && this.is_set_tradeDates();
    boolean that_present_tradeDates = true && that.is_set_tradeDates();
    if (this_present_tradeDates || that_present_tradeDates) {
      if (!(this_present_tradeDates && that_present_tradeDates))
        return false;
      if (!this.tradeDates.equals(that.tradeDates))
        return false;
    }

    boolean this_present_strategyName = true && this.is_set_strategyName();
    boolean that_present_strategyName = true && that.is_set_strategyName();
    if (this_present_strategyName || that_present_strategyName) {
      if (!(this_present_strategyName && that_present_strategyName))
        return false;
      if (!this.strategyName.equals(that.strategyName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startFund = true;
    list.add(present_startFund);
    if (present_startFund)
      list.add(startFund);

    boolean present_achievement = true;
    list.add(present_achievement);
    if (present_achievement)
      list.add(achievement);

    boolean present_compareResult = true;
    list.add(present_compareResult);
    if (present_compareResult)
      list.add(compareResult);

    boolean present_incomePoints = true && (is_set_incomePoints());
    list.add(present_incomePoints);
    if (present_incomePoints)
      list.add(incomePoints);

    boolean present_hs300IncomePoints = true && (is_set_hs300IncomePoints());
    list.add(present_hs300IncomePoints);
    if (present_hs300IncomePoints)
      list.add(hs300IncomePoints);

    boolean present_startTime = true && (is_set_startTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (is_set_endTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_totalCapital = true;
    list.add(present_totalCapital);
    if (present_totalCapital)
      list.add(totalCapital);

    boolean present_stockCapital = true;
    list.add(present_stockCapital);
    if (present_stockCapital)
      list.add(stockCapital);

    boolean present_tradeDates = true && (is_set_tradeDates());
    list.add(present_tradeDates);
    if (present_tradeDates)
      list.add(tradeDates);

    boolean present_strategyName = true && (is_set_strategyName());
    list.add(present_strategyName);
    if (present_strategyName)
      list.add(strategyName);

    return list.hashCode();
  }

  @Override
  public int compareTo(AIIncomeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_startFund()).compareTo(other.is_set_startFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_startFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startFund, other.startFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_achievement()).compareTo(other.is_set_achievement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_achievement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achievement, other.achievement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_compareResult()).compareTo(other.is_set_compareResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_compareResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compareResult, other.compareResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_incomePoints()).compareTo(other.is_set_incomePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_incomePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomePoints, other.incomePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_hs300IncomePoints()).compareTo(other.is_set_hs300IncomePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_hs300IncomePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hs300IncomePoints, other.hs300IncomePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_startTime()).compareTo(other.is_set_startTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_startTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_endTime()).compareTo(other.is_set_endTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_endTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_totalCapital()).compareTo(other.is_set_totalCapital());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_totalCapital()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCapital, other.totalCapital);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockCapital()).compareTo(other.is_set_stockCapital());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockCapital()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCapital, other.stockCapital);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_tradeDates()).compareTo(other.is_set_tradeDates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_tradeDates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDates, other.tradeDates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_strategyName()).compareTo(other.is_set_strategyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_strategyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyName, other.strategyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AIIncomeInfo(");
    boolean first = true;

    sb.append("startFund:");
    sb.append(this.startFund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("achievement:");
    sb.append(this.achievement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compareResult:");
    sb.append(this.compareResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomePoints:");
    if (this.incomePoints == null) {
      sb.append("null");
    } else {
      sb.append(this.incomePoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hs300IncomePoints:");
    if (this.hs300IncomePoints == null) {
      sb.append("null");
    } else {
      sb.append(this.hs300IncomePoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCapital:");
    sb.append(this.totalCapital);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockCapital:");
    sb.append(this.stockCapital);
    first = false;
    if (is_set_tradeDates()) {
      if (!first) sb.append(", ");
      sb.append("tradeDates:");
      if (this.tradeDates == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDates);
      }
      first = false;
    }
    if (is_set_strategyName()) {
      if (!first) sb.append(", ");
      sb.append("strategyName:");
      if (this.strategyName == null) {
        sb.append("null");
      } else {
        sb.append(this.strategyName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_startFund()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startFund' is unset! Struct:" + toString());
    }

    if (!is_set_achievement()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'achievement' is unset! Struct:" + toString());
    }

    if (!is_set_compareResult()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compareResult' is unset! Struct:" + toString());
    }

    if (!is_set_incomePoints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'incomePoints' is unset! Struct:" + toString());
    }

    if (!is_set_hs300IncomePoints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hs300IncomePoints' is unset! Struct:" + toString());
    }

    if (!is_set_startTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' is unset! Struct:" + toString());
    }

    if (!is_set_endTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' is unset! Struct:" + toString());
    }

    if (!is_set_totalCapital()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalCapital' is unset! Struct:" + toString());
    }

    if (!is_set_stockCapital()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockCapital' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AIIncomeInfoStandardSchemeFactory implements SchemeFactory {
    public AIIncomeInfoStandardScheme getScheme() {
      return new AIIncomeInfoStandardScheme();
    }
  }

  private static class AIIncomeInfoStandardScheme extends StandardScheme<AIIncomeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AIIncomeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startFund = iprot.readDouble();
              struct.set_startFund_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACHIEVEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.achievement = iprot.readDouble();
              struct.set_achievement_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPARE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.compareResult = iprot.readDouble();
              struct.set_compareResult_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCOME_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                if (struct.incomePoints == null) {
                  struct.incomePoints = new ArrayList<Double>(_list304.size);
                }
                double _elem305 = (double)0;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                {
                  _elem305 = iprot.readDouble();
                  struct.incomePoints.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.set_incomePoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HS300_INCOME_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list307 = iprot.readListBegin();
                if (struct.hs300IncomePoints == null) {
                  struct.hs300IncomePoints = new ArrayList<Double>(_list307.size);
                }
                double _elem308 = (double)0;
                for (int _i309 = 0; _i309 < _list307.size; ++_i309)
                {
                  _elem308 = iprot.readDouble();
                  struct.hs300IncomePoints.add(_elem308);
                }
                iprot.readListEnd();
              }
              struct.set_hs300IncomePoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.set_startTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.set_endTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_CAPITAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalCapital = iprot.readDouble();
              struct.set_totalCapital_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOCK_CAPITAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stockCapital = iprot.readDouble();
              struct.set_stockCapital_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRADE_DATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list310 = iprot.readListBegin();
                if (struct.tradeDates == null) {
                  struct.tradeDates = new ArrayList<String>(_list310.size);
                }
                String _elem311 = null;
                for (int _i312 = 0; _i312 < _list310.size; ++_i312)
                {
                  _elem311 = iprot.readString();
                  struct.tradeDates.add(_elem311);
                }
                iprot.readListEnd();
              }
              struct.set_tradeDates_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STRATEGY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategyName = iprot.readString();
              struct.set_strategyName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AIIncomeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FUND_FIELD_DESC);
      oprot.writeDouble(struct.startFund);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACHIEVEMENT_FIELD_DESC);
      oprot.writeDouble(struct.achievement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPARE_RESULT_FIELD_DESC);
      oprot.writeDouble(struct.compareResult);
      oprot.writeFieldEnd();
      if (struct.incomePoints != null) {
        oprot.writeFieldBegin(INCOME_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.incomePoints.size()));
          for (double _iter313 : struct.incomePoints)
          {
            oprot.writeDouble(_iter313);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.hs300IncomePoints != null) {
        oprot.writeFieldBegin(HS300_INCOME_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.hs300IncomePoints.size()));
          for (double _iter314 : struct.hs300IncomePoints)
          {
            oprot.writeDouble(_iter314);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_CAPITAL_FIELD_DESC);
      oprot.writeDouble(struct.totalCapital);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOCK_CAPITAL_FIELD_DESC);
      oprot.writeDouble(struct.stockCapital);
      oprot.writeFieldEnd();
      if (struct.tradeDates != null) {
        if (struct.is_set_tradeDates()) {
          oprot.writeFieldBegin(TRADE_DATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tradeDates.size()));
            for (String _iter315 : struct.tradeDates)
            {
              oprot.writeString(_iter315);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.strategyName != null) {
        if (struct.is_set_strategyName()) {
          oprot.writeFieldBegin(STRATEGY_NAME_FIELD_DESC);
          oprot.writeString(struct.strategyName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AIIncomeInfoTupleSchemeFactory implements SchemeFactory {
    public AIIncomeInfoTupleScheme getScheme() {
      return new AIIncomeInfoTupleScheme();
    }
  }

  private static class AIIncomeInfoTupleScheme extends TupleScheme<AIIncomeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AIIncomeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.startFund);
      oprot.writeDouble(struct.achievement);
      oprot.writeDouble(struct.compareResult);
      {
        oprot.writeI32(struct.incomePoints.size());
        for (double _iter316 : struct.incomePoints)
        {
          oprot.writeDouble(_iter316);
        }
      }
      {
        oprot.writeI32(struct.hs300IncomePoints.size());
        for (double _iter317 : struct.hs300IncomePoints)
        {
          oprot.writeDouble(_iter317);
        }
      }
      oprot.writeString(struct.startTime);
      oprot.writeString(struct.endTime);
      oprot.writeDouble(struct.totalCapital);
      oprot.writeDouble(struct.stockCapital);
      BitSet optionals = new BitSet();
      if (struct.is_set_tradeDates()) {
        optionals.set(0);
      }
      if (struct.is_set_strategyName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_tradeDates()) {
        {
          oprot.writeI32(struct.tradeDates.size());
          for (String _iter318 : struct.tradeDates)
          {
            oprot.writeString(_iter318);
          }
        }
      }
      if (struct.is_set_strategyName()) {
        oprot.writeString(struct.strategyName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AIIncomeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startFund = iprot.readDouble();
      struct.set_startFund_isSet(true);
      struct.achievement = iprot.readDouble();
      struct.set_achievement_isSet(true);
      struct.compareResult = iprot.readDouble();
      struct.set_compareResult_isSet(true);
      {
        org.apache.thrift.protocol.TList _list319 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.incomePoints == null) {
          struct.incomePoints = new ArrayList<Double>(_list319.size);
        }
        double _elem320 = (double)0;
        for (int _i321 = 0; _i321 < _list319.size; ++_i321)
        {
          _elem320 = iprot.readDouble();
          struct.incomePoints.add(_elem320);
        }
      }
      struct.set_incomePoints_isSet(true);
      {
        org.apache.thrift.protocol.TList _list322 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.hs300IncomePoints == null) {
          struct.hs300IncomePoints = new ArrayList<Double>(_list322.size);
        }
        double _elem323 = (double)0;
        for (int _i324 = 0; _i324 < _list322.size; ++_i324)
        {
          _elem323 = iprot.readDouble();
          struct.hs300IncomePoints.add(_elem323);
        }
      }
      struct.set_hs300IncomePoints_isSet(true);
      struct.startTime = iprot.readString();
      struct.set_startTime_isSet(true);
      struct.endTime = iprot.readString();
      struct.set_endTime_isSet(true);
      struct.totalCapital = iprot.readDouble();
      struct.set_totalCapital_isSet(true);
      struct.stockCapital = iprot.readDouble();
      struct.set_stockCapital_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          if (struct.tradeDates == null) {
            struct.tradeDates = new ArrayList<String>(_list325.size);
          }
          String _elem326 = null;
          for (int _i327 = 0; _i327 < _list325.size; ++_i327)
          {
            _elem326 = iprot.readString();
            struct.tradeDates.add(_elem326);
          }
        }
        struct.set_tradeDates_isSet(true);
      }
      if (incoming.get(1)) {
        struct.strategyName = iprot.readString();
        struct.set_strategyName_isSet(true);
      }
    }
  }

}

