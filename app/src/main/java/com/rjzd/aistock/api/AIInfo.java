/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-24")
public class AIInfo implements org.apache.thrift.TBase<AIInfo, AIInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AIInfo>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AIInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_ATTENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAttention", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ONLINE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHARACTERISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("characteristics", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField INTRODUCE_FIELD_DESC = new org.apache.thrift.protocol.TField("introduce", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalIncome", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ALIAS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasName", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AIInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AIInfoTupleSchemeFactory());
  }

  private String id; // required
  private String name; // required
  private String avatar; // required
  private int totalAttention; // required
  private String onlineTime; // required
  private List<String> characteristics; // required
  private String introduce; // required
  private AIIncomeInfo totalIncome; // optional
  private String aliasName; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(id);
    out.writeString(name);
    out.writeString(avatar);
    out.writeInt(totalAttention);
    out.writeString(onlineTime);
    out.writeList(characteristics);
    out.writeString(introduce);
    out.writeParcelable(totalIncome, flags);
    out.writeString(aliasName);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AIInfo(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.id= in.readString();
    this.name= in.readString();
    this.avatar= in.readString();
    this.totalAttention = in.readInt();
    this.onlineTime= in.readString();
    this.characteristics = new ArrayList<String>();
    in.readList(this.characteristics, AIInfo.class.getClassLoader());
    this.introduce= in.readString();
    this.totalIncome= in.readParcelable(AIInfo.class.getClassLoader());
    this.aliasName= in.readString();
  }

  public static final android.os.Parcelable.Creator<AIInfo> CREATOR = new android.os.Parcelable.Creator<AIInfo>() {
    @Override
    public AIInfo[] newArray(int size) {
      return new AIInfo[size];
    }

    @Override
    public AIInfo createFromParcel(android.os.Parcel in) {
      return new AIInfo(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    AVATAR((short)3, "avatar"),
    TOTAL_ATTENTION((short)4, "totalAttention"),
    ONLINE_TIME((short)5, "onlineTime"),
    CHARACTERISTICS((short)6, "characteristics"),
    INTRODUCE((short)7, "introduce"),
    TOTAL_INCOME((short)8, "totalIncome"),
    ALIAS_NAME((short)9, "aliasName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // AVATAR
          return AVATAR;
        case 4: // TOTAL_ATTENTION
          return TOTAL_ATTENTION;
        case 5: // ONLINE_TIME
          return ONLINE_TIME;
        case 6: // CHARACTERISTICS
          return CHARACTERISTICS;
        case 7: // INTRODUCE
          return INTRODUCE;
        case 8: // TOTAL_INCOME
          return TOTAL_INCOME;
        case 9: // ALIAS_NAME
          return ALIAS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALATTENTION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL_INCOME,_Fields.ALIAS_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_ATTENTION, new org.apache.thrift.meta_data.FieldMetaData("totalAttention", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_TIME, new org.apache.thrift.meta_data.FieldMetaData("onlineTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARACTERISTICS, new org.apache.thrift.meta_data.FieldMetaData("characteristics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTRODUCE, new org.apache.thrift.meta_data.FieldMetaData("introduce", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_INCOME, new org.apache.thrift.meta_data.FieldMetaData("totalIncome", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIIncomeInfo.class)));
    tmpMap.put(_Fields.ALIAS_NAME, new org.apache.thrift.meta_data.FieldMetaData("aliasName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AIInfo.class, metaDataMap);
  }

  public AIInfo() {
  }

  public AIInfo(
    String id,
    String name,
    String avatar,
    int totalAttention,
    String onlineTime,
    List<String> characteristics,
    String introduce)
  {
    this();
    this.id = id;
    this.name = name;
    this.avatar = avatar;
    this.totalAttention = totalAttention;
    set_totalAttention_isSet(true);
    this.onlineTime = onlineTime;
    this.characteristics = characteristics;
    this.introduce = introduce;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AIInfo(AIInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_id()) {
      this.id = other.id;
    }
    if (other.is_set_name()) {
      this.name = other.name;
    }
    if (other.is_set_avatar()) {
      this.avatar = other.avatar;
    }
    this.totalAttention = other.totalAttention;
    if (other.is_set_onlineTime()) {
      this.onlineTime = other.onlineTime;
    }
    if (other.is_set_characteristics()) {
      List<String> __this__characteristics = new ArrayList<String>(other.characteristics);
      this.characteristics = __this__characteristics;
    }
    if (other.is_set_introduce()) {
      this.introduce = other.introduce;
    }
    if (other.is_set_totalIncome()) {
      this.totalIncome = new AIIncomeInfo(other.totalIncome);
    }
    if (other.is_set_aliasName()) {
      this.aliasName = other.aliasName;
    }
  }

  public AIInfo deepCopy() {
    return new AIInfo(this);
  }

  public void clear() {
    this.id = null;
    this.name = null;
    this.avatar = null;
    set_totalAttention_isSet(false);
    this.totalAttention = 0;
    this.onlineTime = null;
    if (this.characteristics != null) {
      this.characteristics.clear();
    }
    this.introduce = null;
    if (this.totalIncome != null) {
      this.totalIncome.clear();
    }
    this.aliasName = null;
  }

  public String get_id() {
    return this.id;
  }

  public void set_id(String id) {
    this.id = id;
  }

  public void unset_id() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return this.id != null;
  }

  public void set_id_isSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String get_name() {
    return this.name;
  }

  public void set_name(String name) {
    this.name = name;
  }

  public void unset_name() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean is_set_name() {
    return this.name != null;
  }

  public void set_name_isSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String get_avatar() {
    return this.avatar;
  }

  public void set_avatar(String avatar) {
    this.avatar = avatar;
  }

  public void unset_avatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean is_set_avatar() {
    return this.avatar != null;
  }

  public void set_avatar_isSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int get_totalAttention() {
    return this.totalAttention;
  }

  public void set_totalAttention(int totalAttention) {
    this.totalAttention = totalAttention;
    set_totalAttention_isSet(true);
  }

  public void unset_totalAttention() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALATTENTION_ISSET_ID);
  }

  /** Returns true if field totalAttention is set (has been assigned a value) and false otherwise */
  public boolean is_set_totalAttention() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALATTENTION_ISSET_ID);
  }

  public void set_totalAttention_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALATTENTION_ISSET_ID, value);
  }

  public String get_onlineTime() {
    return this.onlineTime;
  }

  public void set_onlineTime(String onlineTime) {
    this.onlineTime = onlineTime;
  }

  public void unset_onlineTime() {
    this.onlineTime = null;
  }

  /** Returns true if field onlineTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_onlineTime() {
    return this.onlineTime != null;
  }

  public void set_onlineTime_isSet(boolean value) {
    if (!value) {
      this.onlineTime = null;
    }
  }

  public int get_characteristics_size() {
    return (this.characteristics == null) ? 0 : this.characteristics.size();
  }

  public java.util.Iterator<String> get_characteristics_iterator() {
    return (this.characteristics == null) ? null : this.characteristics.iterator();
  }

  public void add_to_characteristics(String elem) {
    if (this.characteristics == null) {
      this.characteristics = new ArrayList<String>();
    }
    this.characteristics.add(elem);
  }

  public List<String> get_characteristics() {
    return this.characteristics;
  }

  public void set_characteristics(List<String> characteristics) {
    this.characteristics = characteristics;
  }

  public void unset_characteristics() {
    this.characteristics = null;
  }

  /** Returns true if field characteristics is set (has been assigned a value) and false otherwise */
  public boolean is_set_characteristics() {
    return this.characteristics != null;
  }

  public void set_characteristics_isSet(boolean value) {
    if (!value) {
      this.characteristics = null;
    }
  }

  public String get_introduce() {
    return this.introduce;
  }

  public void set_introduce(String introduce) {
    this.introduce = introduce;
  }

  public void unset_introduce() {
    this.introduce = null;
  }

  /** Returns true if field introduce is set (has been assigned a value) and false otherwise */
  public boolean is_set_introduce() {
    return this.introduce != null;
  }

  public void set_introduce_isSet(boolean value) {
    if (!value) {
      this.introduce = null;
    }
  }

  public AIIncomeInfo get_totalIncome() {
    return this.totalIncome;
  }

  public void set_totalIncome(AIIncomeInfo totalIncome) {
    this.totalIncome = totalIncome;
  }

  public void unset_totalIncome() {
    this.totalIncome = null;
  }

  /** Returns true if field totalIncome is set (has been assigned a value) and false otherwise */
  public boolean is_set_totalIncome() {
    return this.totalIncome != null;
  }

  public void set_totalIncome_isSet(boolean value) {
    if (!value) {
      this.totalIncome = null;
    }
  }

  public String get_aliasName() {
    return this.aliasName;
  }

  public void set_aliasName(String aliasName) {
    this.aliasName = aliasName;
  }

  public void unset_aliasName() {
    this.aliasName = null;
  }

  /** Returns true if field aliasName is set (has been assigned a value) and false otherwise */
  public boolean is_set_aliasName() {
    return this.aliasName != null;
  }

  public void set_aliasName_isSet(boolean value) {
    if (!value) {
      this.aliasName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unset_avatar();
      } else {
        set_avatar((String)value);
      }
      break;

    case TOTAL_ATTENTION:
      if (value == null) {
        unset_totalAttention();
      } else {
        set_totalAttention((Integer)value);
      }
      break;

    case ONLINE_TIME:
      if (value == null) {
        unset_onlineTime();
      } else {
        set_onlineTime((String)value);
      }
      break;

    case CHARACTERISTICS:
      if (value == null) {
        unset_characteristics();
      } else {
        set_characteristics((List<String>)value);
      }
      break;

    case INTRODUCE:
      if (value == null) {
        unset_introduce();
      } else {
        set_introduce((String)value);
      }
      break;

    case TOTAL_INCOME:
      if (value == null) {
        unset_totalIncome();
      } else {
        set_totalIncome((AIIncomeInfo)value);
      }
      break;

    case ALIAS_NAME:
      if (value == null) {
        unset_aliasName();
      } else {
        set_aliasName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case NAME:
      return get_name();

    case AVATAR:
      return get_avatar();

    case TOTAL_ATTENTION:
      return get_totalAttention();

    case ONLINE_TIME:
      return get_onlineTime();

    case CHARACTERISTICS:
      return get_characteristics();

    case INTRODUCE:
      return get_introduce();

    case TOTAL_INCOME:
      return get_totalIncome();

    case ALIAS_NAME:
      return get_aliasName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case NAME:
      return is_set_name();
    case AVATAR:
      return is_set_avatar();
    case TOTAL_ATTENTION:
      return is_set_totalAttention();
    case ONLINE_TIME:
      return is_set_onlineTime();
    case CHARACTERISTICS:
      return is_set_characteristics();
    case INTRODUCE:
      return is_set_introduce();
    case TOTAL_INCOME:
      return is_set_totalIncome();
    case ALIAS_NAME:
      return is_set_aliasName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AIInfo)
      return this.equals((AIInfo)that);
    return false;
  }

  public boolean equals(AIInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.is_set_id();
    boolean that_present_id = true && that.is_set_id();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.is_set_name();
    boolean that_present_name = true && that.is_set_name();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_avatar = true && this.is_set_avatar();
    boolean that_present_avatar = true && that.is_set_avatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_totalAttention = true;
    boolean that_present_totalAttention = true;
    if (this_present_totalAttention || that_present_totalAttention) {
      if (!(this_present_totalAttention && that_present_totalAttention))
        return false;
      if (this.totalAttention != that.totalAttention)
        return false;
    }

    boolean this_present_onlineTime = true && this.is_set_onlineTime();
    boolean that_present_onlineTime = true && that.is_set_onlineTime();
    if (this_present_onlineTime || that_present_onlineTime) {
      if (!(this_present_onlineTime && that_present_onlineTime))
        return false;
      if (!this.onlineTime.equals(that.onlineTime))
        return false;
    }

    boolean this_present_characteristics = true && this.is_set_characteristics();
    boolean that_present_characteristics = true && that.is_set_characteristics();
    if (this_present_characteristics || that_present_characteristics) {
      if (!(this_present_characteristics && that_present_characteristics))
        return false;
      if (!this.characteristics.equals(that.characteristics))
        return false;
    }

    boolean this_present_introduce = true && this.is_set_introduce();
    boolean that_present_introduce = true && that.is_set_introduce();
    if (this_present_introduce || that_present_introduce) {
      if (!(this_present_introduce && that_present_introduce))
        return false;
      if (!this.introduce.equals(that.introduce))
        return false;
    }

    boolean this_present_totalIncome = true && this.is_set_totalIncome();
    boolean that_present_totalIncome = true && that.is_set_totalIncome();
    if (this_present_totalIncome || that_present_totalIncome) {
      if (!(this_present_totalIncome && that_present_totalIncome))
        return false;
      if (!this.totalIncome.equals(that.totalIncome))
        return false;
    }

    boolean this_present_aliasName = true && this.is_set_aliasName();
    boolean that_present_aliasName = true && that.is_set_aliasName();
    if (this_present_aliasName || that_present_aliasName) {
      if (!(this_present_aliasName && that_present_aliasName))
        return false;
      if (!this.aliasName.equals(that.aliasName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (is_set_id());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (is_set_name());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_avatar = true && (is_set_avatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_totalAttention = true;
    list.add(present_totalAttention);
    if (present_totalAttention)
      list.add(totalAttention);

    boolean present_onlineTime = true && (is_set_onlineTime());
    list.add(present_onlineTime);
    if (present_onlineTime)
      list.add(onlineTime);

    boolean present_characteristics = true && (is_set_characteristics());
    list.add(present_characteristics);
    if (present_characteristics)
      list.add(characteristics);

    boolean present_introduce = true && (is_set_introduce());
    list.add(present_introduce);
    if (present_introduce)
      list.add(introduce);

    boolean present_totalIncome = true && (is_set_totalIncome());
    list.add(present_totalIncome);
    if (present_totalIncome)
      list.add(totalIncome);

    boolean present_aliasName = true && (is_set_aliasName());
    list.add(present_aliasName);
    if (present_aliasName)
      list.add(aliasName);

    return list.hashCode();
  }

  @Override
  public int compareTo(AIInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_name()).compareTo(other.is_set_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_avatar()).compareTo(other.is_set_avatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_avatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_totalAttention()).compareTo(other.is_set_totalAttention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_totalAttention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAttention, other.totalAttention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_onlineTime()).compareTo(other.is_set_onlineTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_onlineTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineTime, other.onlineTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_characteristics()).compareTo(other.is_set_characteristics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_characteristics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.characteristics, other.characteristics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_introduce()).compareTo(other.is_set_introduce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_introduce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduce, other.introduce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_totalIncome()).compareTo(other.is_set_totalIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_totalIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalIncome, other.totalIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_aliasName()).compareTo(other.is_set_aliasName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_aliasName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasName, other.aliasName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AIInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAttention:");
    sb.append(this.totalAttention);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineTime:");
    if (this.onlineTime == null) {
      sb.append("null");
    } else {
      sb.append(this.onlineTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("characteristics:");
    if (this.characteristics == null) {
      sb.append("null");
    } else {
      sb.append(this.characteristics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduce:");
    if (this.introduce == null) {
      sb.append("null");
    } else {
      sb.append(this.introduce);
    }
    first = false;
    if (is_set_totalIncome()) {
      if (!first) sb.append(", ");
      sb.append("totalIncome:");
      if (this.totalIncome == null) {
        sb.append("null");
      } else {
        sb.append(this.totalIncome);
      }
      first = false;
    }
    if (is_set_aliasName()) {
      if (!first) sb.append(", ");
      sb.append("aliasName:");
      if (this.aliasName == null) {
        sb.append("null");
      } else {
        sb.append(this.aliasName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!is_set_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!is_set_avatar()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'avatar' is unset! Struct:" + toString());
    }

    if (!is_set_totalAttention()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalAttention' is unset! Struct:" + toString());
    }

    if (!is_set_onlineTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'onlineTime' is unset! Struct:" + toString());
    }

    if (!is_set_characteristics()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'characteristics' is unset! Struct:" + toString());
    }

    if (!is_set_introduce()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'introduce' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (totalIncome != null) {
      totalIncome.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AIInfoStandardSchemeFactory implements SchemeFactory {
    public AIInfoStandardScheme getScheme() {
      return new AIInfoStandardScheme();
    }
  }

  private static class AIInfoStandardScheme extends StandardScheme<AIInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AIInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.set_name_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.set_avatar_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_ATTENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalAttention = iprot.readI32();
              struct.set_totalAttention_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ONLINE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.onlineTime = iprot.readString();
              struct.set_onlineTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHARACTERISTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                if (struct.characteristics == null) {
                  struct.characteristics = new ArrayList<String>(_list328.size);
                }
                String _elem329 = null;
                for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                {
                  _elem329 = iprot.readString();
                  struct.characteristics.add(_elem329);
                }
                iprot.readListEnd();
              }
              struct.set_characteristics_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTRODUCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduce = iprot.readString();
              struct.set_introduce_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              if (struct.totalIncome == null) {
                struct.totalIncome = new AIIncomeInfo();
              }
              struct.totalIncome.read(iprot);
              struct.set_totalIncome_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALIAS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliasName = iprot.readString();
              struct.set_aliasName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AIInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_ATTENTION_FIELD_DESC);
      oprot.writeI32(struct.totalAttention);
      oprot.writeFieldEnd();
      if (struct.onlineTime != null) {
        oprot.writeFieldBegin(ONLINE_TIME_FIELD_DESC);
        oprot.writeString(struct.onlineTime);
        oprot.writeFieldEnd();
      }
      if (struct.characteristics != null) {
        oprot.writeFieldBegin(CHARACTERISTICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.characteristics.size()));
          for (String _iter331 : struct.characteristics)
          {
            oprot.writeString(_iter331);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.introduce != null) {
        oprot.writeFieldBegin(INTRODUCE_FIELD_DESC);
        oprot.writeString(struct.introduce);
        oprot.writeFieldEnd();
      }
      if (struct.totalIncome != null) {
        if (struct.is_set_totalIncome()) {
          oprot.writeFieldBegin(TOTAL_INCOME_FIELD_DESC);
          struct.totalIncome.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aliasName != null) {
        if (struct.is_set_aliasName()) {
          oprot.writeFieldBegin(ALIAS_NAME_FIELD_DESC);
          oprot.writeString(struct.aliasName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AIInfoTupleSchemeFactory implements SchemeFactory {
    public AIInfoTupleScheme getScheme() {
      return new AIInfoTupleScheme();
    }
  }

  private static class AIInfoTupleScheme extends TupleScheme<AIInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AIInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.name);
      oprot.writeString(struct.avatar);
      oprot.writeI32(struct.totalAttention);
      oprot.writeString(struct.onlineTime);
      {
        oprot.writeI32(struct.characteristics.size());
        for (String _iter332 : struct.characteristics)
        {
          oprot.writeString(_iter332);
        }
      }
      oprot.writeString(struct.introduce);
      BitSet optionals = new BitSet();
      if (struct.is_set_totalIncome()) {
        optionals.set(0);
      }
      if (struct.is_set_aliasName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_totalIncome()) {
        struct.totalIncome.write(oprot);
      }
      if (struct.is_set_aliasName()) {
        oprot.writeString(struct.aliasName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AIInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.set_id_isSet(true);
      struct.name = iprot.readString();
      struct.set_name_isSet(true);
      struct.avatar = iprot.readString();
      struct.set_avatar_isSet(true);
      struct.totalAttention = iprot.readI32();
      struct.set_totalAttention_isSet(true);
      struct.onlineTime = iprot.readString();
      struct.set_onlineTime_isSet(true);
      {
        org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.characteristics == null) {
          struct.characteristics = new ArrayList<String>(_list333.size);
        }
        String _elem334 = null;
        for (int _i335 = 0; _i335 < _list333.size; ++_i335)
        {
          _elem334 = iprot.readString();
          struct.characteristics.add(_elem334);
        }
      }
      struct.set_characteristics_isSet(true);
      struct.introduce = iprot.readString();
      struct.set_introduce_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        if (struct.totalIncome == null) {
          struct.totalIncome = new AIIncomeInfo();
        }
        struct.totalIncome.read(iprot);
        struct.set_totalIncome_isSet(true);
      }
      if (incoming.get(1)) {
        struct.aliasName = iprot.readString();
        struct.set_aliasName_isSet(true);
      }
    }
  }

}

