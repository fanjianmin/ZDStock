/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AIOperation implements org.apache.thrift.TBase<AIOperation, AIOperation._Fields>, java.io.Serializable, Cloneable, Comparable<AIOperation>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AIOperation");

  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stockName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SELL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("profit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PROFIT_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("profitPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField BUY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BUY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("buyReason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SELL_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("sellReason", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField HS300_PROFIT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hs300ProfitPoints", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField AI_PROFIT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("aiProfitPoints", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField OPERATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operationId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField STRATEGY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyName", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AIOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AIOperationTupleSchemeFactory());
  }

  private String stockCode; // required
  private String stockName; // required
  private double buyPrice; // required
  private double sellPrice; // required
  private double profit; // required
  private double profitPercentage; // required
  private int quantity; // required
  private int pos; // required
  private double positionPercentage; // required
  private String buyTime; // required
  private String sellTime; // required
  private String buyReason; // required
  private String sellReason; // required
  private List<Double> hs300ProfitPoints; // optional
  private List<Double> aiProfitPoints; // optional
  private long operationId; // optional
  private String strategyName; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(stockCode);
    out.writeString(stockName);
    out.writeDouble(buyPrice);
    out.writeDouble(sellPrice);
    out.writeDouble(profit);
    out.writeDouble(profitPercentage);
    out.writeInt(quantity);
    out.writeInt(pos);
    out.writeDouble(positionPercentage);
    out.writeString(buyTime);
    out.writeString(sellTime);
    out.writeString(buyReason);
    out.writeString(sellReason);
    out.writeList(hs300ProfitPoints);
    out.writeList(aiProfitPoints);
    out.writeLong(operationId);
    out.writeString(strategyName);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AIOperation(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.stockCode= in.readString();
    this.stockName= in.readString();
    this.buyPrice = in.readDouble();
    this.sellPrice = in.readDouble();
    this.profit = in.readDouble();
    this.profitPercentage = in.readDouble();
    this.quantity = in.readInt();
    this.pos = in.readInt();
    this.positionPercentage = in.readDouble();
    this.buyTime= in.readString();
    this.sellTime= in.readString();
    this.buyReason= in.readString();
    this.sellReason= in.readString();
    this.hs300ProfitPoints = new ArrayList<Double>();
    in.readList(this.hs300ProfitPoints, AIOperation.class.getClassLoader());
    this.aiProfitPoints = new ArrayList<Double>();
    in.readList(this.aiProfitPoints, AIOperation.class.getClassLoader());
    this.operationId = in.readLong();
    this.strategyName= in.readString();
  }

  public static final android.os.Parcelable.Creator<AIOperation> CREATOR = new android.os.Parcelable.Creator<AIOperation>() {
    @Override
    public AIOperation[] newArray(int size) {
      return new AIOperation[size];
    }

    @Override
    public AIOperation createFromParcel(android.os.Parcel in) {
      return new AIOperation(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOCK_CODE((short)1, "stockCode"),
    STOCK_NAME((short)2, "stockName"),
    BUY_PRICE((short)3, "buyPrice"),
    SELL_PRICE((short)4, "sellPrice"),
    PROFIT((short)5, "profit"),
    PROFIT_PERCENTAGE((short)6, "profitPercentage"),
    QUANTITY((short)7, "quantity"),
    POS((short)8, "pos"),
    POSITION_PERCENTAGE((short)9, "positionPercentage"),
    BUY_TIME((short)10, "buyTime"),
    SELL_TIME((short)11, "sellTime"),
    BUY_REASON((short)12, "buyReason"),
    SELL_REASON((short)13, "sellReason"),
    HS300_PROFIT_POINTS((short)14, "hs300ProfitPoints"),
    AI_PROFIT_POINTS((short)15, "aiProfitPoints"),
    OPERATION_ID((short)16, "operationId"),
    STRATEGY_NAME((short)17, "strategyName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOCK_CODE
          return STOCK_CODE;
        case 2: // STOCK_NAME
          return STOCK_NAME;
        case 3: // BUY_PRICE
          return BUY_PRICE;
        case 4: // SELL_PRICE
          return SELL_PRICE;
        case 5: // PROFIT
          return PROFIT;
        case 6: // PROFIT_PERCENTAGE
          return PROFIT_PERCENTAGE;
        case 7: // QUANTITY
          return QUANTITY;
        case 8: // POS
          return POS;
        case 9: // POSITION_PERCENTAGE
          return POSITION_PERCENTAGE;
        case 10: // BUY_TIME
          return BUY_TIME;
        case 11: // SELL_TIME
          return SELL_TIME;
        case 12: // BUY_REASON
          return BUY_REASON;
        case 13: // SELL_REASON
          return SELL_REASON;
        case 14: // HS300_PROFIT_POINTS
          return HS300_PROFIT_POINTS;
        case 15: // AI_PROFIT_POINTS
          return AI_PROFIT_POINTS;
        case 16: // OPERATION_ID
          return OPERATION_ID;
        case 17: // STRATEGY_NAME
          return STRATEGY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUYPRICE_ISSET_ID = 0;
  private static final int __SELLPRICE_ISSET_ID = 1;
  private static final int __PROFIT_ISSET_ID = 2;
  private static final int __PROFITPERCENTAGE_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __POS_ISSET_ID = 5;
  private static final int __POSITIONPERCENTAGE_ISSET_ID = 6;
  private static final int __OPERATIONID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HS300_PROFIT_POINTS,_Fields.AI_PROFIT_POINTS,_Fields.OPERATION_ID,_Fields.STRATEGY_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stockName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("buyPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("sellPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROFIT, new org.apache.thrift.meta_data.FieldMetaData("profit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROFIT_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("profitPercentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("positionPercentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUY_TIME, new org.apache.thrift.meta_data.FieldMetaData("buyTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("sellTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_REASON, new org.apache.thrift.meta_data.FieldMetaData("buyReason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELL_REASON, new org.apache.thrift.meta_data.FieldMetaData("sellReason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HS300_PROFIT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("hs300ProfitPoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.AI_PROFIT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("aiProfitPoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.OPERATION_ID, new org.apache.thrift.meta_data.FieldMetaData("operationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRATEGY_NAME, new org.apache.thrift.meta_data.FieldMetaData("strategyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AIOperation.class, metaDataMap);
  }

  public AIOperation() {
  }

  public AIOperation(
    String stockCode,
    String stockName,
    double buyPrice,
    double sellPrice,
    double profit,
    double profitPercentage,
    int quantity,
    int pos,
    double positionPercentage,
    String buyTime,
    String sellTime,
    String buyReason,
    String sellReason)
  {
    this();
    this.stockCode = stockCode;
    this.stockName = stockName;
    this.buyPrice = buyPrice;
    set_buyPrice_isSet(true);
    this.sellPrice = sellPrice;
    set_sellPrice_isSet(true);
    this.profit = profit;
    set_profit_isSet(true);
    this.profitPercentage = profitPercentage;
    set_profitPercentage_isSet(true);
    this.quantity = quantity;
    set_quantity_isSet(true);
    this.pos = pos;
    set_pos_isSet(true);
    this.positionPercentage = positionPercentage;
    set_positionPercentage_isSet(true);
    this.buyTime = buyTime;
    this.sellTime = sellTime;
    this.buyReason = buyReason;
    this.sellReason = sellReason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AIOperation(AIOperation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_stockCode()) {
      this.stockCode = other.stockCode;
    }
    if (other.is_set_stockName()) {
      this.stockName = other.stockName;
    }
    this.buyPrice = other.buyPrice;
    this.sellPrice = other.sellPrice;
    this.profit = other.profit;
    this.profitPercentage = other.profitPercentage;
    this.quantity = other.quantity;
    this.pos = other.pos;
    this.positionPercentage = other.positionPercentage;
    if (other.is_set_buyTime()) {
      this.buyTime = other.buyTime;
    }
    if (other.is_set_sellTime()) {
      this.sellTime = other.sellTime;
    }
    if (other.is_set_buyReason()) {
      this.buyReason = other.buyReason;
    }
    if (other.is_set_sellReason()) {
      this.sellReason = other.sellReason;
    }
    if (other.is_set_hs300ProfitPoints()) {
      List<Double> __this__hs300ProfitPoints = new ArrayList<Double>(other.hs300ProfitPoints);
      this.hs300ProfitPoints = __this__hs300ProfitPoints;
    }
    if (other.is_set_aiProfitPoints()) {
      List<Double> __this__aiProfitPoints = new ArrayList<Double>(other.aiProfitPoints);
      this.aiProfitPoints = __this__aiProfitPoints;
    }
    this.operationId = other.operationId;
    if (other.is_set_strategyName()) {
      this.strategyName = other.strategyName;
    }
  }

  public AIOperation deepCopy() {
    return new AIOperation(this);
  }

  public void clear() {
    this.stockCode = null;
    this.stockName = null;
    set_buyPrice_isSet(false);
    this.buyPrice = 0.0;
    set_sellPrice_isSet(false);
    this.sellPrice = 0.0;
    set_profit_isSet(false);
    this.profit = 0.0;
    set_profitPercentage_isSet(false);
    this.profitPercentage = 0.0;
    set_quantity_isSet(false);
    this.quantity = 0;
    set_pos_isSet(false);
    this.pos = 0;
    set_positionPercentage_isSet(false);
    this.positionPercentage = 0.0;
    this.buyTime = null;
    this.sellTime = null;
    this.buyReason = null;
    this.sellReason = null;
    if (this.hs300ProfitPoints != null) {
      this.hs300ProfitPoints.clear();
    }
    if (this.aiProfitPoints != null) {
      this.aiProfitPoints.clear();
    }
    set_operationId_isSet(false);
    this.operationId = 0;
    this.strategyName = null;
  }

  public String get_stockCode() {
    return this.stockCode;
  }

  public void set_stockCode(String stockCode) {
    this.stockCode = stockCode;
  }

  public void unset_stockCode() {
    this.stockCode = null;
  }

  /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockCode() {
    return this.stockCode != null;
  }

  public void set_stockCode_isSet(boolean value) {
    if (!value) {
      this.stockCode = null;
    }
  }

  public String get_stockName() {
    return this.stockName;
  }

  public void set_stockName(String stockName) {
    this.stockName = stockName;
  }

  public void unset_stockName() {
    this.stockName = null;
  }

  /** Returns true if field stockName is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockName() {
    return this.stockName != null;
  }

  public void set_stockName_isSet(boolean value) {
    if (!value) {
      this.stockName = null;
    }
  }

  public double get_buyPrice() {
    return this.buyPrice;
  }

  public void set_buyPrice(double buyPrice) {
    this.buyPrice = buyPrice;
    set_buyPrice_isSet(true);
  }

  public void unset_buyPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYPRICE_ISSET_ID);
  }

  /** Returns true if field buyPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_buyPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYPRICE_ISSET_ID);
  }

  public void set_buyPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYPRICE_ISSET_ID, value);
  }

  public double get_sellPrice() {
    return this.sellPrice;
  }

  public void set_sellPrice(double sellPrice) {
    this.sellPrice = sellPrice;
    set_sellPrice_isSet(true);
  }

  public void unset_sellPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLPRICE_ISSET_ID);
  }

  /** Returns true if field sellPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_sellPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLPRICE_ISSET_ID);
  }

  public void set_sellPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLPRICE_ISSET_ID, value);
  }

  public double get_profit() {
    return this.profit;
  }

  public void set_profit(double profit) {
    this.profit = profit;
    set_profit_isSet(true);
  }

  public void unset_profit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFIT_ISSET_ID);
  }

  /** Returns true if field profit is set (has been assigned a value) and false otherwise */
  public boolean is_set_profit() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFIT_ISSET_ID);
  }

  public void set_profit_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFIT_ISSET_ID, value);
  }

  public double get_profitPercentage() {
    return this.profitPercentage;
  }

  public void set_profitPercentage(double profitPercentage) {
    this.profitPercentage = profitPercentage;
    set_profitPercentage_isSet(true);
  }

  public void unset_profitPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field profitPercentage is set (has been assigned a value) and false otherwise */
  public boolean is_set_profitPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID);
  }

  public void set_profitPercentage_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID, value);
  }

  public int get_quantity() {
    return this.quantity;
  }

  public void set_quantity(int quantity) {
    this.quantity = quantity;
    set_quantity_isSet(true);
  }

  public void unset_quantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean is_set_quantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void set_quantity_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public int get_pos() {
    return this.pos;
  }

  public void set_pos(int pos) {
    this.pos = pos;
    set_pos_isSet(true);
  }

  public void unset_pos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
  }

  /** Returns true if field pos is set (has been assigned a value) and false otherwise */
  public boolean is_set_pos() {
    return EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
  }

  public void set_pos_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
  }

  public double get_positionPercentage() {
    return this.positionPercentage;
  }

  public void set_positionPercentage(double positionPercentage) {
    this.positionPercentage = positionPercentage;
    set_positionPercentage_isSet(true);
  }

  public void unset_positionPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field positionPercentage is set (has been assigned a value) and false otherwise */
  public boolean is_set_positionPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID);
  }

  public void set_positionPercentage_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID, value);
  }

  public String get_buyTime() {
    return this.buyTime;
  }

  public void set_buyTime(String buyTime) {
    this.buyTime = buyTime;
  }

  public void unset_buyTime() {
    this.buyTime = null;
  }

  /** Returns true if field buyTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_buyTime() {
    return this.buyTime != null;
  }

  public void set_buyTime_isSet(boolean value) {
    if (!value) {
      this.buyTime = null;
    }
  }

  public String get_sellTime() {
    return this.sellTime;
  }

  public void set_sellTime(String sellTime) {
    this.sellTime = sellTime;
  }

  public void unset_sellTime() {
    this.sellTime = null;
  }

  /** Returns true if field sellTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_sellTime() {
    return this.sellTime != null;
  }

  public void set_sellTime_isSet(boolean value) {
    if (!value) {
      this.sellTime = null;
    }
  }

  public String get_buyReason() {
    return this.buyReason;
  }

  public void set_buyReason(String buyReason) {
    this.buyReason = buyReason;
  }

  public void unset_buyReason() {
    this.buyReason = null;
  }

  /** Returns true if field buyReason is set (has been assigned a value) and false otherwise */
  public boolean is_set_buyReason() {
    return this.buyReason != null;
  }

  public void set_buyReason_isSet(boolean value) {
    if (!value) {
      this.buyReason = null;
    }
  }

  public String get_sellReason() {
    return this.sellReason;
  }

  public void set_sellReason(String sellReason) {
    this.sellReason = sellReason;
  }

  public void unset_sellReason() {
    this.sellReason = null;
  }

  /** Returns true if field sellReason is set (has been assigned a value) and false otherwise */
  public boolean is_set_sellReason() {
    return this.sellReason != null;
  }

  public void set_sellReason_isSet(boolean value) {
    if (!value) {
      this.sellReason = null;
    }
  }

  public int get_hs300ProfitPoints_size() {
    return (this.hs300ProfitPoints == null) ? 0 : this.hs300ProfitPoints.size();
  }

  public java.util.Iterator<Double> get_hs300ProfitPoints_iterator() {
    return (this.hs300ProfitPoints == null) ? null : this.hs300ProfitPoints.iterator();
  }

  public void add_to_hs300ProfitPoints(double elem) {
    if (this.hs300ProfitPoints == null) {
      this.hs300ProfitPoints = new ArrayList<Double>();
    }
    this.hs300ProfitPoints.add(elem);
  }

  public List<Double> get_hs300ProfitPoints() {
    return this.hs300ProfitPoints;
  }

  public void set_hs300ProfitPoints(List<Double> hs300ProfitPoints) {
    this.hs300ProfitPoints = hs300ProfitPoints;
  }

  public void unset_hs300ProfitPoints() {
    this.hs300ProfitPoints = null;
  }

  /** Returns true if field hs300ProfitPoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_hs300ProfitPoints() {
    return this.hs300ProfitPoints != null;
  }

  public void set_hs300ProfitPoints_isSet(boolean value) {
    if (!value) {
      this.hs300ProfitPoints = null;
    }
  }

  public int get_aiProfitPoints_size() {
    return (this.aiProfitPoints == null) ? 0 : this.aiProfitPoints.size();
  }

  public java.util.Iterator<Double> get_aiProfitPoints_iterator() {
    return (this.aiProfitPoints == null) ? null : this.aiProfitPoints.iterator();
  }

  public void add_to_aiProfitPoints(double elem) {
    if (this.aiProfitPoints == null) {
      this.aiProfitPoints = new ArrayList<Double>();
    }
    this.aiProfitPoints.add(elem);
  }

  public List<Double> get_aiProfitPoints() {
    return this.aiProfitPoints;
  }

  public void set_aiProfitPoints(List<Double> aiProfitPoints) {
    this.aiProfitPoints = aiProfitPoints;
  }

  public void unset_aiProfitPoints() {
    this.aiProfitPoints = null;
  }

  /** Returns true if field aiProfitPoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_aiProfitPoints() {
    return this.aiProfitPoints != null;
  }

  public void set_aiProfitPoints_isSet(boolean value) {
    if (!value) {
      this.aiProfitPoints = null;
    }
  }

  public long get_operationId() {
    return this.operationId;
  }

  public void set_operationId(long operationId) {
    this.operationId = operationId;
    set_operationId_isSet(true);
  }

  public void unset_operationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONID_ISSET_ID);
  }

  /** Returns true if field operationId is set (has been assigned a value) and false otherwise */
  public boolean is_set_operationId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONID_ISSET_ID);
  }

  public void set_operationId_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONID_ISSET_ID, value);
  }

  public String get_strategyName() {
    return this.strategyName;
  }

  public void set_strategyName(String strategyName) {
    this.strategyName = strategyName;
  }

  public void unset_strategyName() {
    this.strategyName = null;
  }

  /** Returns true if field strategyName is set (has been assigned a value) and false otherwise */
  public boolean is_set_strategyName() {
    return this.strategyName != null;
  }

  public void set_strategyName_isSet(boolean value) {
    if (!value) {
      this.strategyName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOCK_CODE:
      if (value == null) {
        unset_stockCode();
      } else {
        set_stockCode((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unset_stockName();
      } else {
        set_stockName((String)value);
      }
      break;

    case BUY_PRICE:
      if (value == null) {
        unset_buyPrice();
      } else {
        set_buyPrice((Double)value);
      }
      break;

    case SELL_PRICE:
      if (value == null) {
        unset_sellPrice();
      } else {
        set_sellPrice((Double)value);
      }
      break;

    case PROFIT:
      if (value == null) {
        unset_profit();
      } else {
        set_profit((Double)value);
      }
      break;

    case PROFIT_PERCENTAGE:
      if (value == null) {
        unset_profitPercentage();
      } else {
        set_profitPercentage((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unset_quantity();
      } else {
        set_quantity((Integer)value);
      }
      break;

    case POS:
      if (value == null) {
        unset_pos();
      } else {
        set_pos((Integer)value);
      }
      break;

    case POSITION_PERCENTAGE:
      if (value == null) {
        unset_positionPercentage();
      } else {
        set_positionPercentage((Double)value);
      }
      break;

    case BUY_TIME:
      if (value == null) {
        unset_buyTime();
      } else {
        set_buyTime((String)value);
      }
      break;

    case SELL_TIME:
      if (value == null) {
        unset_sellTime();
      } else {
        set_sellTime((String)value);
      }
      break;

    case BUY_REASON:
      if (value == null) {
        unset_buyReason();
      } else {
        set_buyReason((String)value);
      }
      break;

    case SELL_REASON:
      if (value == null) {
        unset_sellReason();
      } else {
        set_sellReason((String)value);
      }
      break;

    case HS300_PROFIT_POINTS:
      if (value == null) {
        unset_hs300ProfitPoints();
      } else {
        set_hs300ProfitPoints((List<Double>)value);
      }
      break;

    case AI_PROFIT_POINTS:
      if (value == null) {
        unset_aiProfitPoints();
      } else {
        set_aiProfitPoints((List<Double>)value);
      }
      break;

    case OPERATION_ID:
      if (value == null) {
        unset_operationId();
      } else {
        set_operationId((Long)value);
      }
      break;

    case STRATEGY_NAME:
      if (value == null) {
        unset_strategyName();
      } else {
        set_strategyName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOCK_CODE:
      return get_stockCode();

    case STOCK_NAME:
      return get_stockName();

    case BUY_PRICE:
      return get_buyPrice();

    case SELL_PRICE:
      return get_sellPrice();

    case PROFIT:
      return get_profit();

    case PROFIT_PERCENTAGE:
      return get_profitPercentage();

    case QUANTITY:
      return get_quantity();

    case POS:
      return get_pos();

    case POSITION_PERCENTAGE:
      return get_positionPercentage();

    case BUY_TIME:
      return get_buyTime();

    case SELL_TIME:
      return get_sellTime();

    case BUY_REASON:
      return get_buyReason();

    case SELL_REASON:
      return get_sellReason();

    case HS300_PROFIT_POINTS:
      return get_hs300ProfitPoints();

    case AI_PROFIT_POINTS:
      return get_aiProfitPoints();

    case OPERATION_ID:
      return get_operationId();

    case STRATEGY_NAME:
      return get_strategyName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOCK_CODE:
      return is_set_stockCode();
    case STOCK_NAME:
      return is_set_stockName();
    case BUY_PRICE:
      return is_set_buyPrice();
    case SELL_PRICE:
      return is_set_sellPrice();
    case PROFIT:
      return is_set_profit();
    case PROFIT_PERCENTAGE:
      return is_set_profitPercentage();
    case QUANTITY:
      return is_set_quantity();
    case POS:
      return is_set_pos();
    case POSITION_PERCENTAGE:
      return is_set_positionPercentage();
    case BUY_TIME:
      return is_set_buyTime();
    case SELL_TIME:
      return is_set_sellTime();
    case BUY_REASON:
      return is_set_buyReason();
    case SELL_REASON:
      return is_set_sellReason();
    case HS300_PROFIT_POINTS:
      return is_set_hs300ProfitPoints();
    case AI_PROFIT_POINTS:
      return is_set_aiProfitPoints();
    case OPERATION_ID:
      return is_set_operationId();
    case STRATEGY_NAME:
      return is_set_strategyName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AIOperation)
      return this.equals((AIOperation)that);
    return false;
  }

  public boolean equals(AIOperation that) {
    if (that == null)
      return false;

    boolean this_present_stockCode = true && this.is_set_stockCode();
    boolean that_present_stockCode = true && that.is_set_stockCode();
    if (this_present_stockCode || that_present_stockCode) {
      if (!(this_present_stockCode && that_present_stockCode))
        return false;
      if (!this.stockCode.equals(that.stockCode))
        return false;
    }

    boolean this_present_stockName = true && this.is_set_stockName();
    boolean that_present_stockName = true && that.is_set_stockName();
    if (this_present_stockName || that_present_stockName) {
      if (!(this_present_stockName && that_present_stockName))
        return false;
      if (!this.stockName.equals(that.stockName))
        return false;
    }

    boolean this_present_buyPrice = true;
    boolean that_present_buyPrice = true;
    if (this_present_buyPrice || that_present_buyPrice) {
      if (!(this_present_buyPrice && that_present_buyPrice))
        return false;
      if (this.buyPrice != that.buyPrice)
        return false;
    }

    boolean this_present_sellPrice = true;
    boolean that_present_sellPrice = true;
    if (this_present_sellPrice || that_present_sellPrice) {
      if (!(this_present_sellPrice && that_present_sellPrice))
        return false;
      if (this.sellPrice != that.sellPrice)
        return false;
    }

    boolean this_present_profit = true;
    boolean that_present_profit = true;
    if (this_present_profit || that_present_profit) {
      if (!(this_present_profit && that_present_profit))
        return false;
      if (this.profit != that.profit)
        return false;
    }

    boolean this_present_profitPercentage = true;
    boolean that_present_profitPercentage = true;
    if (this_present_profitPercentage || that_present_profitPercentage) {
      if (!(this_present_profitPercentage && that_present_profitPercentage))
        return false;
      if (this.profitPercentage != that.profitPercentage)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_pos = true;
    boolean that_present_pos = true;
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (this.pos != that.pos)
        return false;
    }

    boolean this_present_positionPercentage = true;
    boolean that_present_positionPercentage = true;
    if (this_present_positionPercentage || that_present_positionPercentage) {
      if (!(this_present_positionPercentage && that_present_positionPercentage))
        return false;
      if (this.positionPercentage != that.positionPercentage)
        return false;
    }

    boolean this_present_buyTime = true && this.is_set_buyTime();
    boolean that_present_buyTime = true && that.is_set_buyTime();
    if (this_present_buyTime || that_present_buyTime) {
      if (!(this_present_buyTime && that_present_buyTime))
        return false;
      if (!this.buyTime.equals(that.buyTime))
        return false;
    }

    boolean this_present_sellTime = true && this.is_set_sellTime();
    boolean that_present_sellTime = true && that.is_set_sellTime();
    if (this_present_sellTime || that_present_sellTime) {
      if (!(this_present_sellTime && that_present_sellTime))
        return false;
      if (!this.sellTime.equals(that.sellTime))
        return false;
    }

    boolean this_present_buyReason = true && this.is_set_buyReason();
    boolean that_present_buyReason = true && that.is_set_buyReason();
    if (this_present_buyReason || that_present_buyReason) {
      if (!(this_present_buyReason && that_present_buyReason))
        return false;
      if (!this.buyReason.equals(that.buyReason))
        return false;
    }

    boolean this_present_sellReason = true && this.is_set_sellReason();
    boolean that_present_sellReason = true && that.is_set_sellReason();
    if (this_present_sellReason || that_present_sellReason) {
      if (!(this_present_sellReason && that_present_sellReason))
        return false;
      if (!this.sellReason.equals(that.sellReason))
        return false;
    }

    boolean this_present_hs300ProfitPoints = true && this.is_set_hs300ProfitPoints();
    boolean that_present_hs300ProfitPoints = true && that.is_set_hs300ProfitPoints();
    if (this_present_hs300ProfitPoints || that_present_hs300ProfitPoints) {
      if (!(this_present_hs300ProfitPoints && that_present_hs300ProfitPoints))
        return false;
      if (!this.hs300ProfitPoints.equals(that.hs300ProfitPoints))
        return false;
    }

    boolean this_present_aiProfitPoints = true && this.is_set_aiProfitPoints();
    boolean that_present_aiProfitPoints = true && that.is_set_aiProfitPoints();
    if (this_present_aiProfitPoints || that_present_aiProfitPoints) {
      if (!(this_present_aiProfitPoints && that_present_aiProfitPoints))
        return false;
      if (!this.aiProfitPoints.equals(that.aiProfitPoints))
        return false;
    }

    boolean this_present_operationId = true && this.is_set_operationId();
    boolean that_present_operationId = true && that.is_set_operationId();
    if (this_present_operationId || that_present_operationId) {
      if (!(this_present_operationId && that_present_operationId))
        return false;
      if (this.operationId != that.operationId)
        return false;
    }

    boolean this_present_strategyName = true && this.is_set_strategyName();
    boolean that_present_strategyName = true && that.is_set_strategyName();
    if (this_present_strategyName || that_present_strategyName) {
      if (!(this_present_strategyName && that_present_strategyName))
        return false;
      if (!this.strategyName.equals(that.strategyName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stockCode = true && (is_set_stockCode());
    list.add(present_stockCode);
    if (present_stockCode)
      list.add(stockCode);

    boolean present_stockName = true && (is_set_stockName());
    list.add(present_stockName);
    if (present_stockName)
      list.add(stockName);

    boolean present_buyPrice = true;
    list.add(present_buyPrice);
    if (present_buyPrice)
      list.add(buyPrice);

    boolean present_sellPrice = true;
    list.add(present_sellPrice);
    if (present_sellPrice)
      list.add(sellPrice);

    boolean present_profit = true;
    list.add(present_profit);
    if (present_profit)
      list.add(profit);

    boolean present_profitPercentage = true;
    list.add(present_profitPercentage);
    if (present_profitPercentage)
      list.add(profitPercentage);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_pos = true;
    list.add(present_pos);
    if (present_pos)
      list.add(pos);

    boolean present_positionPercentage = true;
    list.add(present_positionPercentage);
    if (present_positionPercentage)
      list.add(positionPercentage);

    boolean present_buyTime = true && (is_set_buyTime());
    list.add(present_buyTime);
    if (present_buyTime)
      list.add(buyTime);

    boolean present_sellTime = true && (is_set_sellTime());
    list.add(present_sellTime);
    if (present_sellTime)
      list.add(sellTime);

    boolean present_buyReason = true && (is_set_buyReason());
    list.add(present_buyReason);
    if (present_buyReason)
      list.add(buyReason);

    boolean present_sellReason = true && (is_set_sellReason());
    list.add(present_sellReason);
    if (present_sellReason)
      list.add(sellReason);

    boolean present_hs300ProfitPoints = true && (is_set_hs300ProfitPoints());
    list.add(present_hs300ProfitPoints);
    if (present_hs300ProfitPoints)
      list.add(hs300ProfitPoints);

    boolean present_aiProfitPoints = true && (is_set_aiProfitPoints());
    list.add(present_aiProfitPoints);
    if (present_aiProfitPoints)
      list.add(aiProfitPoints);

    boolean present_operationId = true && (is_set_operationId());
    list.add(present_operationId);
    if (present_operationId)
      list.add(operationId);

    boolean present_strategyName = true && (is_set_strategyName());
    list.add(present_strategyName);
    if (present_strategyName)
      list.add(strategyName);

    return list.hashCode();
  }

  @Override
  public int compareTo(AIOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_stockCode()).compareTo(other.is_set_stockCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockName()).compareTo(other.is_set_stockName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockName, other.stockName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_buyPrice()).compareTo(other.is_set_buyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_buyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyPrice, other.buyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sellPrice()).compareTo(other.is_set_sellPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sellPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellPrice, other.sellPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profit()).compareTo(other.is_set_profit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profit, other.profit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profitPercentage()).compareTo(other.is_set_profitPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profitPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitPercentage, other.profitPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_quantity()).compareTo(other.is_set_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_pos()).compareTo(other.is_set_pos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_positionPercentage()).compareTo(other.is_set_positionPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_positionPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionPercentage, other.positionPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_buyTime()).compareTo(other.is_set_buyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_buyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyTime, other.buyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sellTime()).compareTo(other.is_set_sellTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sellTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellTime, other.sellTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_buyReason()).compareTo(other.is_set_buyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_buyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyReason, other.buyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sellReason()).compareTo(other.is_set_sellReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sellReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellReason, other.sellReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_hs300ProfitPoints()).compareTo(other.is_set_hs300ProfitPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_hs300ProfitPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hs300ProfitPoints, other.hs300ProfitPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_aiProfitPoints()).compareTo(other.is_set_aiProfitPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_aiProfitPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aiProfitPoints, other.aiProfitPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_operationId()).compareTo(other.is_set_operationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_operationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationId, other.operationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_strategyName()).compareTo(other.is_set_strategyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_strategyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyName, other.strategyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AIOperation(");
    boolean first = true;

    sb.append("stockCode:");
    if (this.stockCode == null) {
      sb.append("null");
    } else {
      sb.append(this.stockCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockName:");
    if (this.stockName == null) {
      sb.append("null");
    } else {
      sb.append(this.stockName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyPrice:");
    sb.append(this.buyPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellPrice:");
    sb.append(this.sellPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profit:");
    sb.append(this.profit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profitPercentage:");
    sb.append(this.profitPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos:");
    sb.append(this.pos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionPercentage:");
    sb.append(this.positionPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyTime:");
    if (this.buyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.buyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellTime:");
    if (this.sellTime == null) {
      sb.append("null");
    } else {
      sb.append(this.sellTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyReason:");
    if (this.buyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.buyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellReason:");
    if (this.sellReason == null) {
      sb.append("null");
    } else {
      sb.append(this.sellReason);
    }
    first = false;
    if (is_set_hs300ProfitPoints()) {
      if (!first) sb.append(", ");
      sb.append("hs300ProfitPoints:");
      if (this.hs300ProfitPoints == null) {
        sb.append("null");
      } else {
        sb.append(this.hs300ProfitPoints);
      }
      first = false;
    }
    if (is_set_aiProfitPoints()) {
      if (!first) sb.append(", ");
      sb.append("aiProfitPoints:");
      if (this.aiProfitPoints == null) {
        sb.append("null");
      } else {
        sb.append(this.aiProfitPoints);
      }
      first = false;
    }
    if (is_set_operationId()) {
      if (!first) sb.append(", ");
      sb.append("operationId:");
      sb.append(this.operationId);
      first = false;
    }
    if (is_set_strategyName()) {
      if (!first) sb.append(", ");
      sb.append("strategyName:");
      if (this.strategyName == null) {
        sb.append("null");
      } else {
        sb.append(this.strategyName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_stockCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockCode' is unset! Struct:" + toString());
    }

    if (!is_set_stockName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockName' is unset! Struct:" + toString());
    }

    if (!is_set_buyPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'buyPrice' is unset! Struct:" + toString());
    }

    if (!is_set_sellPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sellPrice' is unset! Struct:" + toString());
    }

    if (!is_set_profit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profit' is unset! Struct:" + toString());
    }

    if (!is_set_profitPercentage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profitPercentage' is unset! Struct:" + toString());
    }

    if (!is_set_quantity()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantity' is unset! Struct:" + toString());
    }

    if (!is_set_pos()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' is unset! Struct:" + toString());
    }

    if (!is_set_positionPercentage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionPercentage' is unset! Struct:" + toString());
    }

    if (!is_set_buyTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'buyTime' is unset! Struct:" + toString());
    }

    if (!is_set_sellTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sellTime' is unset! Struct:" + toString());
    }

    if (!is_set_buyReason()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'buyReason' is unset! Struct:" + toString());
    }

    if (!is_set_sellReason()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sellReason' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AIOperationStandardSchemeFactory implements SchemeFactory {
    public AIOperationStandardScheme getScheme() {
      return new AIOperationStandardScheme();
    }
  }

  private static class AIOperationStandardScheme extends StandardScheme<AIOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AIOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockCode = iprot.readString();
              struct.set_stockCode_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockName = iprot.readString();
              struct.set_stockName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.buyPrice = iprot.readDouble();
              struct.set_buyPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SELL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellPrice = iprot.readDouble();
              struct.set_sellPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.profit = iprot.readDouble();
              struct.set_profit_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROFIT_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.profitPercentage = iprot.readDouble();
              struct.set_profitPercentage_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.set_quantity_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pos = iprot.readI32();
              struct.set_pos_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionPercentage = iprot.readDouble();
              struct.set_positionPercentage_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyTime = iprot.readString();
              struct.set_buyTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellTime = iprot.readString();
              struct.set_sellTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyReason = iprot.readString();
              struct.set_buyReason_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELL_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellReason = iprot.readString();
              struct.set_sellReason_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HS300_PROFIT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list360 = iprot.readListBegin();
                if (struct.hs300ProfitPoints == null) {
                  struct.hs300ProfitPoints = new ArrayList<Double>(_list360.size);
                }
                double _elem361 = (double)0;
                for (int _i362 = 0; _i362 < _list360.size; ++_i362)
                {
                  _elem361 = iprot.readDouble();
                  struct.hs300ProfitPoints.add(_elem361);
                }
                iprot.readListEnd();
              }
              struct.set_hs300ProfitPoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AI_PROFIT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list363 = iprot.readListBegin();
                if (struct.aiProfitPoints == null) {
                  struct.aiProfitPoints = new ArrayList<Double>(_list363.size);
                }
                double _elem364 = (double)0;
                for (int _i365 = 0; _i365 < _list363.size; ++_i365)
                {
                  _elem364 = iprot.readDouble();
                  struct.aiProfitPoints.add(_elem364);
                }
                iprot.readListEnd();
              }
              struct.set_aiProfitPoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OPERATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operationId = iprot.readI64();
              struct.set_operationId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STRATEGY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategyName = iprot.readString();
              struct.set_strategyName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AIOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stockCode != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stockCode);
        oprot.writeFieldEnd();
      }
      if (struct.stockName != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stockName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.buyPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.sellPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.profit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFIT_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.profitPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_FIELD_DESC);
      oprot.writeI32(struct.pos);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.positionPercentage);
      oprot.writeFieldEnd();
      if (struct.buyTime != null) {
        oprot.writeFieldBegin(BUY_TIME_FIELD_DESC);
        oprot.writeString(struct.buyTime);
        oprot.writeFieldEnd();
      }
      if (struct.sellTime != null) {
        oprot.writeFieldBegin(SELL_TIME_FIELD_DESC);
        oprot.writeString(struct.sellTime);
        oprot.writeFieldEnd();
      }
      if (struct.buyReason != null) {
        oprot.writeFieldBegin(BUY_REASON_FIELD_DESC);
        oprot.writeString(struct.buyReason);
        oprot.writeFieldEnd();
      }
      if (struct.sellReason != null) {
        oprot.writeFieldBegin(SELL_REASON_FIELD_DESC);
        oprot.writeString(struct.sellReason);
        oprot.writeFieldEnd();
      }
      if (struct.hs300ProfitPoints != null) {
        if (struct.is_set_hs300ProfitPoints()) {
          oprot.writeFieldBegin(HS300_PROFIT_POINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.hs300ProfitPoints.size()));
            for (double _iter366 : struct.hs300ProfitPoints)
            {
              oprot.writeDouble(_iter366);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aiProfitPoints != null) {
        if (struct.is_set_aiProfitPoints()) {
          oprot.writeFieldBegin(AI_PROFIT_POINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.aiProfitPoints.size()));
            for (double _iter367 : struct.aiProfitPoints)
            {
              oprot.writeDouble(_iter367);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_operationId()) {
        oprot.writeFieldBegin(OPERATION_ID_FIELD_DESC);
        oprot.writeI64(struct.operationId);
        oprot.writeFieldEnd();
      }
      if (struct.strategyName != null) {
        if (struct.is_set_strategyName()) {
          oprot.writeFieldBegin(STRATEGY_NAME_FIELD_DESC);
          oprot.writeString(struct.strategyName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AIOperationTupleSchemeFactory implements SchemeFactory {
    public AIOperationTupleScheme getScheme() {
      return new AIOperationTupleScheme();
    }
  }

  private static class AIOperationTupleScheme extends TupleScheme<AIOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AIOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.stockCode);
      oprot.writeString(struct.stockName);
      oprot.writeDouble(struct.buyPrice);
      oprot.writeDouble(struct.sellPrice);
      oprot.writeDouble(struct.profit);
      oprot.writeDouble(struct.profitPercentage);
      oprot.writeI32(struct.quantity);
      oprot.writeI32(struct.pos);
      oprot.writeDouble(struct.positionPercentage);
      oprot.writeString(struct.buyTime);
      oprot.writeString(struct.sellTime);
      oprot.writeString(struct.buyReason);
      oprot.writeString(struct.sellReason);
      BitSet optionals = new BitSet();
      if (struct.is_set_hs300ProfitPoints()) {
        optionals.set(0);
      }
      if (struct.is_set_aiProfitPoints()) {
        optionals.set(1);
      }
      if (struct.is_set_operationId()) {
        optionals.set(2);
      }
      if (struct.is_set_strategyName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.is_set_hs300ProfitPoints()) {
        {
          oprot.writeI32(struct.hs300ProfitPoints.size());
          for (double _iter368 : struct.hs300ProfitPoints)
          {
            oprot.writeDouble(_iter368);
          }
        }
      }
      if (struct.is_set_aiProfitPoints()) {
        {
          oprot.writeI32(struct.aiProfitPoints.size());
          for (double _iter369 : struct.aiProfitPoints)
          {
            oprot.writeDouble(_iter369);
          }
        }
      }
      if (struct.is_set_operationId()) {
        oprot.writeI64(struct.operationId);
      }
      if (struct.is_set_strategyName()) {
        oprot.writeString(struct.strategyName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AIOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.stockCode = iprot.readString();
      struct.set_stockCode_isSet(true);
      struct.stockName = iprot.readString();
      struct.set_stockName_isSet(true);
      struct.buyPrice = iprot.readDouble();
      struct.set_buyPrice_isSet(true);
      struct.sellPrice = iprot.readDouble();
      struct.set_sellPrice_isSet(true);
      struct.profit = iprot.readDouble();
      struct.set_profit_isSet(true);
      struct.profitPercentage = iprot.readDouble();
      struct.set_profitPercentage_isSet(true);
      struct.quantity = iprot.readI32();
      struct.set_quantity_isSet(true);
      struct.pos = iprot.readI32();
      struct.set_pos_isSet(true);
      struct.positionPercentage = iprot.readDouble();
      struct.set_positionPercentage_isSet(true);
      struct.buyTime = iprot.readString();
      struct.set_buyTime_isSet(true);
      struct.sellTime = iprot.readString();
      struct.set_sellTime_isSet(true);
      struct.buyReason = iprot.readString();
      struct.set_buyReason_isSet(true);
      struct.sellReason = iprot.readString();
      struct.set_sellReason_isSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list370 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          if (struct.hs300ProfitPoints == null) {
            struct.hs300ProfitPoints = new ArrayList<Double>(_list370.size);
          }
          double _elem371 = (double)0;
          for (int _i372 = 0; _i372 < _list370.size; ++_i372)
          {
            _elem371 = iprot.readDouble();
            struct.hs300ProfitPoints.add(_elem371);
          }
        }
        struct.set_hs300ProfitPoints_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list373 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          if (struct.aiProfitPoints == null) {
            struct.aiProfitPoints = new ArrayList<Double>(_list373.size);
          }
          double _elem374 = (double)0;
          for (int _i375 = 0; _i375 < _list373.size; ++_i375)
          {
            _elem374 = iprot.readDouble();
            struct.aiProfitPoints.add(_elem374);
          }
        }
        struct.set_aiProfitPoints_isSet(true);
      }
      if (incoming.get(2)) {
        struct.operationId = iprot.readI64();
        struct.set_operationId_isSet(true);
      }
      if (incoming.get(3)) {
        struct.strategyName = iprot.readString();
        struct.set_strategyName_isSet(true);
      }
    }
  }

}

