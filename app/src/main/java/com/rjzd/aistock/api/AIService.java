/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AIService {

  /**
   * AI相关，策略类
   * 
   */
  public interface Iface {

    public AIList getAllTheAI() throws org.apache.thrift.TException;

    public AIInfoData getAIInfo(String id) throws org.apache.thrift.TException;

    public AIAttention getAttentionAIs(int userId) throws org.apache.thrift.TException;

    public AIIncome getAIIncome(String id, AIIncomeType incomeType) throws org.apache.thrift.TException;

    public AIOperationList getOperations(String id, boolean isAll, int topN, boolean isAscend) throws org.apache.thrift.TException;

    public AIOperationList getOperationsByPage(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException;

    public DateTransferList getAITransfers(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllTheAI(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAIInfo(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAttentionAIs(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAIIncome(String id, AIIncomeType incomeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOperations(String id, boolean isAll, int topN, boolean isAscend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOperationsByPage(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAITransfers(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public AIList getAllTheAI() throws org.apache.thrift.TException
    {
      sendGetAllTheAI();
      return recvGetAllTheAI();
    }

    public void sendGetAllTheAI() throws org.apache.thrift.TException
    {
      getAllTheAI_args args = new getAllTheAI_args();
      sendBase("getAllTheAI", args);
    }

    public AIList recvGetAllTheAI() throws org.apache.thrift.TException
    {
      getAllTheAI_result result = new getAllTheAI_result();
      receiveBase(result, "getAllTheAI");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTheAI failed: unknown result");
    }

    public AIInfoData getAIInfo(String id) throws org.apache.thrift.TException
    {
      sendGetAIInfo(id);
      return recvGetAIInfo();
    }

    public void sendGetAIInfo(String id) throws org.apache.thrift.TException
    {
      getAIInfo_args args = new getAIInfo_args();
      args.set_id(id);
      sendBase("getAIInfo", args);
    }

    public AIInfoData recvGetAIInfo() throws org.apache.thrift.TException
    {
      getAIInfo_result result = new getAIInfo_result();
      receiveBase(result, "getAIInfo");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAIInfo failed: unknown result");
    }

    public AIAttention getAttentionAIs(int userId) throws org.apache.thrift.TException
    {
      sendGetAttentionAIs(userId);
      return recvGetAttentionAIs();
    }

    public void sendGetAttentionAIs(int userId) throws org.apache.thrift.TException
    {
      getAttentionAIs_args args = new getAttentionAIs_args();
      args.set_userId(userId);
      sendBase("getAttentionAIs", args);
    }

    public AIAttention recvGetAttentionAIs() throws org.apache.thrift.TException
    {
      getAttentionAIs_result result = new getAttentionAIs_result();
      receiveBase(result, "getAttentionAIs");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAttentionAIs failed: unknown result");
    }

    public AIIncome getAIIncome(String id, AIIncomeType incomeType) throws org.apache.thrift.TException
    {
      sendGetAIIncome(id, incomeType);
      return recvGetAIIncome();
    }

    public void sendGetAIIncome(String id, AIIncomeType incomeType) throws org.apache.thrift.TException
    {
      getAIIncome_args args = new getAIIncome_args();
      args.set_id(id);
      args.set_incomeType(incomeType);
      sendBase("getAIIncome", args);
    }

    public AIIncome recvGetAIIncome() throws org.apache.thrift.TException
    {
      getAIIncome_result result = new getAIIncome_result();
      receiveBase(result, "getAIIncome");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAIIncome failed: unknown result");
    }

    public AIOperationList getOperations(String id, boolean isAll, int topN, boolean isAscend) throws org.apache.thrift.TException
    {
      sendGetOperations(id, isAll, topN, isAscend);
      return recvGetOperations();
    }

    public void sendGetOperations(String id, boolean isAll, int topN, boolean isAscend) throws org.apache.thrift.TException
    {
      getOperations_args args = new getOperations_args();
      args.set_id(id);
      args.set_isAll(isAll);
      args.set_topN(topN);
      args.set_isAscend(isAscend);
      sendBase("getOperations", args);
    }

    public AIOperationList recvGetOperations() throws org.apache.thrift.TException
    {
      getOperations_result result = new getOperations_result();
      receiveBase(result, "getOperations");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOperations failed: unknown result");
    }

    public AIOperationList getOperationsByPage(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      sendGetOperationsByPage(id, pageNo, numPerPage);
      return recvGetOperationsByPage();
    }

    public void sendGetOperationsByPage(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      getOperationsByPage_args args = new getOperationsByPage_args();
      args.set_id(id);
      args.set_pageNo(pageNo);
      args.set_numPerPage(numPerPage);
      sendBase("getOperationsByPage", args);
    }

    public AIOperationList recvGetOperationsByPage() throws org.apache.thrift.TException
    {
      getOperationsByPage_result result = new getOperationsByPage_result();
      receiveBase(result, "getOperationsByPage");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOperationsByPage failed: unknown result");
    }

    public DateTransferList getAITransfers(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      sendGetAITransfers(id, pageNo, numPerPage);
      return recvGetAITransfers();
    }

    public void sendGetAITransfers(String id, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      getAITransfers_args args = new getAITransfers_args();
      args.set_id(id);
      args.set_pageNo(pageNo);
      args.set_numPerPage(numPerPage);
      sendBase("getAITransfers", args);
    }

    public DateTransferList recvGetAITransfers() throws org.apache.thrift.TException
    {
      getAITransfers_result result = new getAITransfers_result();
      receiveBase(result, "getAITransfers");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAITransfers failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllTheAI(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllTheAI_call method_call = new getAllTheAI_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTheAI_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllTheAI_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTheAI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTheAI_args args = new getAllTheAI_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetAllTheAI();
      }
    }

    public void getAIInfo(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAIInfo_call method_call = new getAIInfo_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAIInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getAIInfo_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAIInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAIInfo_args args = new getAIInfo_args();
        args.set_id(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIInfoData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetAIInfo();
      }
    }

    public void getAttentionAIs(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAttentionAIs_call method_call = new getAttentionAIs_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAttentionAIs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getAttentionAIs_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAttentionAIs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAttentionAIs_args args = new getAttentionAIs_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIAttention getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetAttentionAIs();
      }
    }

    public void getAIIncome(String id, AIIncomeType incomeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAIIncome_call method_call = new getAIIncome_call(id, incomeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAIIncome_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private AIIncomeType incomeType;
      public getAIIncome_call(String id, AIIncomeType incomeType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.incomeType = incomeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAIIncome", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAIIncome_args args = new getAIIncome_args();
        args.set_id(id);
        args.set_incomeType(incomeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIIncome getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetAIIncome();
      }
    }

    public void getOperations(String id, boolean isAll, int topN, boolean isAscend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOperations_call method_call = new getOperations_call(id, isAll, topN, isAscend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOperations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private boolean isAll;
      private int topN;
      private boolean isAscend;
      public getOperations_call(String id, boolean isAll, int topN, boolean isAscend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.isAll = isAll;
        this.topN = topN;
        this.isAscend = isAscend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOperations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOperations_args args = new getOperations_args();
        args.set_id(id);
        args.set_isAll(isAll);
        args.set_topN(topN);
        args.set_isAscend(isAscend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIOperationList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetOperations();
      }
    }

    public void getOperationsByPage(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOperationsByPage_call method_call = new getOperationsByPage_call(id, pageNo, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOperationsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int pageNo;
      private int numPerPage;
      public getOperationsByPage_call(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.pageNo = pageNo;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOperationsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOperationsByPage_args args = new getOperationsByPage_args();
        args.set_id(id);
        args.set_pageNo(pageNo);
        args.set_numPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AIOperationList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetOperationsByPage();
      }
    }

    public void getAITransfers(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAITransfers_call method_call = new getAITransfers_call(id, pageNo, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAITransfers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int pageNo;
      private int numPerPage;
      public getAITransfers_call(String id, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.pageNo = pageNo;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAITransfers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAITransfers_args args = new getAITransfers_args();
        args.set_id(id);
        args.set_pageNo(pageNo);
        args.set_numPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DateTransferList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetAITransfers();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllTheAI", new getAllTheAI());
      processMap.put("getAIInfo", new getAIInfo());
      processMap.put("getAttentionAIs", new getAttentionAIs());
      processMap.put("getAIIncome", new getAIIncome());
      processMap.put("getOperations", new getOperations());
      processMap.put("getOperationsByPage", new getOperationsByPage());
      processMap.put("getAITransfers", new getAITransfers());
      return processMap;
    }

    public static class getAllTheAI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTheAI_args> {
      public getAllTheAI() {
        super("getAllTheAI");
      }

      public getAllTheAI_args getEmptyArgsInstance() {
        return new getAllTheAI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllTheAI_result getResult(I iface, getAllTheAI_args args) throws org.apache.thrift.TException {
        getAllTheAI_result result = new getAllTheAI_result();
        result.success = iface.getAllTheAI();
        return result;
      }
    }

    public static class getAIInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAIInfo_args> {
      public getAIInfo() {
        super("getAIInfo");
      }

      public getAIInfo_args getEmptyArgsInstance() {
        return new getAIInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAIInfo_result getResult(I iface, getAIInfo_args args) throws org.apache.thrift.TException {
        getAIInfo_result result = new getAIInfo_result();
        result.success = iface.getAIInfo(args.id);
        return result;
      }
    }

    public static class getAttentionAIs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAttentionAIs_args> {
      public getAttentionAIs() {
        super("getAttentionAIs");
      }

      public getAttentionAIs_args getEmptyArgsInstance() {
        return new getAttentionAIs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAttentionAIs_result getResult(I iface, getAttentionAIs_args args) throws org.apache.thrift.TException {
        getAttentionAIs_result result = new getAttentionAIs_result();
        result.success = iface.getAttentionAIs(args.userId);
        return result;
      }
    }

    public static class getAIIncome<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAIIncome_args> {
      public getAIIncome() {
        super("getAIIncome");
      }

      public getAIIncome_args getEmptyArgsInstance() {
        return new getAIIncome_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAIIncome_result getResult(I iface, getAIIncome_args args) throws org.apache.thrift.TException {
        getAIIncome_result result = new getAIIncome_result();
        result.success = iface.getAIIncome(args.id, args.incomeType);
        return result;
      }
    }

    public static class getOperations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOperations_args> {
      public getOperations() {
        super("getOperations");
      }

      public getOperations_args getEmptyArgsInstance() {
        return new getOperations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOperations_result getResult(I iface, getOperations_args args) throws org.apache.thrift.TException {
        getOperations_result result = new getOperations_result();
        result.success = iface.getOperations(args.id, args.isAll, args.topN, args.isAscend);
        return result;
      }
    }

    public static class getOperationsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOperationsByPage_args> {
      public getOperationsByPage() {
        super("getOperationsByPage");
      }

      public getOperationsByPage_args getEmptyArgsInstance() {
        return new getOperationsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOperationsByPage_result getResult(I iface, getOperationsByPage_args args) throws org.apache.thrift.TException {
        getOperationsByPage_result result = new getOperationsByPage_result();
        result.success = iface.getOperationsByPage(args.id, args.pageNo, args.numPerPage);
        return result;
      }
    }

    public static class getAITransfers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAITransfers_args> {
      public getAITransfers() {
        super("getAITransfers");
      }

      public getAITransfers_args getEmptyArgsInstance() {
        return new getAITransfers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAITransfers_result getResult(I iface, getAITransfers_args args) throws org.apache.thrift.TException {
        getAITransfers_result result = new getAITransfers_result();
        result.success = iface.getAITransfers(args.id, args.pageNo, args.numPerPage);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllTheAI", new getAllTheAI());
      processMap.put("getAIInfo", new getAIInfo());
      processMap.put("getAttentionAIs", new getAttentionAIs());
      processMap.put("getAIIncome", new getAIIncome());
      processMap.put("getOperations", new getOperations());
      processMap.put("getOperationsByPage", new getOperationsByPage());
      processMap.put("getAITransfers", new getAITransfers());
      return processMap;
    }

    public static class getAllTheAI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTheAI_args, AIList> {
      public getAllTheAI() {
        super("getAllTheAI");
      }

      public getAllTheAI_args getEmptyArgsInstance() {
        return new getAllTheAI_args();
      }

      public AsyncMethodCallback<AIList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIList>() { 
          public void onComplete(AIList o) {
            getAllTheAI_result result = new getAllTheAI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllTheAI_result result = new getAllTheAI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllTheAI_args args, org.apache.thrift.async.AsyncMethodCallback<AIList> resultHandler) throws TException {
        iface.getAllTheAI(resultHandler);
      }
    }

    public static class getAIInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAIInfo_args, AIInfoData> {
      public getAIInfo() {
        super("getAIInfo");
      }

      public getAIInfo_args getEmptyArgsInstance() {
        return new getAIInfo_args();
      }

      public AsyncMethodCallback<AIInfoData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIInfoData>() { 
          public void onComplete(AIInfoData o) {
            getAIInfo_result result = new getAIInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAIInfo_result result = new getAIInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAIInfo_args args, org.apache.thrift.async.AsyncMethodCallback<AIInfoData> resultHandler) throws TException {
        iface.getAIInfo(args.id,resultHandler);
      }
    }

    public static class getAttentionAIs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAttentionAIs_args, AIAttention> {
      public getAttentionAIs() {
        super("getAttentionAIs");
      }

      public getAttentionAIs_args getEmptyArgsInstance() {
        return new getAttentionAIs_args();
      }

      public AsyncMethodCallback<AIAttention> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIAttention>() { 
          public void onComplete(AIAttention o) {
            getAttentionAIs_result result = new getAttentionAIs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAttentionAIs_result result = new getAttentionAIs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAttentionAIs_args args, org.apache.thrift.async.AsyncMethodCallback<AIAttention> resultHandler) throws TException {
        iface.getAttentionAIs(args.userId,resultHandler);
      }
    }

    public static class getAIIncome<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAIIncome_args, AIIncome> {
      public getAIIncome() {
        super("getAIIncome");
      }

      public getAIIncome_args getEmptyArgsInstance() {
        return new getAIIncome_args();
      }

      public AsyncMethodCallback<AIIncome> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIIncome>() { 
          public void onComplete(AIIncome o) {
            getAIIncome_result result = new getAIIncome_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAIIncome_result result = new getAIIncome_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAIIncome_args args, org.apache.thrift.async.AsyncMethodCallback<AIIncome> resultHandler) throws TException {
        iface.getAIIncome(args.id, args.incomeType,resultHandler);
      }
    }

    public static class getOperations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOperations_args, AIOperationList> {
      public getOperations() {
        super("getOperations");
      }

      public getOperations_args getEmptyArgsInstance() {
        return new getOperations_args();
      }

      public AsyncMethodCallback<AIOperationList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIOperationList>() { 
          public void onComplete(AIOperationList o) {
            getOperations_result result = new getOperations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOperations_result result = new getOperations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOperations_args args, org.apache.thrift.async.AsyncMethodCallback<AIOperationList> resultHandler) throws TException {
        iface.getOperations(args.id, args.isAll, args.topN, args.isAscend,resultHandler);
      }
    }

    public static class getOperationsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOperationsByPage_args, AIOperationList> {
      public getOperationsByPage() {
        super("getOperationsByPage");
      }

      public getOperationsByPage_args getEmptyArgsInstance() {
        return new getOperationsByPage_args();
      }

      public AsyncMethodCallback<AIOperationList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AIOperationList>() { 
          public void onComplete(AIOperationList o) {
            getOperationsByPage_result result = new getOperationsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOperationsByPage_result result = new getOperationsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOperationsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<AIOperationList> resultHandler) throws TException {
        iface.getOperationsByPage(args.id, args.pageNo, args.numPerPage,resultHandler);
      }
    }

    public static class getAITransfers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAITransfers_args, DateTransferList> {
      public getAITransfers() {
        super("getAITransfers");
      }

      public getAITransfers_args getEmptyArgsInstance() {
        return new getAITransfers_args();
      }

      public AsyncMethodCallback<DateTransferList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DateTransferList>() { 
          public void onComplete(DateTransferList o) {
            getAITransfers_result result = new getAITransfers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAITransfers_result result = new getAITransfers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAITransfers_args args, org.apache.thrift.async.AsyncMethodCallback<DateTransferList> resultHandler) throws TException {
        iface.getAITransfers(args.id, args.pageNo, args.numPerPage,resultHandler);
      }
    }

  }

  public static class getAllTheAI_args implements org.apache.thrift.TBase<getAllTheAI_args, getAllTheAI_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTheAI_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTheAI_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTheAI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTheAI_argsTupleSchemeFactory());
    }


    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAllTheAI_args(android.os.Parcel in) {
    }

    public static final android.os.Parcelable.Creator<getAllTheAI_args> CREATOR = new android.os.Parcelable.Creator<getAllTheAI_args>() {
      @Override
      public getAllTheAI_args[] newArray(int size) {
        return new getAllTheAI_args[size];
      }

      @Override
      public getAllTheAI_args createFromParcel(android.os.Parcel in) {
        return new getAllTheAI_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTheAI_args.class, metaDataMap);
    }

    public getAllTheAI_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTheAI_args(getAllTheAI_args other) {
    }

    public getAllTheAI_args deepCopy() {
      return new getAllTheAI_args(this);
    }

    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTheAI_args)
        return this.equals((getAllTheAI_args)that);
      return false;
    }

    public boolean equals(getAllTheAI_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTheAI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTheAI_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAllTheAI_argsStandardSchemeFactory implements SchemeFactory {
      public getAllTheAI_argsStandardScheme getScheme() {
        return new getAllTheAI_argsStandardScheme();
      }
    }

    private static class getAllTheAI_argsStandardScheme extends StandardScheme<getAllTheAI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTheAI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTheAI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTheAI_argsTupleSchemeFactory implements SchemeFactory {
      public getAllTheAI_argsTupleScheme getScheme() {
        return new getAllTheAI_argsTupleScheme();
      }
    }

    private static class getAllTheAI_argsTupleScheme extends TupleScheme<getAllTheAI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTheAI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTheAI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllTheAI_result implements org.apache.thrift.TBase<getAllTheAI_result, getAllTheAI_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTheAI_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTheAI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTheAI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTheAI_resultTupleSchemeFactory());
    }

    private AIList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAllTheAI_result(android.os.Parcel in) {
      this.success= in.readParcelable(getAllTheAI_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getAllTheAI_result> CREATOR = new android.os.Parcelable.Creator<getAllTheAI_result>() {
      @Override
      public getAllTheAI_result[] newArray(int size) {
        return new getAllTheAI_result[size];
      }

      @Override
      public getAllTheAI_result createFromParcel(android.os.Parcel in) {
        return new getAllTheAI_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTheAI_result.class, metaDataMap);
    }

    public getAllTheAI_result() {
    }

    public getAllTheAI_result(
      AIList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTheAI_result(getAllTheAI_result other) {
      if (other.is_set_success()) {
        this.success = new AIList(other.success);
      }
    }

    public getAllTheAI_result deepCopy() {
      return new getAllTheAI_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIList get_success() {
      return this.success;
    }

    public void set_success(AIList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTheAI_result)
        return this.equals((getAllTheAI_result)that);
      return false;
    }

    public boolean equals(getAllTheAI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTheAI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTheAI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAllTheAI_resultStandardSchemeFactory implements SchemeFactory {
      public getAllTheAI_resultStandardScheme getScheme() {
        return new getAllTheAI_resultStandardScheme();
      }
    }

    private static class getAllTheAI_resultStandardScheme extends StandardScheme<getAllTheAI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTheAI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTheAI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTheAI_resultTupleSchemeFactory implements SchemeFactory {
      public getAllTheAI_resultTupleScheme getScheme() {
        return new getAllTheAI_resultTupleScheme();
      }
    }

    private static class getAllTheAI_resultTupleScheme extends TupleScheme<getAllTheAI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTheAI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTheAI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getAIInfo_args implements org.apache.thrift.TBase<getAIInfo_args, getAIInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAIInfo_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAIInfo_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAIInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAIInfo_argsTupleSchemeFactory());
    }

    private String id; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(id);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAIInfo_args(android.os.Parcel in) {
      this.id= in.readString();
    }

    public static final android.os.Parcelable.Creator<getAIInfo_args> CREATOR = new android.os.Parcelable.Creator<getAIInfo_args>() {
      @Override
      public getAIInfo_args[] newArray(int size) {
        return new getAIInfo_args[size];
      }

      @Override
      public getAIInfo_args createFromParcel(android.os.Parcel in) {
        return new getAIInfo_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAIInfo_args.class, metaDataMap);
    }

    public getAIInfo_args() {
    }

    public getAIInfo_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAIInfo_args(getAIInfo_args other) {
      if (other.is_set_id()) {
        this.id = other.id;
      }
    }

    public getAIInfo_args deepCopy() {
      return new getAIInfo_args(this);
    }

    public void clear() {
      this.id = null;
    }

    public String get_id() {
      return this.id;
    }

    public void set_id(String id) {
      this.id = id;
    }

    public void unset_id() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean is_set_id() {
      return this.id != null;
    }

    public void set_id_isSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return is_set_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAIInfo_args)
        return this.equals((getAIInfo_args)that);
      return false;
    }

    public boolean equals(getAIInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.is_set_id();
      boolean that_present_id = true && that.is_set_id();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (is_set_id());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAIInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAIInfo_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAIInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getAIInfo_argsStandardScheme getScheme() {
        return new getAIInfo_argsStandardScheme();
      }
    }

    private static class getAIInfo_argsStandardScheme extends StandardScheme<getAIInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAIInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.set_id_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAIInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAIInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getAIInfo_argsTupleScheme getScheme() {
        return new getAIInfo_argsTupleScheme();
      }
    }

    private static class getAIInfo_argsTupleScheme extends TupleScheme<getAIInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAIInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_id()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAIInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.set_id_isSet(true);
        }
      }
    }

  }

  public static class getAIInfo_result implements org.apache.thrift.TBase<getAIInfo_result, getAIInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAIInfo_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAIInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAIInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAIInfo_resultTupleSchemeFactory());
    }

    private AIInfoData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAIInfo_result(android.os.Parcel in) {
      this.success= in.readParcelable(getAIInfo_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getAIInfo_result> CREATOR = new android.os.Parcelable.Creator<getAIInfo_result>() {
      @Override
      public getAIInfo_result[] newArray(int size) {
        return new getAIInfo_result[size];
      }

      @Override
      public getAIInfo_result createFromParcel(android.os.Parcel in) {
        return new getAIInfo_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIInfoData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAIInfo_result.class, metaDataMap);
    }

    public getAIInfo_result() {
    }

    public getAIInfo_result(
      AIInfoData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAIInfo_result(getAIInfo_result other) {
      if (other.is_set_success()) {
        this.success = new AIInfoData(other.success);
      }
    }

    public getAIInfo_result deepCopy() {
      return new getAIInfo_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIInfoData get_success() {
      return this.success;
    }

    public void set_success(AIInfoData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIInfoData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAIInfo_result)
        return this.equals((getAIInfo_result)that);
      return false;
    }

    public boolean equals(getAIInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAIInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAIInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAIInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getAIInfo_resultStandardScheme getScheme() {
        return new getAIInfo_resultStandardScheme();
      }
    }

    private static class getAIInfo_resultStandardScheme extends StandardScheme<getAIInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAIInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIInfoData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAIInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAIInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getAIInfo_resultTupleScheme getScheme() {
        return new getAIInfo_resultTupleScheme();
      }
    }

    private static class getAIInfo_resultTupleScheme extends TupleScheme<getAIInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAIInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAIInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIInfoData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getAttentionAIs_args implements org.apache.thrift.TBase<getAttentionAIs_args, getAttentionAIs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAttentionAIs_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttentionAIs_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAttentionAIs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAttentionAIs_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAttentionAIs_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getAttentionAIs_args> CREATOR = new android.os.Parcelable.Creator<getAttentionAIs_args>() {
      @Override
      public getAttentionAIs_args[] newArray(int size) {
        return new getAttentionAIs_args[size];
      }

      @Override
      public getAttentionAIs_args createFromParcel(android.os.Parcel in) {
        return new getAttentionAIs_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttentionAIs_args.class, metaDataMap);
    }

    public getAttentionAIs_args() {
    }

    public getAttentionAIs_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttentionAIs_args(getAttentionAIs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getAttentionAIs_args deepCopy() {
      return new getAttentionAIs_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttentionAIs_args)
        return this.equals((getAttentionAIs_args)that);
      return false;
    }

    public boolean equals(getAttentionAIs_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAttentionAIs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAttentionAIs_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAttentionAIs_argsStandardSchemeFactory implements SchemeFactory {
      public getAttentionAIs_argsStandardScheme getScheme() {
        return new getAttentionAIs_argsStandardScheme();
      }
    }

    private static class getAttentionAIs_argsStandardScheme extends StandardScheme<getAttentionAIs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttentionAIs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttentionAIs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttentionAIs_argsTupleSchemeFactory implements SchemeFactory {
      public getAttentionAIs_argsTupleScheme getScheme() {
        return new getAttentionAIs_argsTupleScheme();
      }
    }

    private static class getAttentionAIs_argsTupleScheme extends TupleScheme<getAttentionAIs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttentionAIs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttentionAIs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getAttentionAIs_result implements org.apache.thrift.TBase<getAttentionAIs_result, getAttentionAIs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAttentionAIs_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttentionAIs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAttentionAIs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAttentionAIs_resultTupleSchemeFactory());
    }

    private AIAttention success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAttentionAIs_result(android.os.Parcel in) {
      this.success= in.readParcelable(getAttentionAIs_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getAttentionAIs_result> CREATOR = new android.os.Parcelable.Creator<getAttentionAIs_result>() {
      @Override
      public getAttentionAIs_result[] newArray(int size) {
        return new getAttentionAIs_result[size];
      }

      @Override
      public getAttentionAIs_result createFromParcel(android.os.Parcel in) {
        return new getAttentionAIs_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIAttention.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttentionAIs_result.class, metaDataMap);
    }

    public getAttentionAIs_result() {
    }

    public getAttentionAIs_result(
      AIAttention success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttentionAIs_result(getAttentionAIs_result other) {
      if (other.is_set_success()) {
        this.success = new AIAttention(other.success);
      }
    }

    public getAttentionAIs_result deepCopy() {
      return new getAttentionAIs_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIAttention get_success() {
      return this.success;
    }

    public void set_success(AIAttention success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIAttention)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttentionAIs_result)
        return this.equals((getAttentionAIs_result)that);
      return false;
    }

    public boolean equals(getAttentionAIs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAttentionAIs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAttentionAIs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAttentionAIs_resultStandardSchemeFactory implements SchemeFactory {
      public getAttentionAIs_resultStandardScheme getScheme() {
        return new getAttentionAIs_resultStandardScheme();
      }
    }

    private static class getAttentionAIs_resultStandardScheme extends StandardScheme<getAttentionAIs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttentionAIs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIAttention();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttentionAIs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttentionAIs_resultTupleSchemeFactory implements SchemeFactory {
      public getAttentionAIs_resultTupleScheme getScheme() {
        return new getAttentionAIs_resultTupleScheme();
      }
    }

    private static class getAttentionAIs_resultTupleScheme extends TupleScheme<getAttentionAIs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttentionAIs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttentionAIs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIAttention();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getAIIncome_args implements org.apache.thrift.TBase<getAIIncome_args, getAIIncome_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAIIncome_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAIIncome_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INCOME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAIIncome_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAIIncome_argsTupleSchemeFactory());
    }

    private String id; // required
    private AIIncomeType incomeType; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(id);
      out.writeInt(incomeType.getValue());
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAIIncome_args(android.os.Parcel in) {
      this.id= in.readString();
      this.incomeType = AIIncomeType.findByValue(in.readInt());
    }

    public static final android.os.Parcelable.Creator<getAIIncome_args> CREATOR = new android.os.Parcelable.Creator<getAIIncome_args>() {
      @Override
      public getAIIncome_args[] newArray(int size) {
        return new getAIIncome_args[size];
      }

      @Override
      public getAIIncome_args createFromParcel(android.os.Parcel in) {
        return new getAIIncome_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      /**
       * 
       * @see AIIncomeType
       */
      INCOME_TYPE((short)2, "incomeType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // INCOME_TYPE
            return INCOME_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INCOME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("incomeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AIIncomeType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAIIncome_args.class, metaDataMap);
    }

    public getAIIncome_args() {
    }

    public getAIIncome_args(
      String id,
      AIIncomeType incomeType)
    {
      this();
      this.id = id;
      this.incomeType = incomeType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAIIncome_args(getAIIncome_args other) {
      if (other.is_set_id()) {
        this.id = other.id;
      }
      if (other.is_set_incomeType()) {
        this.incomeType = other.incomeType;
      }
    }

    public getAIIncome_args deepCopy() {
      return new getAIIncome_args(this);
    }

    public void clear() {
      this.id = null;
      this.incomeType = null;
    }

    public String get_id() {
      return this.id;
    }

    public void set_id(String id) {
      this.id = id;
    }

    public void unset_id() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean is_set_id() {
      return this.id != null;
    }

    public void set_id_isSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    /**
     * 
     * @see AIIncomeType
     */
    public AIIncomeType get_incomeType() {
      return this.incomeType;
    }

    /**
     * 
     * @see AIIncomeType
     */
    public void set_incomeType(AIIncomeType incomeType) {
      this.incomeType = incomeType;
    }

    public void unset_incomeType() {
      this.incomeType = null;
    }

    /** Returns true if field incomeType is set (has been assigned a value) and false otherwise */
    public boolean is_set_incomeType() {
      return this.incomeType != null;
    }

    public void set_incomeType_isSet(boolean value) {
      if (!value) {
        this.incomeType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      case INCOME_TYPE:
        if (value == null) {
          unset_incomeType();
        } else {
          set_incomeType((AIIncomeType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return get_id();

      case INCOME_TYPE:
        return get_incomeType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return is_set_id();
      case INCOME_TYPE:
        return is_set_incomeType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAIIncome_args)
        return this.equals((getAIIncome_args)that);
      return false;
    }

    public boolean equals(getAIIncome_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.is_set_id();
      boolean that_present_id = true && that.is_set_id();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_incomeType = true && this.is_set_incomeType();
      boolean that_present_incomeType = true && that.is_set_incomeType();
      if (this_present_incomeType || that_present_incomeType) {
        if (!(this_present_incomeType && that_present_incomeType))
          return false;
        if (!this.incomeType.equals(that.incomeType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (is_set_id());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_incomeType = true && (is_set_incomeType());
      list.add(present_incomeType);
      if (present_incomeType)
        list.add(incomeType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getAIIncome_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_incomeType()).compareTo(other.is_set_incomeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_incomeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeType, other.incomeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAIIncome_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("incomeType:");
      if (this.incomeType == null) {
        sb.append("null");
      } else {
        sb.append(this.incomeType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAIIncome_argsStandardSchemeFactory implements SchemeFactory {
      public getAIIncome_argsStandardScheme getScheme() {
        return new getAIIncome_argsStandardScheme();
      }
    }

    private static class getAIIncome_argsStandardScheme extends StandardScheme<getAIIncome_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAIIncome_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.set_id_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INCOME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.incomeType = com.rjzd.aistock.api.AIIncomeType.findByValue(iprot.readI32());
                struct.set_incomeType_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAIIncome_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.incomeType != null) {
          oprot.writeFieldBegin(INCOME_TYPE_FIELD_DESC);
          oprot.writeI32(struct.incomeType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAIIncome_argsTupleSchemeFactory implements SchemeFactory {
      public getAIIncome_argsTupleScheme getScheme() {
        return new getAIIncome_argsTupleScheme();
      }
    }

    private static class getAIIncome_argsTupleScheme extends TupleScheme<getAIIncome_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAIIncome_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_id()) {
          optionals.set(0);
        }
        if (struct.is_set_incomeType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_id()) {
          oprot.writeString(struct.id);
        }
        if (struct.is_set_incomeType()) {
          oprot.writeI32(struct.incomeType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAIIncome_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.set_id_isSet(true);
        }
        if (incoming.get(1)) {
          struct.incomeType = com.rjzd.aistock.api.AIIncomeType.findByValue(iprot.readI32());
          struct.set_incomeType_isSet(true);
        }
      }
    }

  }

  public static class getAIIncome_result implements org.apache.thrift.TBase<getAIIncome_result, getAIIncome_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAIIncome_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAIIncome_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAIIncome_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAIIncome_resultTupleSchemeFactory());
    }

    private AIIncome success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAIIncome_result(android.os.Parcel in) {
      this.success= in.readParcelable(getAIIncome_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getAIIncome_result> CREATOR = new android.os.Parcelable.Creator<getAIIncome_result>() {
      @Override
      public getAIIncome_result[] newArray(int size) {
        return new getAIIncome_result[size];
      }

      @Override
      public getAIIncome_result createFromParcel(android.os.Parcel in) {
        return new getAIIncome_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIIncome.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAIIncome_result.class, metaDataMap);
    }

    public getAIIncome_result() {
    }

    public getAIIncome_result(
      AIIncome success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAIIncome_result(getAIIncome_result other) {
      if (other.is_set_success()) {
        this.success = new AIIncome(other.success);
      }
    }

    public getAIIncome_result deepCopy() {
      return new getAIIncome_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIIncome get_success() {
      return this.success;
    }

    public void set_success(AIIncome success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIIncome)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAIIncome_result)
        return this.equals((getAIIncome_result)that);
      return false;
    }

    public boolean equals(getAIIncome_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAIIncome_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAIIncome_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAIIncome_resultStandardSchemeFactory implements SchemeFactory {
      public getAIIncome_resultStandardScheme getScheme() {
        return new getAIIncome_resultStandardScheme();
      }
    }

    private static class getAIIncome_resultStandardScheme extends StandardScheme<getAIIncome_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAIIncome_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIIncome();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAIIncome_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAIIncome_resultTupleSchemeFactory implements SchemeFactory {
      public getAIIncome_resultTupleScheme getScheme() {
        return new getAIIncome_resultTupleScheme();
      }
    }

    private static class getAIIncome_resultTupleScheme extends TupleScheme<getAIIncome_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAIIncome_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAIIncome_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIIncome();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getOperations_args implements org.apache.thrift.TBase<getOperations_args, getOperations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOperations_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOperations_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField("isAll", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("topN", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField IS_ASCEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isAscend", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOperations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOperations_argsTupleSchemeFactory());
    }

    private String id; // required
    private boolean isAll; // required
    private int topN; // required
    private boolean isAscend; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(id);
      out.writeInt(isAll ? 1 : 0);
      out.writeInt(topN);
      out.writeInt(isAscend ? 1 : 0);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOperations_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.id= in.readString();
      this.isAll = (in.readInt()==1);
      this.topN = in.readInt();
      this.isAscend = (in.readInt()==1);
    }

    public static final android.os.Parcelable.Creator<getOperations_args> CREATOR = new android.os.Parcelable.Creator<getOperations_args>() {
      @Override
      public getOperations_args[] newArray(int size) {
        return new getOperations_args[size];
      }

      @Override
      public getOperations_args createFromParcel(android.os.Parcel in) {
        return new getOperations_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      IS_ALL((short)2, "isAll"),
      TOP_N((short)3, "topN"),
      IS_ASCEND((short)4, "isAscend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // IS_ALL
            return IS_ALL;
          case 3: // TOP_N
            return TOP_N;
          case 4: // IS_ASCEND
            return IS_ASCEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISALL_ISSET_ID = 0;
    private static final int __TOPN_ISSET_ID = 1;
    private static final int __ISASCEND_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_ALL, new org.apache.thrift.meta_data.FieldMetaData("isAll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TOP_N, new org.apache.thrift.meta_data.FieldMetaData("topN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_ASCEND, new org.apache.thrift.meta_data.FieldMetaData("isAscend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOperations_args.class, metaDataMap);
    }

    public getOperations_args() {
    }

    public getOperations_args(
      String id,
      boolean isAll,
      int topN,
      boolean isAscend)
    {
      this();
      this.id = id;
      this.isAll = isAll;
      set_isAll_isSet(true);
      this.topN = topN;
      set_topN_isSet(true);
      this.isAscend = isAscend;
      set_isAscend_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOperations_args(getOperations_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_id()) {
        this.id = other.id;
      }
      this.isAll = other.isAll;
      this.topN = other.topN;
      this.isAscend = other.isAscend;
    }

    public getOperations_args deepCopy() {
      return new getOperations_args(this);
    }

    public void clear() {
      this.id = null;
      set_isAll_isSet(false);
      this.isAll = false;
      set_topN_isSet(false);
      this.topN = 0;
      set_isAscend_isSet(false);
      this.isAscend = false;
    }

    public String get_id() {
      return this.id;
    }

    public void set_id(String id) {
      this.id = id;
    }

    public void unset_id() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean is_set_id() {
      return this.id != null;
    }

    public void set_id_isSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean is_isAll() {
      return this.isAll;
    }

    public void set_isAll(boolean isAll) {
      this.isAll = isAll;
      set_isAll_isSet(true);
    }

    public void unset_isAll() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALL_ISSET_ID);
    }

    /** Returns true if field isAll is set (has been assigned a value) and false otherwise */
    public boolean is_set_isAll() {
      return EncodingUtils.testBit(__isset_bitfield, __ISALL_ISSET_ID);
    }

    public void set_isAll_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALL_ISSET_ID, value);
    }

    public int get_topN() {
      return this.topN;
    }

    public void set_topN(int topN) {
      this.topN = topN;
      set_topN_isSet(true);
    }

    public void unset_topN() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    /** Returns true if field topN is set (has been assigned a value) and false otherwise */
    public boolean is_set_topN() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    public void set_topN_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPN_ISSET_ID, value);
    }

    public boolean is_isAscend() {
      return this.isAscend;
    }

    public void set_isAscend(boolean isAscend) {
      this.isAscend = isAscend;
      set_isAscend_isSet(true);
    }

    public void unset_isAscend() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISASCEND_ISSET_ID);
    }

    /** Returns true if field isAscend is set (has been assigned a value) and false otherwise */
    public boolean is_set_isAscend() {
      return EncodingUtils.testBit(__isset_bitfield, __ISASCEND_ISSET_ID);
    }

    public void set_isAscend_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISASCEND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      case IS_ALL:
        if (value == null) {
          unset_isAll();
        } else {
          set_isAll((Boolean)value);
        }
        break;

      case TOP_N:
        if (value == null) {
          unset_topN();
        } else {
          set_topN((Integer)value);
        }
        break;

      case IS_ASCEND:
        if (value == null) {
          unset_isAscend();
        } else {
          set_isAscend((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return get_id();

      case IS_ALL:
        return is_isAll();

      case TOP_N:
        return get_topN();

      case IS_ASCEND:
        return is_isAscend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return is_set_id();
      case IS_ALL:
        return is_set_isAll();
      case TOP_N:
        return is_set_topN();
      case IS_ASCEND:
        return is_set_isAscend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOperations_args)
        return this.equals((getOperations_args)that);
      return false;
    }

    public boolean equals(getOperations_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.is_set_id();
      boolean that_present_id = true && that.is_set_id();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_isAll = true;
      boolean that_present_isAll = true;
      if (this_present_isAll || that_present_isAll) {
        if (!(this_present_isAll && that_present_isAll))
          return false;
        if (this.isAll != that.isAll)
          return false;
      }

      boolean this_present_topN = true;
      boolean that_present_topN = true;
      if (this_present_topN || that_present_topN) {
        if (!(this_present_topN && that_present_topN))
          return false;
        if (this.topN != that.topN)
          return false;
      }

      boolean this_present_isAscend = true;
      boolean that_present_isAscend = true;
      if (this_present_isAscend || that_present_isAscend) {
        if (!(this_present_isAscend && that_present_isAscend))
          return false;
        if (this.isAscend != that.isAscend)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (is_set_id());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_isAll = true;
      list.add(present_isAll);
      if (present_isAll)
        list.add(isAll);

      boolean present_topN = true;
      list.add(present_topN);
      if (present_topN)
        list.add(topN);

      boolean present_isAscend = true;
      list.add(present_isAscend);
      if (present_isAscend)
        list.add(isAscend);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOperations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_isAll()).compareTo(other.is_set_isAll());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_isAll()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAll, other.isAll);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_topN()).compareTo(other.is_set_topN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_topN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topN, other.topN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_isAscend()).compareTo(other.is_set_isAscend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_isAscend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAscend, other.isAscend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOperations_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAll:");
      sb.append(this.isAll);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topN:");
      sb.append(this.topN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAscend:");
      sb.append(this.isAscend);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOperations_argsStandardSchemeFactory implements SchemeFactory {
      public getOperations_argsStandardScheme getScheme() {
        return new getOperations_argsStandardScheme();
      }
    }

    private static class getOperations_argsStandardScheme extends StandardScheme<getOperations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOperations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.set_id_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_ALL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAll = iprot.readBool();
                struct.set_isAll_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOP_N
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.topN = iprot.readI32();
                struct.set_topN_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_ASCEND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAscend = iprot.readBool();
                struct.set_isAscend_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOperations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_ALL_FIELD_DESC);
        oprot.writeBool(struct.isAll);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_N_FIELD_DESC);
        oprot.writeI32(struct.topN);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_ASCEND_FIELD_DESC);
        oprot.writeBool(struct.isAscend);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOperations_argsTupleSchemeFactory implements SchemeFactory {
      public getOperations_argsTupleScheme getScheme() {
        return new getOperations_argsTupleScheme();
      }
    }

    private static class getOperations_argsTupleScheme extends TupleScheme<getOperations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOperations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_id()) {
          optionals.set(0);
        }
        if (struct.is_set_isAll()) {
          optionals.set(1);
        }
        if (struct.is_set_topN()) {
          optionals.set(2);
        }
        if (struct.is_set_isAscend()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.is_set_id()) {
          oprot.writeString(struct.id);
        }
        if (struct.is_set_isAll()) {
          oprot.writeBool(struct.isAll);
        }
        if (struct.is_set_topN()) {
          oprot.writeI32(struct.topN);
        }
        if (struct.is_set_isAscend()) {
          oprot.writeBool(struct.isAscend);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOperations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.set_id_isSet(true);
        }
        if (incoming.get(1)) {
          struct.isAll = iprot.readBool();
          struct.set_isAll_isSet(true);
        }
        if (incoming.get(2)) {
          struct.topN = iprot.readI32();
          struct.set_topN_isSet(true);
        }
        if (incoming.get(3)) {
          struct.isAscend = iprot.readBool();
          struct.set_isAscend_isSet(true);
        }
      }
    }

  }

  public static class getOperations_result implements org.apache.thrift.TBase<getOperations_result, getOperations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOperations_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOperations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOperations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOperations_resultTupleSchemeFactory());
    }

    private AIOperationList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOperations_result(android.os.Parcel in) {
      this.success= in.readParcelable(getOperations_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getOperations_result> CREATOR = new android.os.Parcelable.Creator<getOperations_result>() {
      @Override
      public getOperations_result[] newArray(int size) {
        return new getOperations_result[size];
      }

      @Override
      public getOperations_result createFromParcel(android.os.Parcel in) {
        return new getOperations_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIOperationList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOperations_result.class, metaDataMap);
    }

    public getOperations_result() {
    }

    public getOperations_result(
      AIOperationList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOperations_result(getOperations_result other) {
      if (other.is_set_success()) {
        this.success = new AIOperationList(other.success);
      }
    }

    public getOperations_result deepCopy() {
      return new getOperations_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIOperationList get_success() {
      return this.success;
    }

    public void set_success(AIOperationList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIOperationList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOperations_result)
        return this.equals((getOperations_result)that);
      return false;
    }

    public boolean equals(getOperations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOperations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOperations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOperations_resultStandardSchemeFactory implements SchemeFactory {
      public getOperations_resultStandardScheme getScheme() {
        return new getOperations_resultStandardScheme();
      }
    }

    private static class getOperations_resultStandardScheme extends StandardScheme<getOperations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOperations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIOperationList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOperations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOperations_resultTupleSchemeFactory implements SchemeFactory {
      public getOperations_resultTupleScheme getScheme() {
        return new getOperations_resultTupleScheme();
      }
    }

    private static class getOperations_resultTupleScheme extends TupleScheme<getOperations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOperations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOperations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIOperationList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getOperationsByPage_args implements org.apache.thrift.TBase<getOperationsByPage_args, getOperationsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOperationsByPage_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOperationsByPage_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOperationsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOperationsByPage_argsTupleSchemeFactory());
    }

    private String id; // required
    private int pageNo; // required
    private int numPerPage; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(id);
      out.writeInt(pageNo);
      out.writeInt(numPerPage);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOperationsByPage_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.id= in.readString();
      this.pageNo = in.readInt();
      this.numPerPage = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getOperationsByPage_args> CREATOR = new android.os.Parcelable.Creator<getOperationsByPage_args>() {
      @Override
      public getOperationsByPage_args[] newArray(int size) {
        return new getOperationsByPage_args[size];
      }

      @Override
      public getOperationsByPage_args createFromParcel(android.os.Parcel in) {
        return new getOperationsByPage_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PAGE_NO((short)2, "pageNo"),
      NUM_PER_PAGE((short)3, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOperationsByPage_args.class, metaDataMap);
    }

    public getOperationsByPage_args() {
    }

    public getOperationsByPage_args(
      String id,
      int pageNo,
      int numPerPage)
    {
      this();
      this.id = id;
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOperationsByPage_args(getOperationsByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_id()) {
        this.id = other.id;
      }
      this.pageNo = other.pageNo;
      this.numPerPage = other.numPerPage;
    }

    public getOperationsByPage_args deepCopy() {
      return new getOperationsByPage_args(this);
    }

    public void clear() {
      this.id = null;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_numPerPage_isSet(false);
      this.numPerPage = 0;
    }

    public String get_id() {
      return this.id;
    }

    public void set_id(String id) {
      this.id = id;
    }

    public void unset_id() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean is_set_id() {
      return this.id != null;
    }

    public void set_id_isSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_numPerPage() {
      return this.numPerPage;
    }

    public void set_numPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    public void unset_numPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean is_set_numPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void set_numPerPage_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unset_numPerPage();
        } else {
          set_numPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return get_id();

      case PAGE_NO:
        return get_pageNo();

      case NUM_PER_PAGE:
        return get_numPerPage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return is_set_id();
      case PAGE_NO:
        return is_set_pageNo();
      case NUM_PER_PAGE:
        return is_set_numPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOperationsByPage_args)
        return this.equals((getOperationsByPage_args)that);
      return false;
    }

    public boolean equals(getOperationsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.is_set_id();
      boolean that_present_id = true && that.is_set_id();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (is_set_id());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_numPerPage = true;
      list.add(present_numPerPage);
      if (present_numPerPage)
        list.add(numPerPage);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOperationsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_numPerPage()).compareTo(other.is_set_numPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_numPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOperationsByPage_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOperationsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOperationsByPage_argsStandardScheme getScheme() {
        return new getOperationsByPage_argsStandardScheme();
      }
    }

    private static class getOperationsByPage_argsStandardScheme extends StandardScheme<getOperationsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOperationsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.set_id_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.set_numPerPage_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOperationsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOperationsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOperationsByPage_argsTupleScheme getScheme() {
        return new getOperationsByPage_argsTupleScheme();
      }
    }

    private static class getOperationsByPage_argsTupleScheme extends TupleScheme<getOperationsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOperationsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_id()) {
          optionals.set(0);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(1);
        }
        if (struct.is_set_numPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_id()) {
          oprot.writeString(struct.id);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_numPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOperationsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.set_id_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.set_numPerPage_isSet(true);
        }
      }
    }

  }

  public static class getOperationsByPage_result implements org.apache.thrift.TBase<getOperationsByPage_result, getOperationsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOperationsByPage_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOperationsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOperationsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOperationsByPage_resultTupleSchemeFactory());
    }

    private AIOperationList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOperationsByPage_result(android.os.Parcel in) {
      this.success= in.readParcelable(getOperationsByPage_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getOperationsByPage_result> CREATOR = new android.os.Parcelable.Creator<getOperationsByPage_result>() {
      @Override
      public getOperationsByPage_result[] newArray(int size) {
        return new getOperationsByPage_result[size];
      }

      @Override
      public getOperationsByPage_result createFromParcel(android.os.Parcel in) {
        return new getOperationsByPage_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIOperationList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOperationsByPage_result.class, metaDataMap);
    }

    public getOperationsByPage_result() {
    }

    public getOperationsByPage_result(
      AIOperationList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOperationsByPage_result(getOperationsByPage_result other) {
      if (other.is_set_success()) {
        this.success = new AIOperationList(other.success);
      }
    }

    public getOperationsByPage_result deepCopy() {
      return new getOperationsByPage_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public AIOperationList get_success() {
      return this.success;
    }

    public void set_success(AIOperationList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((AIOperationList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOperationsByPage_result)
        return this.equals((getOperationsByPage_result)that);
      return false;
    }

    public boolean equals(getOperationsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOperationsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOperationsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOperationsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOperationsByPage_resultStandardScheme getScheme() {
        return new getOperationsByPage_resultStandardScheme();
      }
    }

    private static class getOperationsByPage_resultStandardScheme extends StandardScheme<getOperationsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOperationsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new AIOperationList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOperationsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOperationsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOperationsByPage_resultTupleScheme getScheme() {
        return new getOperationsByPage_resultTupleScheme();
      }
    }

    private static class getOperationsByPage_resultTupleScheme extends TupleScheme<getOperationsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOperationsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOperationsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new AIOperationList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getAITransfers_args implements org.apache.thrift.TBase<getAITransfers_args, getAITransfers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAITransfers_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAITransfers_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAITransfers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAITransfers_argsTupleSchemeFactory());
    }

    private String id; // required
    private int pageNo; // required
    private int numPerPage; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(id);
      out.writeInt(pageNo);
      out.writeInt(numPerPage);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAITransfers_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.id= in.readString();
      this.pageNo = in.readInt();
      this.numPerPage = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getAITransfers_args> CREATOR = new android.os.Parcelable.Creator<getAITransfers_args>() {
      @Override
      public getAITransfers_args[] newArray(int size) {
        return new getAITransfers_args[size];
      }

      @Override
      public getAITransfers_args createFromParcel(android.os.Parcel in) {
        return new getAITransfers_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PAGE_NO((short)2, "pageNo"),
      NUM_PER_PAGE((short)3, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAITransfers_args.class, metaDataMap);
    }

    public getAITransfers_args() {
    }

    public getAITransfers_args(
      String id,
      int pageNo,
      int numPerPage)
    {
      this();
      this.id = id;
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAITransfers_args(getAITransfers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_id()) {
        this.id = other.id;
      }
      this.pageNo = other.pageNo;
      this.numPerPage = other.numPerPage;
    }

    public getAITransfers_args deepCopy() {
      return new getAITransfers_args(this);
    }

    public void clear() {
      this.id = null;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_numPerPage_isSet(false);
      this.numPerPage = 0;
    }

    public String get_id() {
      return this.id;
    }

    public void set_id(String id) {
      this.id = id;
    }

    public void unset_id() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean is_set_id() {
      return this.id != null;
    }

    public void set_id_isSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_numPerPage() {
      return this.numPerPage;
    }

    public void set_numPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    public void unset_numPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean is_set_numPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void set_numPerPage_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unset_numPerPage();
        } else {
          set_numPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return get_id();

      case PAGE_NO:
        return get_pageNo();

      case NUM_PER_PAGE:
        return get_numPerPage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return is_set_id();
      case PAGE_NO:
        return is_set_pageNo();
      case NUM_PER_PAGE:
        return is_set_numPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAITransfers_args)
        return this.equals((getAITransfers_args)that);
      return false;
    }

    public boolean equals(getAITransfers_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.is_set_id();
      boolean that_present_id = true && that.is_set_id();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (is_set_id());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_numPerPage = true;
      list.add(present_numPerPage);
      if (present_numPerPage)
        list.add(numPerPage);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAITransfers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_numPerPage()).compareTo(other.is_set_numPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_numPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAITransfers_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAITransfers_argsStandardSchemeFactory implements SchemeFactory {
      public getAITransfers_argsStandardScheme getScheme() {
        return new getAITransfers_argsStandardScheme();
      }
    }

    private static class getAITransfers_argsStandardScheme extends StandardScheme<getAITransfers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAITransfers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.set_id_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.set_numPerPage_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAITransfers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAITransfers_argsTupleSchemeFactory implements SchemeFactory {
      public getAITransfers_argsTupleScheme getScheme() {
        return new getAITransfers_argsTupleScheme();
      }
    }

    private static class getAITransfers_argsTupleScheme extends TupleScheme<getAITransfers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAITransfers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_id()) {
          optionals.set(0);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(1);
        }
        if (struct.is_set_numPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_id()) {
          oprot.writeString(struct.id);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_numPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAITransfers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.set_id_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.set_numPerPage_isSet(true);
        }
      }
    }

  }

  public static class getAITransfers_result implements org.apache.thrift.TBase<getAITransfers_result, getAITransfers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAITransfers_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAITransfers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAITransfers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAITransfers_resultTupleSchemeFactory());
    }

    private DateTransferList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getAITransfers_result(android.os.Parcel in) {
      this.success= in.readParcelable(getAITransfers_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getAITransfers_result> CREATOR = new android.os.Parcelable.Creator<getAITransfers_result>() {
      @Override
      public getAITransfers_result[] newArray(int size) {
        return new getAITransfers_result[size];
      }

      @Override
      public getAITransfers_result createFromParcel(android.os.Parcel in) {
        return new getAITransfers_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateTransferList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAITransfers_result.class, metaDataMap);
    }

    public getAITransfers_result() {
    }

    public getAITransfers_result(
      DateTransferList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAITransfers_result(getAITransfers_result other) {
      if (other.is_set_success()) {
        this.success = new DateTransferList(other.success);
      }
    }

    public getAITransfers_result deepCopy() {
      return new getAITransfers_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public DateTransferList get_success() {
      return this.success;
    }

    public void set_success(DateTransferList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((DateTransferList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAITransfers_result)
        return this.equals((getAITransfers_result)that);
      return false;
    }

    public boolean equals(getAITransfers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAITransfers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAITransfers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getAITransfers_resultStandardSchemeFactory implements SchemeFactory {
      public getAITransfers_resultStandardScheme getScheme() {
        return new getAITransfers_resultStandardScheme();
      }
    }

    private static class getAITransfers_resultStandardScheme extends StandardScheme<getAITransfers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAITransfers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new DateTransferList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAITransfers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAITransfers_resultTupleSchemeFactory implements SchemeFactory {
      public getAITransfers_resultTupleScheme getScheme() {
        return new getAITransfers_resultTupleScheme();
      }
    }

    private static class getAITransfers_resultTupleScheme extends TupleScheme<getAITransfers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAITransfers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAITransfers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new DateTransferList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

}
