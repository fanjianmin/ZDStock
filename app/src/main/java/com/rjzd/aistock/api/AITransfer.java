/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AITransfer implements org.apache.thrift.TBase<AITransfer, AITransfer._Fields>, java.io.Serializable, Cloneable, Comparable<AITransfer>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AITransfer");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stockName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SELL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("profit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PROFIT_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("profitPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACTION_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("actionReason", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField STRATEGY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyName", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AITransferStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AITransferTupleSchemeFactory());
  }

  private TransferType type; // required
  private String stockCode; // required
  private String stockName; // required
  private double buyPrice; // required
  private double sellPrice; // required
  private double profit; // required
  private double profitPercentage; // required
  private int quantity; // required
  private double positionPercentage; // required
  private String actionTime; // required
  private String actionReason; // required
  private long transferId; // optional
  private String strategyName; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(type.getValue());
    out.writeString(stockCode);
    out.writeString(stockName);
    out.writeDouble(buyPrice);
    out.writeDouble(sellPrice);
    out.writeDouble(profit);
    out.writeDouble(profitPercentage);
    out.writeInt(quantity);
    out.writeDouble(positionPercentage);
    out.writeString(actionTime);
    out.writeString(actionReason);
    out.writeLong(transferId);
    out.writeString(strategyName);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AITransfer(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.type = TransferType.findByValue(in.readInt());
    this.stockCode= in.readString();
    this.stockName= in.readString();
    this.buyPrice = in.readDouble();
    this.sellPrice = in.readDouble();
    this.profit = in.readDouble();
    this.profitPercentage = in.readDouble();
    this.quantity = in.readInt();
    this.positionPercentage = in.readDouble();
    this.actionTime= in.readString();
    this.actionReason= in.readString();
    this.transferId = in.readLong();
    this.strategyName= in.readString();
  }

  public static final android.os.Parcelable.Creator<AITransfer> CREATOR = new android.os.Parcelable.Creator<AITransfer>() {
    @Override
    public AITransfer[] newArray(int size) {
      return new AITransfer[size];
    }

    @Override
    public AITransfer createFromParcel(android.os.Parcel in) {
      return new AITransfer(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TransferType
     */
    TYPE((short)1, "type"),
    STOCK_CODE((short)2, "stockCode"),
    STOCK_NAME((short)3, "stockName"),
    BUY_PRICE((short)4, "buyPrice"),
    SELL_PRICE((short)5, "sellPrice"),
    PROFIT((short)6, "profit"),
    PROFIT_PERCENTAGE((short)7, "profitPercentage"),
    QUANTITY((short)8, "quantity"),
    POSITION_PERCENTAGE((short)9, "positionPercentage"),
    ACTION_TIME((short)10, "actionTime"),
    ACTION_REASON((short)11, "actionReason"),
    TRANSFER_ID((short)12, "transferId"),
    STRATEGY_NAME((short)13, "strategyName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // STOCK_CODE
          return STOCK_CODE;
        case 3: // STOCK_NAME
          return STOCK_NAME;
        case 4: // BUY_PRICE
          return BUY_PRICE;
        case 5: // SELL_PRICE
          return SELL_PRICE;
        case 6: // PROFIT
          return PROFIT;
        case 7: // PROFIT_PERCENTAGE
          return PROFIT_PERCENTAGE;
        case 8: // QUANTITY
          return QUANTITY;
        case 9: // POSITION_PERCENTAGE
          return POSITION_PERCENTAGE;
        case 10: // ACTION_TIME
          return ACTION_TIME;
        case 11: // ACTION_REASON
          return ACTION_REASON;
        case 12: // TRANSFER_ID
          return TRANSFER_ID;
        case 13: // STRATEGY_NAME
          return STRATEGY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUYPRICE_ISSET_ID = 0;
  private static final int __SELLPRICE_ISSET_ID = 1;
  private static final int __PROFIT_ISSET_ID = 2;
  private static final int __PROFITPERCENTAGE_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __POSITIONPERCENTAGE_ISSET_ID = 5;
  private static final int __TRANSFERID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRANSFER_ID,_Fields.STRATEGY_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransferType.class)));
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stockName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("buyPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("sellPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROFIT, new org.apache.thrift.meta_data.FieldMetaData("profit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROFIT_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("profitPercentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("positionPercentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_REASON, new org.apache.thrift.meta_data.FieldMetaData("actionReason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRATEGY_NAME, new org.apache.thrift.meta_data.FieldMetaData("strategyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AITransfer.class, metaDataMap);
  }

  public AITransfer() {
  }

  public AITransfer(
    TransferType type,
    String stockCode,
    String stockName,
    double buyPrice,
    double sellPrice,
    double profit,
    double profitPercentage,
    int quantity,
    double positionPercentage,
    String actionTime,
    String actionReason)
  {
    this();
    this.type = type;
    this.stockCode = stockCode;
    this.stockName = stockName;
    this.buyPrice = buyPrice;
    set_buyPrice_isSet(true);
    this.sellPrice = sellPrice;
    set_sellPrice_isSet(true);
    this.profit = profit;
    set_profit_isSet(true);
    this.profitPercentage = profitPercentage;
    set_profitPercentage_isSet(true);
    this.quantity = quantity;
    set_quantity_isSet(true);
    this.positionPercentage = positionPercentage;
    set_positionPercentage_isSet(true);
    this.actionTime = actionTime;
    this.actionReason = actionReason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AITransfer(AITransfer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_type()) {
      this.type = other.type;
    }
    if (other.is_set_stockCode()) {
      this.stockCode = other.stockCode;
    }
    if (other.is_set_stockName()) {
      this.stockName = other.stockName;
    }
    this.buyPrice = other.buyPrice;
    this.sellPrice = other.sellPrice;
    this.profit = other.profit;
    this.profitPercentage = other.profitPercentage;
    this.quantity = other.quantity;
    this.positionPercentage = other.positionPercentage;
    if (other.is_set_actionTime()) {
      this.actionTime = other.actionTime;
    }
    if (other.is_set_actionReason()) {
      this.actionReason = other.actionReason;
    }
    this.transferId = other.transferId;
    if (other.is_set_strategyName()) {
      this.strategyName = other.strategyName;
    }
  }

  public AITransfer deepCopy() {
    return new AITransfer(this);
  }

  public void clear() {
    this.type = null;
    this.stockCode = null;
    this.stockName = null;
    set_buyPrice_isSet(false);
    this.buyPrice = 0.0;
    set_sellPrice_isSet(false);
    this.sellPrice = 0.0;
    set_profit_isSet(false);
    this.profit = 0.0;
    set_profitPercentage_isSet(false);
    this.profitPercentage = 0.0;
    set_quantity_isSet(false);
    this.quantity = 0;
    set_positionPercentage_isSet(false);
    this.positionPercentage = 0.0;
    this.actionTime = null;
    this.actionReason = null;
    set_transferId_isSet(false);
    this.transferId = 0;
    this.strategyName = null;
  }

  /**
   * 
   * @see TransferType
   */
  public TransferType get_type() {
    return this.type;
  }

  /**
   * 
   * @see TransferType
   */
  public void set_type(TransferType type) {
    this.type = type;
  }

  public void unset_type() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean is_set_type() {
    return this.type != null;
  }

  public void set_type_isSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String get_stockCode() {
    return this.stockCode;
  }

  public void set_stockCode(String stockCode) {
    this.stockCode = stockCode;
  }

  public void unset_stockCode() {
    this.stockCode = null;
  }

  /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockCode() {
    return this.stockCode != null;
  }

  public void set_stockCode_isSet(boolean value) {
    if (!value) {
      this.stockCode = null;
    }
  }

  public String get_stockName() {
    return this.stockName;
  }

  public void set_stockName(String stockName) {
    this.stockName = stockName;
  }

  public void unset_stockName() {
    this.stockName = null;
  }

  /** Returns true if field stockName is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockName() {
    return this.stockName != null;
  }

  public void set_stockName_isSet(boolean value) {
    if (!value) {
      this.stockName = null;
    }
  }

  public double get_buyPrice() {
    return this.buyPrice;
  }

  public void set_buyPrice(double buyPrice) {
    this.buyPrice = buyPrice;
    set_buyPrice_isSet(true);
  }

  public void unset_buyPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYPRICE_ISSET_ID);
  }

  /** Returns true if field buyPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_buyPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYPRICE_ISSET_ID);
  }

  public void set_buyPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYPRICE_ISSET_ID, value);
  }

  public double get_sellPrice() {
    return this.sellPrice;
  }

  public void set_sellPrice(double sellPrice) {
    this.sellPrice = sellPrice;
    set_sellPrice_isSet(true);
  }

  public void unset_sellPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLPRICE_ISSET_ID);
  }

  /** Returns true if field sellPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_sellPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLPRICE_ISSET_ID);
  }

  public void set_sellPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLPRICE_ISSET_ID, value);
  }

  public double get_profit() {
    return this.profit;
  }

  public void set_profit(double profit) {
    this.profit = profit;
    set_profit_isSet(true);
  }

  public void unset_profit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFIT_ISSET_ID);
  }

  /** Returns true if field profit is set (has been assigned a value) and false otherwise */
  public boolean is_set_profit() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFIT_ISSET_ID);
  }

  public void set_profit_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFIT_ISSET_ID, value);
  }

  public double get_profitPercentage() {
    return this.profitPercentage;
  }

  public void set_profitPercentage(double profitPercentage) {
    this.profitPercentage = profitPercentage;
    set_profitPercentage_isSet(true);
  }

  public void unset_profitPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field profitPercentage is set (has been assigned a value) and false otherwise */
  public boolean is_set_profitPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID);
  }

  public void set_profitPercentage_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFITPERCENTAGE_ISSET_ID, value);
  }

  public int get_quantity() {
    return this.quantity;
  }

  public void set_quantity(int quantity) {
    this.quantity = quantity;
    set_quantity_isSet(true);
  }

  public void unset_quantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean is_set_quantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void set_quantity_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public double get_positionPercentage() {
    return this.positionPercentage;
  }

  public void set_positionPercentage(double positionPercentage) {
    this.positionPercentage = positionPercentage;
    set_positionPercentage_isSet(true);
  }

  public void unset_positionPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field positionPercentage is set (has been assigned a value) and false otherwise */
  public boolean is_set_positionPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID);
  }

  public void set_positionPercentage_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPERCENTAGE_ISSET_ID, value);
  }

  public String get_actionTime() {
    return this.actionTime;
  }

  public void set_actionTime(String actionTime) {
    this.actionTime = actionTime;
  }

  public void unset_actionTime() {
    this.actionTime = null;
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_actionTime() {
    return this.actionTime != null;
  }

  public void set_actionTime_isSet(boolean value) {
    if (!value) {
      this.actionTime = null;
    }
  }

  public String get_actionReason() {
    return this.actionReason;
  }

  public void set_actionReason(String actionReason) {
    this.actionReason = actionReason;
  }

  public void unset_actionReason() {
    this.actionReason = null;
  }

  /** Returns true if field actionReason is set (has been assigned a value) and false otherwise */
  public boolean is_set_actionReason() {
    return this.actionReason != null;
  }

  public void set_actionReason_isSet(boolean value) {
    if (!value) {
      this.actionReason = null;
    }
  }

  public long get_transferId() {
    return this.transferId;
  }

  public void set_transferId(long transferId) {
    this.transferId = transferId;
    set_transferId_isSet(true);
  }

  public void unset_transferId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFERID_ISSET_ID);
  }

  /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
  public boolean is_set_transferId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSFERID_ISSET_ID);
  }

  public void set_transferId_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFERID_ISSET_ID, value);
  }

  public String get_strategyName() {
    return this.strategyName;
  }

  public void set_strategyName(String strategyName) {
    this.strategyName = strategyName;
  }

  public void unset_strategyName() {
    this.strategyName = null;
  }

  /** Returns true if field strategyName is set (has been assigned a value) and false otherwise */
  public boolean is_set_strategyName() {
    return this.strategyName != null;
  }

  public void set_strategyName_isSet(boolean value) {
    if (!value) {
      this.strategyName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unset_type();
      } else {
        set_type((TransferType)value);
      }
      break;

    case STOCK_CODE:
      if (value == null) {
        unset_stockCode();
      } else {
        set_stockCode((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unset_stockName();
      } else {
        set_stockName((String)value);
      }
      break;

    case BUY_PRICE:
      if (value == null) {
        unset_buyPrice();
      } else {
        set_buyPrice((Double)value);
      }
      break;

    case SELL_PRICE:
      if (value == null) {
        unset_sellPrice();
      } else {
        set_sellPrice((Double)value);
      }
      break;

    case PROFIT:
      if (value == null) {
        unset_profit();
      } else {
        set_profit((Double)value);
      }
      break;

    case PROFIT_PERCENTAGE:
      if (value == null) {
        unset_profitPercentage();
      } else {
        set_profitPercentage((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unset_quantity();
      } else {
        set_quantity((Integer)value);
      }
      break;

    case POSITION_PERCENTAGE:
      if (value == null) {
        unset_positionPercentage();
      } else {
        set_positionPercentage((Double)value);
      }
      break;

    case ACTION_TIME:
      if (value == null) {
        unset_actionTime();
      } else {
        set_actionTime((String)value);
      }
      break;

    case ACTION_REASON:
      if (value == null) {
        unset_actionReason();
      } else {
        set_actionReason((String)value);
      }
      break;

    case TRANSFER_ID:
      if (value == null) {
        unset_transferId();
      } else {
        set_transferId((Long)value);
      }
      break;

    case STRATEGY_NAME:
      if (value == null) {
        unset_strategyName();
      } else {
        set_strategyName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return get_type();

    case STOCK_CODE:
      return get_stockCode();

    case STOCK_NAME:
      return get_stockName();

    case BUY_PRICE:
      return get_buyPrice();

    case SELL_PRICE:
      return get_sellPrice();

    case PROFIT:
      return get_profit();

    case PROFIT_PERCENTAGE:
      return get_profitPercentage();

    case QUANTITY:
      return get_quantity();

    case POSITION_PERCENTAGE:
      return get_positionPercentage();

    case ACTION_TIME:
      return get_actionTime();

    case ACTION_REASON:
      return get_actionReason();

    case TRANSFER_ID:
      return get_transferId();

    case STRATEGY_NAME:
      return get_strategyName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return is_set_type();
    case STOCK_CODE:
      return is_set_stockCode();
    case STOCK_NAME:
      return is_set_stockName();
    case BUY_PRICE:
      return is_set_buyPrice();
    case SELL_PRICE:
      return is_set_sellPrice();
    case PROFIT:
      return is_set_profit();
    case PROFIT_PERCENTAGE:
      return is_set_profitPercentage();
    case QUANTITY:
      return is_set_quantity();
    case POSITION_PERCENTAGE:
      return is_set_positionPercentage();
    case ACTION_TIME:
      return is_set_actionTime();
    case ACTION_REASON:
      return is_set_actionReason();
    case TRANSFER_ID:
      return is_set_transferId();
    case STRATEGY_NAME:
      return is_set_strategyName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AITransfer)
      return this.equals((AITransfer)that);
    return false;
  }

  public boolean equals(AITransfer that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.is_set_type();
    boolean that_present_type = true && that.is_set_type();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_stockCode = true && this.is_set_stockCode();
    boolean that_present_stockCode = true && that.is_set_stockCode();
    if (this_present_stockCode || that_present_stockCode) {
      if (!(this_present_stockCode && that_present_stockCode))
        return false;
      if (!this.stockCode.equals(that.stockCode))
        return false;
    }

    boolean this_present_stockName = true && this.is_set_stockName();
    boolean that_present_stockName = true && that.is_set_stockName();
    if (this_present_stockName || that_present_stockName) {
      if (!(this_present_stockName && that_present_stockName))
        return false;
      if (!this.stockName.equals(that.stockName))
        return false;
    }

    boolean this_present_buyPrice = true;
    boolean that_present_buyPrice = true;
    if (this_present_buyPrice || that_present_buyPrice) {
      if (!(this_present_buyPrice && that_present_buyPrice))
        return false;
      if (this.buyPrice != that.buyPrice)
        return false;
    }

    boolean this_present_sellPrice = true;
    boolean that_present_sellPrice = true;
    if (this_present_sellPrice || that_present_sellPrice) {
      if (!(this_present_sellPrice && that_present_sellPrice))
        return false;
      if (this.sellPrice != that.sellPrice)
        return false;
    }

    boolean this_present_profit = true;
    boolean that_present_profit = true;
    if (this_present_profit || that_present_profit) {
      if (!(this_present_profit && that_present_profit))
        return false;
      if (this.profit != that.profit)
        return false;
    }

    boolean this_present_profitPercentage = true;
    boolean that_present_profitPercentage = true;
    if (this_present_profitPercentage || that_present_profitPercentage) {
      if (!(this_present_profitPercentage && that_present_profitPercentage))
        return false;
      if (this.profitPercentage != that.profitPercentage)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_positionPercentage = true;
    boolean that_present_positionPercentage = true;
    if (this_present_positionPercentage || that_present_positionPercentage) {
      if (!(this_present_positionPercentage && that_present_positionPercentage))
        return false;
      if (this.positionPercentage != that.positionPercentage)
        return false;
    }

    boolean this_present_actionTime = true && this.is_set_actionTime();
    boolean that_present_actionTime = true && that.is_set_actionTime();
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (!this.actionTime.equals(that.actionTime))
        return false;
    }

    boolean this_present_actionReason = true && this.is_set_actionReason();
    boolean that_present_actionReason = true && that.is_set_actionReason();
    if (this_present_actionReason || that_present_actionReason) {
      if (!(this_present_actionReason && that_present_actionReason))
        return false;
      if (!this.actionReason.equals(that.actionReason))
        return false;
    }

    boolean this_present_transferId = true && this.is_set_transferId();
    boolean that_present_transferId = true && that.is_set_transferId();
    if (this_present_transferId || that_present_transferId) {
      if (!(this_present_transferId && that_present_transferId))
        return false;
      if (this.transferId != that.transferId)
        return false;
    }

    boolean this_present_strategyName = true && this.is_set_strategyName();
    boolean that_present_strategyName = true && that.is_set_strategyName();
    if (this_present_strategyName || that_present_strategyName) {
      if (!(this_present_strategyName && that_present_strategyName))
        return false;
      if (!this.strategyName.equals(that.strategyName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (is_set_type());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_stockCode = true && (is_set_stockCode());
    list.add(present_stockCode);
    if (present_stockCode)
      list.add(stockCode);

    boolean present_stockName = true && (is_set_stockName());
    list.add(present_stockName);
    if (present_stockName)
      list.add(stockName);

    boolean present_buyPrice = true;
    list.add(present_buyPrice);
    if (present_buyPrice)
      list.add(buyPrice);

    boolean present_sellPrice = true;
    list.add(present_sellPrice);
    if (present_sellPrice)
      list.add(sellPrice);

    boolean present_profit = true;
    list.add(present_profit);
    if (present_profit)
      list.add(profit);

    boolean present_profitPercentage = true;
    list.add(present_profitPercentage);
    if (present_profitPercentage)
      list.add(profitPercentage);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_positionPercentage = true;
    list.add(present_positionPercentage);
    if (present_positionPercentage)
      list.add(positionPercentage);

    boolean present_actionTime = true && (is_set_actionTime());
    list.add(present_actionTime);
    if (present_actionTime)
      list.add(actionTime);

    boolean present_actionReason = true && (is_set_actionReason());
    list.add(present_actionReason);
    if (present_actionReason)
      list.add(actionReason);

    boolean present_transferId = true && (is_set_transferId());
    list.add(present_transferId);
    if (present_transferId)
      list.add(transferId);

    boolean present_strategyName = true && (is_set_strategyName());
    list.add(present_strategyName);
    if (present_strategyName)
      list.add(strategyName);

    return list.hashCode();
  }

  @Override
  public int compareTo(AITransfer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_type()).compareTo(other.is_set_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockCode()).compareTo(other.is_set_stockCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockName()).compareTo(other.is_set_stockName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockName, other.stockName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_buyPrice()).compareTo(other.is_set_buyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_buyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyPrice, other.buyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sellPrice()).compareTo(other.is_set_sellPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sellPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellPrice, other.sellPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profit()).compareTo(other.is_set_profit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profit, other.profit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profitPercentage()).compareTo(other.is_set_profitPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profitPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitPercentage, other.profitPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_quantity()).compareTo(other.is_set_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_positionPercentage()).compareTo(other.is_set_positionPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_positionPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionPercentage, other.positionPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_actionTime()).compareTo(other.is_set_actionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_actionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, other.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_actionReason()).compareTo(other.is_set_actionReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_actionReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionReason, other.actionReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_transferId()).compareTo(other.is_set_transferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_transferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_strategyName()).compareTo(other.is_set_strategyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_strategyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyName, other.strategyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AITransfer(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockCode:");
    if (this.stockCode == null) {
      sb.append("null");
    } else {
      sb.append(this.stockCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockName:");
    if (this.stockName == null) {
      sb.append("null");
    } else {
      sb.append(this.stockName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyPrice:");
    sb.append(this.buyPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellPrice:");
    sb.append(this.sellPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profit:");
    sb.append(this.profit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profitPercentage:");
    sb.append(this.profitPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionPercentage:");
    sb.append(this.positionPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionTime:");
    if (this.actionTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actionTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionReason:");
    if (this.actionReason == null) {
      sb.append("null");
    } else {
      sb.append(this.actionReason);
    }
    first = false;
    if (is_set_transferId()) {
      if (!first) sb.append(", ");
      sb.append("transferId:");
      sb.append(this.transferId);
      first = false;
    }
    if (is_set_strategyName()) {
      if (!first) sb.append(", ");
      sb.append("strategyName:");
      if (this.strategyName == null) {
        sb.append("null");
      } else {
        sb.append(this.strategyName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_type()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

    if (!is_set_stockCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockCode' is unset! Struct:" + toString());
    }

    if (!is_set_stockName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockName' is unset! Struct:" + toString());
    }

    if (!is_set_buyPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'buyPrice' is unset! Struct:" + toString());
    }

    if (!is_set_sellPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sellPrice' is unset! Struct:" + toString());
    }

    if (!is_set_profit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profit' is unset! Struct:" + toString());
    }

    if (!is_set_profitPercentage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profitPercentage' is unset! Struct:" + toString());
    }

    if (!is_set_quantity()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantity' is unset! Struct:" + toString());
    }

    if (!is_set_positionPercentage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionPercentage' is unset! Struct:" + toString());
    }

    if (!is_set_actionTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actionTime' is unset! Struct:" + toString());
    }

    if (!is_set_actionReason()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actionReason' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AITransferStandardSchemeFactory implements SchemeFactory {
    public AITransferStandardScheme getScheme() {
      return new AITransferStandardScheme();
    }
  }

  private static class AITransferStandardScheme extends StandardScheme<AITransfer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AITransfer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.rjzd.aistock.api.TransferType.findByValue(iprot.readI32());
              struct.set_type_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockCode = iprot.readString();
              struct.set_stockCode_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockName = iprot.readString();
              struct.set_stockName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.buyPrice = iprot.readDouble();
              struct.set_buyPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SELL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellPrice = iprot.readDouble();
              struct.set_sellPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.profit = iprot.readDouble();
              struct.set_profit_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFIT_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.profitPercentage = iprot.readDouble();
              struct.set_profitPercentage_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.set_quantity_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionPercentage = iprot.readDouble();
              struct.set_positionPercentage_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionTime = iprot.readString();
              struct.set_actionTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTION_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionReason = iprot.readString();
              struct.set_actionReason_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRANSFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transferId = iprot.readI64();
              struct.set_transferId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STRATEGY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategyName = iprot.readString();
              struct.set_strategyName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AITransfer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stockCode != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stockCode);
        oprot.writeFieldEnd();
      }
      if (struct.stockName != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stockName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.buyPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.sellPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.profit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFIT_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.profitPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.positionPercentage);
      oprot.writeFieldEnd();
      if (struct.actionTime != null) {
        oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
        oprot.writeString(struct.actionTime);
        oprot.writeFieldEnd();
      }
      if (struct.actionReason != null) {
        oprot.writeFieldBegin(ACTION_REASON_FIELD_DESC);
        oprot.writeString(struct.actionReason);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_transferId()) {
        oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
        oprot.writeI64(struct.transferId);
        oprot.writeFieldEnd();
      }
      if (struct.strategyName != null) {
        if (struct.is_set_strategyName()) {
          oprot.writeFieldBegin(STRATEGY_NAME_FIELD_DESC);
          oprot.writeString(struct.strategyName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AITransferTupleSchemeFactory implements SchemeFactory {
    public AITransferTupleScheme getScheme() {
      return new AITransferTupleScheme();
    }
  }

  private static class AITransferTupleScheme extends TupleScheme<AITransfer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AITransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeString(struct.stockCode);
      oprot.writeString(struct.stockName);
      oprot.writeDouble(struct.buyPrice);
      oprot.writeDouble(struct.sellPrice);
      oprot.writeDouble(struct.profit);
      oprot.writeDouble(struct.profitPercentage);
      oprot.writeI32(struct.quantity);
      oprot.writeDouble(struct.positionPercentage);
      oprot.writeString(struct.actionTime);
      oprot.writeString(struct.actionReason);
      BitSet optionals = new BitSet();
      if (struct.is_set_transferId()) {
        optionals.set(0);
      }
      if (struct.is_set_strategyName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_transferId()) {
        oprot.writeI64(struct.transferId);
      }
      if (struct.is_set_strategyName()) {
        oprot.writeString(struct.strategyName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AITransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.rjzd.aistock.api.TransferType.findByValue(iprot.readI32());
      struct.set_type_isSet(true);
      struct.stockCode = iprot.readString();
      struct.set_stockCode_isSet(true);
      struct.stockName = iprot.readString();
      struct.set_stockName_isSet(true);
      struct.buyPrice = iprot.readDouble();
      struct.set_buyPrice_isSet(true);
      struct.sellPrice = iprot.readDouble();
      struct.set_sellPrice_isSet(true);
      struct.profit = iprot.readDouble();
      struct.set_profit_isSet(true);
      struct.profitPercentage = iprot.readDouble();
      struct.set_profitPercentage_isSet(true);
      struct.quantity = iprot.readI32();
      struct.set_quantity_isSet(true);
      struct.positionPercentage = iprot.readDouble();
      struct.set_positionPercentage_isSet(true);
      struct.actionTime = iprot.readString();
      struct.set_actionTime_isSet(true);
      struct.actionReason = iprot.readString();
      struct.set_actionReason_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.transferId = iprot.readI64();
        struct.set_transferId_isSet(true);
      }
      if (incoming.get(1)) {
        struct.strategyName = iprot.readString();
        struct.set_strategyName_isSet(true);
      }
    }
  }

}

