/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * AI周报
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AIWeekly implements org.apache.thrift.TBase<AIWeekly, AIWeekly._Fields>, java.io.Serializable, Cloneable, Comparable<AIWeekly>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AIWeekly");

  private static final org.apache.thrift.protocol.TField WEEKLY_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("weeklyTitle", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DETAIL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("detailUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AIWeeklyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AIWeeklyTupleSchemeFactory());
  }

  private String weeklyTitle; // required
  private String detailUrl; // required
  private boolean read; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(weeklyTitle);
    out.writeString(detailUrl);
    out.writeInt(read ? 1 : 0);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AIWeekly(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.weeklyTitle= in.readString();
    this.detailUrl= in.readString();
    this.read = (in.readInt()==1);
  }

  public static final android.os.Parcelable.Creator<AIWeekly> CREATOR = new android.os.Parcelable.Creator<AIWeekly>() {
    @Override
    public AIWeekly[] newArray(int size) {
      return new AIWeekly[size];
    }

    @Override
    public AIWeekly createFromParcel(android.os.Parcel in) {
      return new AIWeekly(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WEEKLY_TITLE((short)1, "weeklyTitle"),
    DETAIL_URL((short)2, "detailUrl"),
    READ((short)3, "read");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEEKLY_TITLE
          return WEEKLY_TITLE;
        case 2: // DETAIL_URL
          return DETAIL_URL;
        case 3: // READ
          return READ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READ_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.READ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEEKLY_TITLE, new org.apache.thrift.meta_data.FieldMetaData("weeklyTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_URL, new org.apache.thrift.meta_data.FieldMetaData("detailUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AIWeekly.class, metaDataMap);
  }

  public AIWeekly() {
  }

  public AIWeekly(
    String weeklyTitle,
    String detailUrl)
  {
    this();
    this.weeklyTitle = weeklyTitle;
    this.detailUrl = detailUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AIWeekly(AIWeekly other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_weeklyTitle()) {
      this.weeklyTitle = other.weeklyTitle;
    }
    if (other.is_set_detailUrl()) {
      this.detailUrl = other.detailUrl;
    }
    this.read = other.read;
  }

  public AIWeekly deepCopy() {
    return new AIWeekly(this);
  }

  public void clear() {
    this.weeklyTitle = null;
    this.detailUrl = null;
    set_read_isSet(false);
    this.read = false;
  }

  public String get_weeklyTitle() {
    return this.weeklyTitle;
  }

  public void set_weeklyTitle(String weeklyTitle) {
    this.weeklyTitle = weeklyTitle;
  }

  public void unset_weeklyTitle() {
    this.weeklyTitle = null;
  }

  /** Returns true if field weeklyTitle is set (has been assigned a value) and false otherwise */
  public boolean is_set_weeklyTitle() {
    return this.weeklyTitle != null;
  }

  public void set_weeklyTitle_isSet(boolean value) {
    if (!value) {
      this.weeklyTitle = null;
    }
  }

  public String get_detailUrl() {
    return this.detailUrl;
  }

  public void set_detailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
  }

  public void unset_detailUrl() {
    this.detailUrl = null;
  }

  /** Returns true if field detailUrl is set (has been assigned a value) and false otherwise */
  public boolean is_set_detailUrl() {
    return this.detailUrl != null;
  }

  public void set_detailUrl_isSet(boolean value) {
    if (!value) {
      this.detailUrl = null;
    }
  }

  public boolean is_read() {
    return this.read;
  }

  public void set_read(boolean read) {
    this.read = read;
    set_read_isSet(true);
  }

  public void unset_read() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_ISSET_ID);
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean is_set_read() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_ISSET_ID);
  }

  public void set_read_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEEKLY_TITLE:
      if (value == null) {
        unset_weeklyTitle();
      } else {
        set_weeklyTitle((String)value);
      }
      break;

    case DETAIL_URL:
      if (value == null) {
        unset_detailUrl();
      } else {
        set_detailUrl((String)value);
      }
      break;

    case READ:
      if (value == null) {
        unset_read();
      } else {
        set_read((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEEKLY_TITLE:
      return get_weeklyTitle();

    case DETAIL_URL:
      return get_detailUrl();

    case READ:
      return is_read();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEEKLY_TITLE:
      return is_set_weeklyTitle();
    case DETAIL_URL:
      return is_set_detailUrl();
    case READ:
      return is_set_read();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AIWeekly)
      return this.equals((AIWeekly)that);
    return false;
  }

  public boolean equals(AIWeekly that) {
    if (that == null)
      return false;

    boolean this_present_weeklyTitle = true && this.is_set_weeklyTitle();
    boolean that_present_weeklyTitle = true && that.is_set_weeklyTitle();
    if (this_present_weeklyTitle || that_present_weeklyTitle) {
      if (!(this_present_weeklyTitle && that_present_weeklyTitle))
        return false;
      if (!this.weeklyTitle.equals(that.weeklyTitle))
        return false;
    }

    boolean this_present_detailUrl = true && this.is_set_detailUrl();
    boolean that_present_detailUrl = true && that.is_set_detailUrl();
    if (this_present_detailUrl || that_present_detailUrl) {
      if (!(this_present_detailUrl && that_present_detailUrl))
        return false;
      if (!this.detailUrl.equals(that.detailUrl))
        return false;
    }

    boolean this_present_read = true && this.is_set_read();
    boolean that_present_read = true && that.is_set_read();
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (this.read != that.read)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_weeklyTitle = true && (is_set_weeklyTitle());
    list.add(present_weeklyTitle);
    if (present_weeklyTitle)
      list.add(weeklyTitle);

    boolean present_detailUrl = true && (is_set_detailUrl());
    list.add(present_detailUrl);
    if (present_detailUrl)
      list.add(detailUrl);

    boolean present_read = true && (is_set_read());
    list.add(present_read);
    if (present_read)
      list.add(read);

    return list.hashCode();
  }

  @Override
  public int compareTo(AIWeekly other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_weeklyTitle()).compareTo(other.is_set_weeklyTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_weeklyTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weeklyTitle, other.weeklyTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_detailUrl()).compareTo(other.is_set_detailUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_detailUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailUrl, other.detailUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_read()).compareTo(other.is_set_read());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_read()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AIWeekly(");
    boolean first = true;

    sb.append("weeklyTitle:");
    if (this.weeklyTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.weeklyTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailUrl:");
    if (this.detailUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.detailUrl);
    }
    first = false;
    if (is_set_read()) {
      if (!first) sb.append(", ");
      sb.append("read:");
      sb.append(this.read);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_weeklyTitle()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'weeklyTitle' is unset! Struct:" + toString());
    }

    if (!is_set_detailUrl()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailUrl' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AIWeeklyStandardSchemeFactory implements SchemeFactory {
    public AIWeeklyStandardScheme getScheme() {
      return new AIWeeklyStandardScheme();
    }
  }

  private static class AIWeeklyStandardScheme extends StandardScheme<AIWeekly> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AIWeekly struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEEKLY_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weeklyTitle = iprot.readString();
              struct.set_weeklyTitle_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAIL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailUrl = iprot.readString();
              struct.set_detailUrl_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.read = iprot.readBool();
              struct.set_read_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AIWeekly struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.weeklyTitle != null) {
        oprot.writeFieldBegin(WEEKLY_TITLE_FIELD_DESC);
        oprot.writeString(struct.weeklyTitle);
        oprot.writeFieldEnd();
      }
      if (struct.detailUrl != null) {
        oprot.writeFieldBegin(DETAIL_URL_FIELD_DESC);
        oprot.writeString(struct.detailUrl);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_read()) {
        oprot.writeFieldBegin(READ_FIELD_DESC);
        oprot.writeBool(struct.read);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AIWeeklyTupleSchemeFactory implements SchemeFactory {
    public AIWeeklyTupleScheme getScheme() {
      return new AIWeeklyTupleScheme();
    }
  }

  private static class AIWeeklyTupleScheme extends TupleScheme<AIWeekly> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AIWeekly struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.weeklyTitle);
      oprot.writeString(struct.detailUrl);
      BitSet optionals = new BitSet();
      if (struct.is_set_read()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_read()) {
        oprot.writeBool(struct.read);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AIWeekly struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.weeklyTitle = iprot.readString();
      struct.set_weeklyTitle_isSet(true);
      struct.detailUrl = iprot.readString();
      struct.set_detailUrl_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.read = iprot.readBool();
        struct.set_read_isSet(true);
      }
    }
  }

}

