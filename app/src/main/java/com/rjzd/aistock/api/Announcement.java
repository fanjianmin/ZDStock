/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 公告
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Announcement implements org.apache.thrift.TBase<Announcement, Announcement._Fields>, java.io.Serializable, Cloneable, Comparable<Announcement>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Announcement");

  private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("hasRead", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishTime", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnnouncementStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnnouncementTupleSchemeFactory());
  }

  private String newsId; // required
  private String title; // required
  private String url; // required
  private String imageUrl; // required
  private int hasRead; // required
  private String publishTime; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(newsId);
    out.writeString(title);
    out.writeString(url);
    out.writeString(imageUrl);
    out.writeInt(hasRead);
    out.writeString(publishTime);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Announcement(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.newsId= in.readString();
    this.title= in.readString();
    this.url= in.readString();
    this.imageUrl= in.readString();
    this.hasRead = in.readInt();
    this.publishTime= in.readString();
  }

  public static final android.os.Parcelable.Creator<Announcement> CREATOR = new android.os.Parcelable.Creator<Announcement>() {
    @Override
    public Announcement[] newArray(int size) {
      return new Announcement[size];
    }

    @Override
    public Announcement createFromParcel(android.os.Parcel in) {
      return new Announcement(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEWS_ID((short)1, "newsId"),
    TITLE((short)2, "title"),
    URL((short)3, "url"),
    IMAGE_URL((short)4, "imageUrl"),
    HAS_READ((short)5, "hasRead"),
    PUBLISH_TIME((short)6, "publishTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEWS_ID
          return NEWS_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // URL
          return URL;
        case 4: // IMAGE_URL
          return IMAGE_URL;
        case 5: // HAS_READ
          return HAS_READ;
        case 6: // PUBLISH_TIME
          return PUBLISH_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASREAD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PUBLISH_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_READ, new org.apache.thrift.meta_data.FieldMetaData("hasRead", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Announcement.class, metaDataMap);
  }

  public Announcement() {
  }

  public Announcement(
    String newsId,
    String title,
    String url,
    String imageUrl,
    int hasRead)
  {
    this();
    this.newsId = newsId;
    this.title = title;
    this.url = url;
    this.imageUrl = imageUrl;
    this.hasRead = hasRead;
    set_hasRead_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Announcement(Announcement other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_newsId()) {
      this.newsId = other.newsId;
    }
    if (other.is_set_title()) {
      this.title = other.title;
    }
    if (other.is_set_url()) {
      this.url = other.url;
    }
    if (other.is_set_imageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.hasRead = other.hasRead;
    if (other.is_set_publishTime()) {
      this.publishTime = other.publishTime;
    }
  }

  public Announcement deepCopy() {
    return new Announcement(this);
  }

  public void clear() {
    this.newsId = null;
    this.title = null;
    this.url = null;
    this.imageUrl = null;
    set_hasRead_isSet(false);
    this.hasRead = 0;
    this.publishTime = null;
  }

  public String get_newsId() {
    return this.newsId;
  }

  public void set_newsId(String newsId) {
    this.newsId = newsId;
  }

  public void unset_newsId() {
    this.newsId = null;
  }

  /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
  public boolean is_set_newsId() {
    return this.newsId != null;
  }

  public void set_newsId_isSet(boolean value) {
    if (!value) {
      this.newsId = null;
    }
  }

  public String get_title() {
    return this.title;
  }

  public void set_title(String title) {
    this.title = title;
  }

  public void unset_title() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean is_set_title() {
    return this.title != null;
  }

  public void set_title_isSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String get_url() {
    return this.url;
  }

  public void set_url(String url) {
    this.url = url;
  }

  public void unset_url() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean is_set_url() {
    return this.url != null;
  }

  public void set_url_isSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String get_imageUrl() {
    return this.imageUrl;
  }

  public void set_imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unset_imageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean is_set_imageUrl() {
    return this.imageUrl != null;
  }

  public void set_imageUrl_isSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public int get_hasRead() {
    return this.hasRead;
  }

  public void set_hasRead(int hasRead) {
    this.hasRead = hasRead;
    set_hasRead_isSet(true);
  }

  public void unset_hasRead() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASREAD_ISSET_ID);
  }

  /** Returns true if field hasRead is set (has been assigned a value) and false otherwise */
  public boolean is_set_hasRead() {
    return EncodingUtils.testBit(__isset_bitfield, __HASREAD_ISSET_ID);
  }

  public void set_hasRead_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASREAD_ISSET_ID, value);
  }

  public String get_publishTime() {
    return this.publishTime;
  }

  public void set_publishTime(String publishTime) {
    this.publishTime = publishTime;
  }

  public void unset_publishTime() {
    this.publishTime = null;
  }

  /** Returns true if field publishTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_publishTime() {
    return this.publishTime != null;
  }

  public void set_publishTime_isSet(boolean value) {
    if (!value) {
      this.publishTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEWS_ID:
      if (value == null) {
        unset_newsId();
      } else {
        set_newsId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unset_title();
      } else {
        set_title((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unset_url();
      } else {
        set_url((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unset_imageUrl();
      } else {
        set_imageUrl((String)value);
      }
      break;

    case HAS_READ:
      if (value == null) {
        unset_hasRead();
      } else {
        set_hasRead((Integer)value);
      }
      break;

    case PUBLISH_TIME:
      if (value == null) {
        unset_publishTime();
      } else {
        set_publishTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEWS_ID:
      return get_newsId();

    case TITLE:
      return get_title();

    case URL:
      return get_url();

    case IMAGE_URL:
      return get_imageUrl();

    case HAS_READ:
      return get_hasRead();

    case PUBLISH_TIME:
      return get_publishTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEWS_ID:
      return is_set_newsId();
    case TITLE:
      return is_set_title();
    case URL:
      return is_set_url();
    case IMAGE_URL:
      return is_set_imageUrl();
    case HAS_READ:
      return is_set_hasRead();
    case PUBLISH_TIME:
      return is_set_publishTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Announcement)
      return this.equals((Announcement)that);
    return false;
  }

  public boolean equals(Announcement that) {
    if (that == null)
      return false;

    boolean this_present_newsId = true && this.is_set_newsId();
    boolean that_present_newsId = true && that.is_set_newsId();
    if (this_present_newsId || that_present_newsId) {
      if (!(this_present_newsId && that_present_newsId))
        return false;
      if (!this.newsId.equals(that.newsId))
        return false;
    }

    boolean this_present_title = true && this.is_set_title();
    boolean that_present_title = true && that.is_set_title();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_url = true && this.is_set_url();
    boolean that_present_url = true && that.is_set_url();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_imageUrl = true && this.is_set_imageUrl();
    boolean that_present_imageUrl = true && that.is_set_imageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_hasRead = true;
    boolean that_present_hasRead = true;
    if (this_present_hasRead || that_present_hasRead) {
      if (!(this_present_hasRead && that_present_hasRead))
        return false;
      if (this.hasRead != that.hasRead)
        return false;
    }

    boolean this_present_publishTime = true && this.is_set_publishTime();
    boolean that_present_publishTime = true && that.is_set_publishTime();
    if (this_present_publishTime || that_present_publishTime) {
      if (!(this_present_publishTime && that_present_publishTime))
        return false;
      if (!this.publishTime.equals(that.publishTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_newsId = true && (is_set_newsId());
    list.add(present_newsId);
    if (present_newsId)
      list.add(newsId);

    boolean present_title = true && (is_set_title());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_url = true && (is_set_url());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_imageUrl = true && (is_set_imageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_hasRead = true;
    list.add(present_hasRead);
    if (present_hasRead)
      list.add(hasRead);

    boolean present_publishTime = true && (is_set_publishTime());
    list.add(present_publishTime);
    if (present_publishTime)
      list.add(publishTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Announcement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_newsId()).compareTo(other.is_set_newsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_newsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_title()).compareTo(other.is_set_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_url()).compareTo(other.is_set_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_imageUrl()).compareTo(other.is_set_imageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_imageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_hasRead()).compareTo(other.is_set_hasRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_hasRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasRead, other.hasRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_publishTime()).compareTo(other.is_set_publishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_publishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishTime, other.publishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Announcement(");
    boolean first = true;

    sb.append("newsId:");
    if (this.newsId == null) {
      sb.append("null");
    } else {
      sb.append(this.newsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageUrl:");
    if (this.imageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.imageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasRead:");
    sb.append(this.hasRead);
    first = false;
    if (is_set_publishTime()) {
      if (!first) sb.append(", ");
      sb.append("publishTime:");
      if (this.publishTime == null) {
        sb.append("null");
      } else {
        sb.append(this.publishTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_newsId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newsId' is unset! Struct:" + toString());
    }

    if (!is_set_title()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' is unset! Struct:" + toString());
    }

    if (!is_set_url()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' is unset! Struct:" + toString());
    }

    if (!is_set_imageUrl()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imageUrl' is unset! Struct:" + toString());
    }

    if (!is_set_hasRead()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hasRead' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AnnouncementStandardSchemeFactory implements SchemeFactory {
    public AnnouncementStandardScheme getScheme() {
      return new AnnouncementStandardScheme();
    }
  }

  private static class AnnouncementStandardScheme extends StandardScheme<Announcement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Announcement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEWS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newsId = iprot.readString();
              struct.set_newsId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.set_title_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.set_url_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.set_imageUrl_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasRead = iprot.readI32();
              struct.set_hasRead_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishTime = iprot.readString();
              struct.set_publishTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Announcement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.newsId != null) {
        oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
        oprot.writeString(struct.newsId);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.imageUrl != null) {
        oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.imageUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_READ_FIELD_DESC);
      oprot.writeI32(struct.hasRead);
      oprot.writeFieldEnd();
      if (struct.publishTime != null) {
        if (struct.is_set_publishTime()) {
          oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
          oprot.writeString(struct.publishTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnnouncementTupleSchemeFactory implements SchemeFactory {
    public AnnouncementTupleScheme getScheme() {
      return new AnnouncementTupleScheme();
    }
  }

  private static class AnnouncementTupleScheme extends TupleScheme<Announcement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Announcement struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.newsId);
      oprot.writeString(struct.title);
      oprot.writeString(struct.url);
      oprot.writeString(struct.imageUrl);
      oprot.writeI32(struct.hasRead);
      BitSet optionals = new BitSet();
      if (struct.is_set_publishTime()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_publishTime()) {
        oprot.writeString(struct.publishTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Announcement struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.newsId = iprot.readString();
      struct.set_newsId_isSet(true);
      struct.title = iprot.readString();
      struct.set_title_isSet(true);
      struct.url = iprot.readString();
      struct.set_url_isSet(true);
      struct.imageUrl = iprot.readString();
      struct.set_imageUrl_isSet(true);
      struct.hasRead = iprot.readI32();
      struct.set_hasRead_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.publishTime = iprot.readString();
        struct.set_publishTime_isSet(true);
      }
    }
  }

}

