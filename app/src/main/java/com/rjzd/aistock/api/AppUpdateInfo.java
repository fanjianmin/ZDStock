/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class AppUpdateInfo implements org.apache.thrift.TBase<AppUpdateInfo, AppUpdateInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AppUpdateInfo>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppUpdateInfo");

  private static final org.apache.thrift.protocol.TField APP_SNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appSname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_VERSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersionName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("appPackage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersionCode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("appUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("appSize", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField APP_UPDATE_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("appUpdateLog", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppUpdateInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppUpdateInfoTupleSchemeFactory());
  }

  private String appSname; // required
  private String appVersionName; // required
  private String appPackage; // required
  private int appVersionCode; // required
  private String appUrl; // required
  private long appSize; // optional
  private String appUpdateLog; // required
  private boolean force; // required
  private String updateTime; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(appSname);
    out.writeString(appVersionName);
    out.writeString(appPackage);
    out.writeInt(appVersionCode);
    out.writeString(appUrl);
    out.writeLong(appSize);
    out.writeString(appUpdateLog);
    out.writeInt(force ? 1 : 0);
    out.writeString(updateTime);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public AppUpdateInfo(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.appSname= in.readString();
    this.appVersionName= in.readString();
    this.appPackage= in.readString();
    this.appVersionCode = in.readInt();
    this.appUrl= in.readString();
    this.appSize = in.readLong();
    this.appUpdateLog= in.readString();
    this.force = (in.readInt()==1);
    this.updateTime= in.readString();
  }

  public static final android.os.Parcelable.Creator<AppUpdateInfo> CREATOR = new android.os.Parcelable.Creator<AppUpdateInfo>() {
    @Override
    public AppUpdateInfo[] newArray(int size) {
      return new AppUpdateInfo[size];
    }

    @Override
    public AppUpdateInfo createFromParcel(android.os.Parcel in) {
      return new AppUpdateInfo(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_SNAME((short)1, "appSname"),
    APP_VERSION_NAME((short)2, "appVersionName"),
    APP_PACKAGE((short)3, "appPackage"),
    APP_VERSION_CODE((short)4, "appVersionCode"),
    APP_URL((short)5, "appUrl"),
    APP_SIZE((short)6, "appSize"),
    APP_UPDATE_LOG((short)7, "appUpdateLog"),
    FORCE((short)8, "force"),
    UPDATE_TIME((short)9, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_SNAME
          return APP_SNAME;
        case 2: // APP_VERSION_NAME
          return APP_VERSION_NAME;
        case 3: // APP_PACKAGE
          return APP_PACKAGE;
        case 4: // APP_VERSION_CODE
          return APP_VERSION_CODE;
        case 5: // APP_URL
          return APP_URL;
        case 6: // APP_SIZE
          return APP_SIZE;
        case 7: // APP_UPDATE_LOG
          return APP_UPDATE_LOG;
        case 8: // FORCE
          return FORCE;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPVERSIONCODE_ISSET_ID = 0;
  private static final int __APPSIZE_ISSET_ID = 1;
  private static final int __FORCE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_SIZE,_Fields.UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_SNAME, new org.apache.thrift.meta_data.FieldMetaData("appSname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("appVersionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("appPackage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("appVersionCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_URL, new org.apache.thrift.meta_data.FieldMetaData("appUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("appSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_UPDATE_LOG, new org.apache.thrift.meta_data.FieldMetaData("appUpdateLog", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppUpdateInfo.class, metaDataMap);
  }

  public AppUpdateInfo() {
  }

  public AppUpdateInfo(
    String appSname,
    String appVersionName,
    String appPackage,
    int appVersionCode,
    String appUrl,
    String appUpdateLog,
    boolean force)
  {
    this();
    this.appSname = appSname;
    this.appVersionName = appVersionName;
    this.appPackage = appPackage;
    this.appVersionCode = appVersionCode;
    set_appVersionCode_isSet(true);
    this.appUrl = appUrl;
    this.appUpdateLog = appUpdateLog;
    this.force = force;
    set_force_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppUpdateInfo(AppUpdateInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_appSname()) {
      this.appSname = other.appSname;
    }
    if (other.is_set_appVersionName()) {
      this.appVersionName = other.appVersionName;
    }
    if (other.is_set_appPackage()) {
      this.appPackage = other.appPackage;
    }
    this.appVersionCode = other.appVersionCode;
    if (other.is_set_appUrl()) {
      this.appUrl = other.appUrl;
    }
    this.appSize = other.appSize;
    if (other.is_set_appUpdateLog()) {
      this.appUpdateLog = other.appUpdateLog;
    }
    this.force = other.force;
    if (other.is_set_updateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public AppUpdateInfo deepCopy() {
    return new AppUpdateInfo(this);
  }

  public void clear() {
    this.appSname = null;
    this.appVersionName = null;
    this.appPackage = null;
    set_appVersionCode_isSet(false);
    this.appVersionCode = 0;
    this.appUrl = null;
    set_appSize_isSet(false);
    this.appSize = 0;
    this.appUpdateLog = null;
    set_force_isSet(false);
    this.force = false;
    this.updateTime = null;
  }

  public String get_appSname() {
    return this.appSname;
  }

  public void set_appSname(String appSname) {
    this.appSname = appSname;
  }

  public void unset_appSname() {
    this.appSname = null;
  }

  /** Returns true if field appSname is set (has been assigned a value) and false otherwise */
  public boolean is_set_appSname() {
    return this.appSname != null;
  }

  public void set_appSname_isSet(boolean value) {
    if (!value) {
      this.appSname = null;
    }
  }

  public String get_appVersionName() {
    return this.appVersionName;
  }

  public void set_appVersionName(String appVersionName) {
    this.appVersionName = appVersionName;
  }

  public void unset_appVersionName() {
    this.appVersionName = null;
  }

  /** Returns true if field appVersionName is set (has been assigned a value) and false otherwise */
  public boolean is_set_appVersionName() {
    return this.appVersionName != null;
  }

  public void set_appVersionName_isSet(boolean value) {
    if (!value) {
      this.appVersionName = null;
    }
  }

  public String get_appPackage() {
    return this.appPackage;
  }

  public void set_appPackage(String appPackage) {
    this.appPackage = appPackage;
  }

  public void unset_appPackage() {
    this.appPackage = null;
  }

  /** Returns true if field appPackage is set (has been assigned a value) and false otherwise */
  public boolean is_set_appPackage() {
    return this.appPackage != null;
  }

  public void set_appPackage_isSet(boolean value) {
    if (!value) {
      this.appPackage = null;
    }
  }

  public int get_appVersionCode() {
    return this.appVersionCode;
  }

  public void set_appVersionCode(int appVersionCode) {
    this.appVersionCode = appVersionCode;
    set_appVersionCode_isSet(true);
  }

  public void unset_appVersionCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPVERSIONCODE_ISSET_ID);
  }

  /** Returns true if field appVersionCode is set (has been assigned a value) and false otherwise */
  public boolean is_set_appVersionCode() {
    return EncodingUtils.testBit(__isset_bitfield, __APPVERSIONCODE_ISSET_ID);
  }

  public void set_appVersionCode_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPVERSIONCODE_ISSET_ID, value);
  }

  public String get_appUrl() {
    return this.appUrl;
  }

  public void set_appUrl(String appUrl) {
    this.appUrl = appUrl;
  }

  public void unset_appUrl() {
    this.appUrl = null;
  }

  /** Returns true if field appUrl is set (has been assigned a value) and false otherwise */
  public boolean is_set_appUrl() {
    return this.appUrl != null;
  }

  public void set_appUrl_isSet(boolean value) {
    if (!value) {
      this.appUrl = null;
    }
  }

  public long get_appSize() {
    return this.appSize;
  }

  public void set_appSize(long appSize) {
    this.appSize = appSize;
    set_appSize_isSet(true);
  }

  public void unset_appSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPSIZE_ISSET_ID);
  }

  /** Returns true if field appSize is set (has been assigned a value) and false otherwise */
  public boolean is_set_appSize() {
    return EncodingUtils.testBit(__isset_bitfield, __APPSIZE_ISSET_ID);
  }

  public void set_appSize_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPSIZE_ISSET_ID, value);
  }

  public String get_appUpdateLog() {
    return this.appUpdateLog;
  }

  public void set_appUpdateLog(String appUpdateLog) {
    this.appUpdateLog = appUpdateLog;
  }

  public void unset_appUpdateLog() {
    this.appUpdateLog = null;
  }

  /** Returns true if field appUpdateLog is set (has been assigned a value) and false otherwise */
  public boolean is_set_appUpdateLog() {
    return this.appUpdateLog != null;
  }

  public void set_appUpdateLog_isSet(boolean value) {
    if (!value) {
      this.appUpdateLog = null;
    }
  }

  public boolean is_force() {
    return this.force;
  }

  public void set_force(boolean force) {
    this.force = force;
    set_force_isSet(true);
  }

  public void unset_force() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
  }

  /** Returns true if field force is set (has been assigned a value) and false otherwise */
  public boolean is_set_force() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
  }

  public void set_force_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
  }

  public String get_updateTime() {
    return this.updateTime;
  }

  public void set_updateTime(String updateTime) {
    this.updateTime = updateTime;
  }

  public void unset_updateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_updateTime() {
    return this.updateTime != null;
  }

  public void set_updateTime_isSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_SNAME:
      if (value == null) {
        unset_appSname();
      } else {
        set_appSname((String)value);
      }
      break;

    case APP_VERSION_NAME:
      if (value == null) {
        unset_appVersionName();
      } else {
        set_appVersionName((String)value);
      }
      break;

    case APP_PACKAGE:
      if (value == null) {
        unset_appPackage();
      } else {
        set_appPackage((String)value);
      }
      break;

    case APP_VERSION_CODE:
      if (value == null) {
        unset_appVersionCode();
      } else {
        set_appVersionCode((Integer)value);
      }
      break;

    case APP_URL:
      if (value == null) {
        unset_appUrl();
      } else {
        set_appUrl((String)value);
      }
      break;

    case APP_SIZE:
      if (value == null) {
        unset_appSize();
      } else {
        set_appSize((Long)value);
      }
      break;

    case APP_UPDATE_LOG:
      if (value == null) {
        unset_appUpdateLog();
      } else {
        set_appUpdateLog((String)value);
      }
      break;

    case FORCE:
      if (value == null) {
        unset_force();
      } else {
        set_force((Boolean)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unset_updateTime();
      } else {
        set_updateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_SNAME:
      return get_appSname();

    case APP_VERSION_NAME:
      return get_appVersionName();

    case APP_PACKAGE:
      return get_appPackage();

    case APP_VERSION_CODE:
      return get_appVersionCode();

    case APP_URL:
      return get_appUrl();

    case APP_SIZE:
      return get_appSize();

    case APP_UPDATE_LOG:
      return get_appUpdateLog();

    case FORCE:
      return is_force();

    case UPDATE_TIME:
      return get_updateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_SNAME:
      return is_set_appSname();
    case APP_VERSION_NAME:
      return is_set_appVersionName();
    case APP_PACKAGE:
      return is_set_appPackage();
    case APP_VERSION_CODE:
      return is_set_appVersionCode();
    case APP_URL:
      return is_set_appUrl();
    case APP_SIZE:
      return is_set_appSize();
    case APP_UPDATE_LOG:
      return is_set_appUpdateLog();
    case FORCE:
      return is_set_force();
    case UPDATE_TIME:
      return is_set_updateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppUpdateInfo)
      return this.equals((AppUpdateInfo)that);
    return false;
  }

  public boolean equals(AppUpdateInfo that) {
    if (that == null)
      return false;

    boolean this_present_appSname = true && this.is_set_appSname();
    boolean that_present_appSname = true && that.is_set_appSname();
    if (this_present_appSname || that_present_appSname) {
      if (!(this_present_appSname && that_present_appSname))
        return false;
      if (!this.appSname.equals(that.appSname))
        return false;
    }

    boolean this_present_appVersionName = true && this.is_set_appVersionName();
    boolean that_present_appVersionName = true && that.is_set_appVersionName();
    if (this_present_appVersionName || that_present_appVersionName) {
      if (!(this_present_appVersionName && that_present_appVersionName))
        return false;
      if (!this.appVersionName.equals(that.appVersionName))
        return false;
    }

    boolean this_present_appPackage = true && this.is_set_appPackage();
    boolean that_present_appPackage = true && that.is_set_appPackage();
    if (this_present_appPackage || that_present_appPackage) {
      if (!(this_present_appPackage && that_present_appPackage))
        return false;
      if (!this.appPackage.equals(that.appPackage))
        return false;
    }

    boolean this_present_appVersionCode = true;
    boolean that_present_appVersionCode = true;
    if (this_present_appVersionCode || that_present_appVersionCode) {
      if (!(this_present_appVersionCode && that_present_appVersionCode))
        return false;
      if (this.appVersionCode != that.appVersionCode)
        return false;
    }

    boolean this_present_appUrl = true && this.is_set_appUrl();
    boolean that_present_appUrl = true && that.is_set_appUrl();
    if (this_present_appUrl || that_present_appUrl) {
      if (!(this_present_appUrl && that_present_appUrl))
        return false;
      if (!this.appUrl.equals(that.appUrl))
        return false;
    }

    boolean this_present_appSize = true && this.is_set_appSize();
    boolean that_present_appSize = true && that.is_set_appSize();
    if (this_present_appSize || that_present_appSize) {
      if (!(this_present_appSize && that_present_appSize))
        return false;
      if (this.appSize != that.appSize)
        return false;
    }

    boolean this_present_appUpdateLog = true && this.is_set_appUpdateLog();
    boolean that_present_appUpdateLog = true && that.is_set_appUpdateLog();
    if (this_present_appUpdateLog || that_present_appUpdateLog) {
      if (!(this_present_appUpdateLog && that_present_appUpdateLog))
        return false;
      if (!this.appUpdateLog.equals(that.appUpdateLog))
        return false;
    }

    boolean this_present_force = true;
    boolean that_present_force = true;
    if (this_present_force || that_present_force) {
      if (!(this_present_force && that_present_force))
        return false;
      if (this.force != that.force)
        return false;
    }

    boolean this_present_updateTime = true && this.is_set_updateTime();
    boolean that_present_updateTime = true && that.is_set_updateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_appSname = true && (is_set_appSname());
    list.add(present_appSname);
    if (present_appSname)
      list.add(appSname);

    boolean present_appVersionName = true && (is_set_appVersionName());
    list.add(present_appVersionName);
    if (present_appVersionName)
      list.add(appVersionName);

    boolean present_appPackage = true && (is_set_appPackage());
    list.add(present_appPackage);
    if (present_appPackage)
      list.add(appPackage);

    boolean present_appVersionCode = true;
    list.add(present_appVersionCode);
    if (present_appVersionCode)
      list.add(appVersionCode);

    boolean present_appUrl = true && (is_set_appUrl());
    list.add(present_appUrl);
    if (present_appUrl)
      list.add(appUrl);

    boolean present_appSize = true && (is_set_appSize());
    list.add(present_appSize);
    if (present_appSize)
      list.add(appSize);

    boolean present_appUpdateLog = true && (is_set_appUpdateLog());
    list.add(present_appUpdateLog);
    if (present_appUpdateLog)
      list.add(appUpdateLog);

    boolean present_force = true;
    list.add(present_force);
    if (present_force)
      list.add(force);

    boolean present_updateTime = true && (is_set_updateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(AppUpdateInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_appSname()).compareTo(other.is_set_appSname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appSname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSname, other.appSname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appVersionName()).compareTo(other.is_set_appVersionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appVersionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersionName, other.appVersionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appPackage()).compareTo(other.is_set_appPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPackage, other.appPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appVersionCode()).compareTo(other.is_set_appVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersionCode, other.appVersionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appUrl()).compareTo(other.is_set_appUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appUrl, other.appUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appSize()).compareTo(other.is_set_appSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSize, other.appSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_appUpdateLog()).compareTo(other.is_set_appUpdateLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_appUpdateLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appUpdateLog, other.appUpdateLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_force()).compareTo(other.is_set_force());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_force()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_updateTime()).compareTo(other.is_set_updateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_updateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppUpdateInfo(");
    boolean first = true;

    sb.append("appSname:");
    if (this.appSname == null) {
      sb.append("null");
    } else {
      sb.append(this.appSname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersionName:");
    if (this.appVersionName == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appPackage:");
    if (this.appPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.appPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersionCode:");
    sb.append(this.appVersionCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appUrl:");
    if (this.appUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.appUrl);
    }
    first = false;
    if (is_set_appSize()) {
      if (!first) sb.append(", ");
      sb.append("appSize:");
      sb.append(this.appSize);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appUpdateLog:");
    if (this.appUpdateLog == null) {
      sb.append("null");
    } else {
      sb.append(this.appUpdateLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("force:");
    sb.append(this.force);
    first = false;
    if (is_set_updateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_appSname()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appSname' is unset! Struct:" + toString());
    }

    if (!is_set_appVersionName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appVersionName' is unset! Struct:" + toString());
    }

    if (!is_set_appPackage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appPackage' is unset! Struct:" + toString());
    }

    if (!is_set_appVersionCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appVersionCode' is unset! Struct:" + toString());
    }

    if (!is_set_appUrl()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appUrl' is unset! Struct:" + toString());
    }

    if (!is_set_appUpdateLog()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appUpdateLog' is unset! Struct:" + toString());
    }

    if (!is_set_force()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'force' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class AppUpdateInfoStandardSchemeFactory implements SchemeFactory {
    public AppUpdateInfoStandardScheme getScheme() {
      return new AppUpdateInfoStandardScheme();
    }
  }

  private static class AppUpdateInfoStandardScheme extends StandardScheme<AppUpdateInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppUpdateInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_SNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appSname = iprot.readString();
              struct.set_appSname_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_VERSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersionName = iprot.readString();
              struct.set_appVersionName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPackage = iprot.readString();
              struct.set_appPackage_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appVersionCode = iprot.readI32();
              struct.set_appVersionCode_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appUrl = iprot.readString();
              struct.set_appUrl_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appSize = iprot.readI64();
              struct.set_appSize_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APP_UPDATE_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appUpdateLog = iprot.readString();
              struct.set_appUpdateLog_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FORCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.force = iprot.readBool();
              struct.set_force_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.set_updateTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppUpdateInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appSname != null) {
        oprot.writeFieldBegin(APP_SNAME_FIELD_DESC);
        oprot.writeString(struct.appSname);
        oprot.writeFieldEnd();
      }
      if (struct.appVersionName != null) {
        oprot.writeFieldBegin(APP_VERSION_NAME_FIELD_DESC);
        oprot.writeString(struct.appVersionName);
        oprot.writeFieldEnd();
      }
      if (struct.appPackage != null) {
        oprot.writeFieldBegin(APP_PACKAGE_FIELD_DESC);
        oprot.writeString(struct.appPackage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_VERSION_CODE_FIELD_DESC);
      oprot.writeI32(struct.appVersionCode);
      oprot.writeFieldEnd();
      if (struct.appUrl != null) {
        oprot.writeFieldBegin(APP_URL_FIELD_DESC);
        oprot.writeString(struct.appUrl);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_appSize()) {
        oprot.writeFieldBegin(APP_SIZE_FIELD_DESC);
        oprot.writeI64(struct.appSize);
        oprot.writeFieldEnd();
      }
      if (struct.appUpdateLog != null) {
        oprot.writeFieldBegin(APP_UPDATE_LOG_FIELD_DESC);
        oprot.writeString(struct.appUpdateLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORCE_FIELD_DESC);
      oprot.writeBool(struct.force);
      oprot.writeFieldEnd();
      if (struct.updateTime != null) {
        if (struct.is_set_updateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppUpdateInfoTupleSchemeFactory implements SchemeFactory {
    public AppUpdateInfoTupleScheme getScheme() {
      return new AppUpdateInfoTupleScheme();
    }
  }

  private static class AppUpdateInfoTupleScheme extends TupleScheme<AppUpdateInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppUpdateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.appSname);
      oprot.writeString(struct.appVersionName);
      oprot.writeString(struct.appPackage);
      oprot.writeI32(struct.appVersionCode);
      oprot.writeString(struct.appUrl);
      oprot.writeString(struct.appUpdateLog);
      oprot.writeBool(struct.force);
      BitSet optionals = new BitSet();
      if (struct.is_set_appSize()) {
        optionals.set(0);
      }
      if (struct.is_set_updateTime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_appSize()) {
        oprot.writeI64(struct.appSize);
      }
      if (struct.is_set_updateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppUpdateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.appSname = iprot.readString();
      struct.set_appSname_isSet(true);
      struct.appVersionName = iprot.readString();
      struct.set_appVersionName_isSet(true);
      struct.appPackage = iprot.readString();
      struct.set_appPackage_isSet(true);
      struct.appVersionCode = iprot.readI32();
      struct.set_appVersionCode_isSet(true);
      struct.appUrl = iprot.readString();
      struct.set_appUrl_isSet(true);
      struct.appUpdateLog = iprot.readString();
      struct.set_appUpdateLog_isSet(true);
      struct.force = iprot.readBool();
      struct.set_force_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.appSize = iprot.readI64();
        struct.set_appSize_isSet(true);
      }
      if (incoming.get(1)) {
        struct.updateTime = iprot.readString();
        struct.set_updateTime_isSet(true);
      }
    }
  }

}

