/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 日本云指标特性
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class CloudFeature implements org.apache.thrift.TBase<CloudFeature, CloudFeature._Fields>, java.io.Serializable, Cloneable, Comparable<CloudFeature>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloudFeature");

  private static final org.apache.thrift.protocol.TField GOOD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("goodList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BAD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("badList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NEUTRAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("neutralList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CloudFeatureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CloudFeatureTupleSchemeFactory());
  }

  private List<String> goodList; // required
  private List<String> badList; // required
  private List<String> neutralList; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeList(goodList);
    out.writeList(badList);
    out.writeList(neutralList);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public CloudFeature(android.os.Parcel in) {
    this.goodList = new ArrayList<String>();
    in.readList(this.goodList, CloudFeature.class.getClassLoader());
    this.badList = new ArrayList<String>();
    in.readList(this.badList, CloudFeature.class.getClassLoader());
    this.neutralList = new ArrayList<String>();
    in.readList(this.neutralList, CloudFeature.class.getClassLoader());
  }

  public static final android.os.Parcelable.Creator<CloudFeature> CREATOR = new android.os.Parcelable.Creator<CloudFeature>() {
    @Override
    public CloudFeature[] newArray(int size) {
      return new CloudFeature[size];
    }

    @Override
    public CloudFeature createFromParcel(android.os.Parcel in) {
      return new CloudFeature(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GOOD_LIST((short)1, "goodList"),
    BAD_LIST((short)2, "badList"),
    NEUTRAL_LIST((short)3, "neutralList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOOD_LIST
          return GOOD_LIST;
        case 2: // BAD_LIST
          return BAD_LIST;
        case 3: // NEUTRAL_LIST
          return NEUTRAL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOOD_LIST, new org.apache.thrift.meta_data.FieldMetaData("goodList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BAD_LIST, new org.apache.thrift.meta_data.FieldMetaData("badList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEUTRAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("neutralList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloudFeature.class, metaDataMap);
  }

  public CloudFeature() {
  }

  public CloudFeature(
    List<String> goodList,
    List<String> badList,
    List<String> neutralList)
  {
    this();
    this.goodList = goodList;
    this.badList = badList;
    this.neutralList = neutralList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CloudFeature(CloudFeature other) {
    if (other.is_set_goodList()) {
      List<String> __this__goodList = new ArrayList<String>(other.goodList);
      this.goodList = __this__goodList;
    }
    if (other.is_set_badList()) {
      List<String> __this__badList = new ArrayList<String>(other.badList);
      this.badList = __this__badList;
    }
    if (other.is_set_neutralList()) {
      List<String> __this__neutralList = new ArrayList<String>(other.neutralList);
      this.neutralList = __this__neutralList;
    }
  }

  public CloudFeature deepCopy() {
    return new CloudFeature(this);
  }

  public void clear() {
    if (this.goodList != null) {
      this.goodList.clear();
    }
    if (this.badList != null) {
      this.badList.clear();
    }
    if (this.neutralList != null) {
      this.neutralList.clear();
    }
  }

  public int get_goodList_size() {
    return (this.goodList == null) ? 0 : this.goodList.size();
  }

  public java.util.Iterator<String> get_goodList_iterator() {
    return (this.goodList == null) ? null : this.goodList.iterator();
  }

  public void add_to_goodList(String elem) {
    if (this.goodList == null) {
      this.goodList = new ArrayList<String>();
    }
    this.goodList.add(elem);
  }

  public List<String> get_goodList() {
    return this.goodList;
  }

  public void set_goodList(List<String> goodList) {
    this.goodList = goodList;
  }

  public void unset_goodList() {
    this.goodList = null;
  }

  /** Returns true if field goodList is set (has been assigned a value) and false otherwise */
  public boolean is_set_goodList() {
    return this.goodList != null;
  }

  public void set_goodList_isSet(boolean value) {
    if (!value) {
      this.goodList = null;
    }
  }

  public int get_badList_size() {
    return (this.badList == null) ? 0 : this.badList.size();
  }

  public java.util.Iterator<String> get_badList_iterator() {
    return (this.badList == null) ? null : this.badList.iterator();
  }

  public void add_to_badList(String elem) {
    if (this.badList == null) {
      this.badList = new ArrayList<String>();
    }
    this.badList.add(elem);
  }

  public List<String> get_badList() {
    return this.badList;
  }

  public void set_badList(List<String> badList) {
    this.badList = badList;
  }

  public void unset_badList() {
    this.badList = null;
  }

  /** Returns true if field badList is set (has been assigned a value) and false otherwise */
  public boolean is_set_badList() {
    return this.badList != null;
  }

  public void set_badList_isSet(boolean value) {
    if (!value) {
      this.badList = null;
    }
  }

  public int get_neutralList_size() {
    return (this.neutralList == null) ? 0 : this.neutralList.size();
  }

  public java.util.Iterator<String> get_neutralList_iterator() {
    return (this.neutralList == null) ? null : this.neutralList.iterator();
  }

  public void add_to_neutralList(String elem) {
    if (this.neutralList == null) {
      this.neutralList = new ArrayList<String>();
    }
    this.neutralList.add(elem);
  }

  public List<String> get_neutralList() {
    return this.neutralList;
  }

  public void set_neutralList(List<String> neutralList) {
    this.neutralList = neutralList;
  }

  public void unset_neutralList() {
    this.neutralList = null;
  }

  /** Returns true if field neutralList is set (has been assigned a value) and false otherwise */
  public boolean is_set_neutralList() {
    return this.neutralList != null;
  }

  public void set_neutralList_isSet(boolean value) {
    if (!value) {
      this.neutralList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOOD_LIST:
      if (value == null) {
        unset_goodList();
      } else {
        set_goodList((List<String>)value);
      }
      break;

    case BAD_LIST:
      if (value == null) {
        unset_badList();
      } else {
        set_badList((List<String>)value);
      }
      break;

    case NEUTRAL_LIST:
      if (value == null) {
        unset_neutralList();
      } else {
        set_neutralList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOOD_LIST:
      return get_goodList();

    case BAD_LIST:
      return get_badList();

    case NEUTRAL_LIST:
      return get_neutralList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOOD_LIST:
      return is_set_goodList();
    case BAD_LIST:
      return is_set_badList();
    case NEUTRAL_LIST:
      return is_set_neutralList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CloudFeature)
      return this.equals((CloudFeature)that);
    return false;
  }

  public boolean equals(CloudFeature that) {
    if (that == null)
      return false;

    boolean this_present_goodList = true && this.is_set_goodList();
    boolean that_present_goodList = true && that.is_set_goodList();
    if (this_present_goodList || that_present_goodList) {
      if (!(this_present_goodList && that_present_goodList))
        return false;
      if (!this.goodList.equals(that.goodList))
        return false;
    }

    boolean this_present_badList = true && this.is_set_badList();
    boolean that_present_badList = true && that.is_set_badList();
    if (this_present_badList || that_present_badList) {
      if (!(this_present_badList && that_present_badList))
        return false;
      if (!this.badList.equals(that.badList))
        return false;
    }

    boolean this_present_neutralList = true && this.is_set_neutralList();
    boolean that_present_neutralList = true && that.is_set_neutralList();
    if (this_present_neutralList || that_present_neutralList) {
      if (!(this_present_neutralList && that_present_neutralList))
        return false;
      if (!this.neutralList.equals(that.neutralList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_goodList = true && (is_set_goodList());
    list.add(present_goodList);
    if (present_goodList)
      list.add(goodList);

    boolean present_badList = true && (is_set_badList());
    list.add(present_badList);
    if (present_badList)
      list.add(badList);

    boolean present_neutralList = true && (is_set_neutralList());
    list.add(present_neutralList);
    if (present_neutralList)
      list.add(neutralList);

    return list.hashCode();
  }

  @Override
  public int compareTo(CloudFeature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_goodList()).compareTo(other.is_set_goodList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_goodList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodList, other.goodList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_badList()).compareTo(other.is_set_badList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_badList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badList, other.badList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_neutralList()).compareTo(other.is_set_neutralList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_neutralList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neutralList, other.neutralList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CloudFeature(");
    boolean first = true;

    sb.append("goodList:");
    if (this.goodList == null) {
      sb.append("null");
    } else {
      sb.append(this.goodList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("badList:");
    if (this.badList == null) {
      sb.append("null");
    } else {
      sb.append(this.badList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("neutralList:");
    if (this.neutralList == null) {
      sb.append("null");
    } else {
      sb.append(this.neutralList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_goodList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'goodList' is unset! Struct:" + toString());
    }

    if (!is_set_badList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'badList' is unset! Struct:" + toString());
    }

    if (!is_set_neutralList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'neutralList' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class CloudFeatureStandardSchemeFactory implements SchemeFactory {
    public CloudFeatureStandardScheme getScheme() {
      return new CloudFeatureStandardScheme();
    }
  }

  private static class CloudFeatureStandardScheme extends StandardScheme<CloudFeature> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CloudFeature struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOOD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                if (struct.goodList == null) {
                  struct.goodList = new ArrayList<String>(_list256.size);
                }
                String _elem257 = null;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = iprot.readString();
                  struct.goodList.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.set_goodList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BAD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list259 = iprot.readListBegin();
                if (struct.badList == null) {
                  struct.badList = new ArrayList<String>(_list259.size);
                }
                String _elem260 = null;
                for (int _i261 = 0; _i261 < _list259.size; ++_i261)
                {
                  _elem260 = iprot.readString();
                  struct.badList.add(_elem260);
                }
                iprot.readListEnd();
              }
              struct.set_badList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEUTRAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                if (struct.neutralList == null) {
                  struct.neutralList = new ArrayList<String>(_list262.size);
                }
                String _elem263 = null;
                for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                {
                  _elem263 = iprot.readString();
                  struct.neutralList.add(_elem263);
                }
                iprot.readListEnd();
              }
              struct.set_neutralList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CloudFeature struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.goodList != null) {
        oprot.writeFieldBegin(GOOD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.goodList.size()));
          for (String _iter265 : struct.goodList)
          {
            oprot.writeString(_iter265);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.badList != null) {
        oprot.writeFieldBegin(BAD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.badList.size()));
          for (String _iter266 : struct.badList)
          {
            oprot.writeString(_iter266);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.neutralList != null) {
        oprot.writeFieldBegin(NEUTRAL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.neutralList.size()));
          for (String _iter267 : struct.neutralList)
          {
            oprot.writeString(_iter267);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CloudFeatureTupleSchemeFactory implements SchemeFactory {
    public CloudFeatureTupleScheme getScheme() {
      return new CloudFeatureTupleScheme();
    }
  }

  private static class CloudFeatureTupleScheme extends TupleScheme<CloudFeature> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CloudFeature struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.goodList.size());
        for (String _iter268 : struct.goodList)
        {
          oprot.writeString(_iter268);
        }
      }
      {
        oprot.writeI32(struct.badList.size());
        for (String _iter269 : struct.badList)
        {
          oprot.writeString(_iter269);
        }
      }
      {
        oprot.writeI32(struct.neutralList.size());
        for (String _iter270 : struct.neutralList)
        {
          oprot.writeString(_iter270);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CloudFeature struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.goodList == null) {
          struct.goodList = new ArrayList<String>(_list271.size);
        }
        String _elem272 = null;
        for (int _i273 = 0; _i273 < _list271.size; ++_i273)
        {
          _elem272 = iprot.readString();
          struct.goodList.add(_elem272);
        }
      }
      struct.set_goodList_isSet(true);
      {
        org.apache.thrift.protocol.TList _list274 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.badList == null) {
          struct.badList = new ArrayList<String>(_list274.size);
        }
        String _elem275 = null;
        for (int _i276 = 0; _i276 < _list274.size; ++_i276)
        {
          _elem275 = iprot.readString();
          struct.badList.add(_elem275);
        }
      }
      struct.set_badList_isSet(true);
      {
        org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.neutralList == null) {
          struct.neutralList = new ArrayList<String>(_list277.size);
        }
        String _elem278 = null;
        for (int _i279 = 0; _i279 < _list277.size; ++_i279)
        {
          _elem278 = iprot.readString();
          struct.neutralList.add(_elem278);
        }
      }
      struct.set_neutralList_isSet(true);
    }
  }

}

