/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class DateTransfer implements org.apache.thrift.TBase<DateTransfer, DateTransfer._Fields>, java.io.Serializable, Cloneable, Comparable<DateTransfer>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateTransfer");

  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSFERS_FIELD_DESC = new org.apache.thrift.protocol.TField("transfers", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateTransferStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateTransferTupleSchemeFactory());
  }

  private String actionTime; // required
  private List<AITransfer> transfers; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeString(actionTime);
    out.writeTypedList(transfers);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public DateTransfer(android.os.Parcel in) {
    this.actionTime= in.readString();
    this.transfers = new ArrayList<AITransfer>();
    in.readTypedList(this.transfers, AITransfer.CREATOR);
  }

  public static final android.os.Parcelable.Creator<DateTransfer> CREATOR = new android.os.Parcelable.Creator<DateTransfer>() {
    @Override
    public DateTransfer[] newArray(int size) {
      return new DateTransfer[size];
    }

    @Override
    public DateTransfer createFromParcel(android.os.Parcel in) {
      return new DateTransfer(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTION_TIME((short)1, "actionTime"),
    TRANSFERS((short)2, "transfers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_TIME
          return ACTION_TIME;
        case 2: // TRANSFERS
          return TRANSFERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFERS, new org.apache.thrift.meta_data.FieldMetaData("transfers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AITransfer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateTransfer.class, metaDataMap);
  }

  public DateTransfer() {
  }

  public DateTransfer(
    String actionTime,
    List<AITransfer> transfers)
  {
    this();
    this.actionTime = actionTime;
    this.transfers = transfers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateTransfer(DateTransfer other) {
    if (other.is_set_actionTime()) {
      this.actionTime = other.actionTime;
    }
    if (other.is_set_transfers()) {
      List<AITransfer> __this__transfers = new ArrayList<AITransfer>(other.transfers.size());
      for (AITransfer other_element : other.transfers) {
        __this__transfers.add(new AITransfer(other_element));
      }
      this.transfers = __this__transfers;
    }
  }

  public DateTransfer deepCopy() {
    return new DateTransfer(this);
  }

  public void clear() {
    this.actionTime = null;
    if (this.transfers != null) {
      this.transfers.clear();
    }
  }

  public String get_actionTime() {
    return this.actionTime;
  }

  public void set_actionTime(String actionTime) {
    this.actionTime = actionTime;
  }

  public void unset_actionTime() {
    this.actionTime = null;
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_actionTime() {
    return this.actionTime != null;
  }

  public void set_actionTime_isSet(boolean value) {
    if (!value) {
      this.actionTime = null;
    }
  }

  public int get_transfers_size() {
    return (this.transfers == null) ? 0 : this.transfers.size();
  }

  public java.util.Iterator<AITransfer> get_transfers_iterator() {
    return (this.transfers == null) ? null : this.transfers.iterator();
  }

  public void add_to_transfers(AITransfer elem) {
    if (this.transfers == null) {
      this.transfers = new ArrayList<AITransfer>();
    }
    this.transfers.add(elem);
  }

  public List<AITransfer> get_transfers() {
    return this.transfers;
  }

  public void set_transfers(List<AITransfer> transfers) {
    this.transfers = transfers;
  }

  public void unset_transfers() {
    this.transfers = null;
  }

  /** Returns true if field transfers is set (has been assigned a value) and false otherwise */
  public boolean is_set_transfers() {
    return this.transfers != null;
  }

  public void set_transfers_isSet(boolean value) {
    if (!value) {
      this.transfers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTION_TIME:
      if (value == null) {
        unset_actionTime();
      } else {
        set_actionTime((String)value);
      }
      break;

    case TRANSFERS:
      if (value == null) {
        unset_transfers();
      } else {
        set_transfers((List<AITransfer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_TIME:
      return get_actionTime();

    case TRANSFERS:
      return get_transfers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTION_TIME:
      return is_set_actionTime();
    case TRANSFERS:
      return is_set_transfers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateTransfer)
      return this.equals((DateTransfer)that);
    return false;
  }

  public boolean equals(DateTransfer that) {
    if (that == null)
      return false;

    boolean this_present_actionTime = true && this.is_set_actionTime();
    boolean that_present_actionTime = true && that.is_set_actionTime();
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (!this.actionTime.equals(that.actionTime))
        return false;
    }

    boolean this_present_transfers = true && this.is_set_transfers();
    boolean that_present_transfers = true && that.is_set_transfers();
    if (this_present_transfers || that_present_transfers) {
      if (!(this_present_transfers && that_present_transfers))
        return false;
      if (!this.transfers.equals(that.transfers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_actionTime = true && (is_set_actionTime());
    list.add(present_actionTime);
    if (present_actionTime)
      list.add(actionTime);

    boolean present_transfers = true && (is_set_transfers());
    list.add(present_transfers);
    if (present_transfers)
      list.add(transfers);

    return list.hashCode();
  }

  @Override
  public int compareTo(DateTransfer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_actionTime()).compareTo(other.is_set_actionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_actionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, other.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_transfers()).compareTo(other.is_set_transfers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_transfers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfers, other.transfers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DateTransfer(");
    boolean first = true;

    sb.append("actionTime:");
    if (this.actionTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actionTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transfers:");
    if (this.transfers == null) {
      sb.append("null");
    } else {
      sb.append(this.transfers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_actionTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actionTime' is unset! Struct:" + toString());
    }

    if (!is_set_transfers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transfers' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class DateTransferStandardSchemeFactory implements SchemeFactory {
    public DateTransferStandardScheme getScheme() {
      return new DateTransferStandardScheme();
    }
  }

  private static class DateTransferStandardScheme extends StandardScheme<DateTransfer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateTransfer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionTime = iprot.readString();
              struct.set_actionTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSFERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list352 = iprot.readListBegin();
                if (struct.transfers == null) {
                  struct.transfers = new ArrayList<AITransfer>(_list352.size);
                }
                AITransfer _elem353 = new AITransfer();
                for (int _i354 = 0; _i354 < _list352.size; ++_i354)
                {
                  if (_elem353 == null) {
                    _elem353 = new AITransfer();
                  }
                  _elem353.read(iprot);
                  struct.transfers.add(_elem353);
                  _elem353 = null;
                }
                iprot.readListEnd();
              }
              struct.set_transfers_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateTransfer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionTime != null) {
        oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
        oprot.writeString(struct.actionTime);
        oprot.writeFieldEnd();
      }
      if (struct.transfers != null) {
        oprot.writeFieldBegin(TRANSFERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transfers.size()));
          for (AITransfer _iter355 : struct.transfers)
          {
            _iter355.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateTransferTupleSchemeFactory implements SchemeFactory {
    public DateTransferTupleScheme getScheme() {
      return new DateTransferTupleScheme();
    }
  }

  private static class DateTransferTupleScheme extends TupleScheme<DateTransfer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DateTransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.actionTime);
      {
        oprot.writeI32(struct.transfers.size());
        for (AITransfer _iter356 : struct.transfers)
        {
          _iter356.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DateTransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.actionTime = iprot.readString();
      struct.set_actionTime_isSet(true);
      {
        org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.transfers == null) {
          struct.transfers = new ArrayList<AITransfer>(_list357.size);
        }
        AITransfer _elem358 = new AITransfer();
        for (int _i359 = 0; _i359 < _list357.size; ++_i359)
        {
          if (_elem358 == null) {
            _elem358 = new AITransfer();
          }
          _elem358.read(iprot);
          struct.transfers.add(_elem358);
          _elem358 = null;
        }
      }
      struct.set_transfers_isSet(true);
    }
  }

}

