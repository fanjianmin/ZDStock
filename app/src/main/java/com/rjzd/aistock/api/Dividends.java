/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 分红送配
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Dividends implements org.apache.thrift.TBase<Dividends, Dividends._Fields>, java.io.Serializable, Cloneable, Comparable<Dividends>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dividends");

  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField XR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("xrDate", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DividendsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DividendsTupleSchemeFactory());
  }

  private String year; // required
  private String plan; // required
  private String xrDate; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeString(year);
    out.writeString(plan);
    out.writeString(xrDate);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Dividends(android.os.Parcel in) {
    this.year= in.readString();
    this.plan= in.readString();
    this.xrDate= in.readString();
  }

  public static final android.os.Parcelable.Creator<Dividends> CREATOR = new android.os.Parcelable.Creator<Dividends>() {
    @Override
    public Dividends[] newArray(int size) {
      return new Dividends[size];
    }

    @Override
    public Dividends createFromParcel(android.os.Parcel in) {
      return new Dividends(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YEAR((short)1, "year"),
    PLAN((short)2, "plan"),
    XR_DATE((short)3, "xrDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YEAR
          return YEAR;
        case 2: // PLAN
          return PLAN;
        case 3: // XR_DATE
          return XR_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XR_DATE, new org.apache.thrift.meta_data.FieldMetaData("xrDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dividends.class, metaDataMap);
  }

  public Dividends() {
  }

  public Dividends(
    String year,
    String plan,
    String xrDate)
  {
    this();
    this.year = year;
    this.plan = plan;
    this.xrDate = xrDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dividends(Dividends other) {
    if (other.is_set_year()) {
      this.year = other.year;
    }
    if (other.is_set_plan()) {
      this.plan = other.plan;
    }
    if (other.is_set_xrDate()) {
      this.xrDate = other.xrDate;
    }
  }

  public Dividends deepCopy() {
    return new Dividends(this);
  }

  public void clear() {
    this.year = null;
    this.plan = null;
    this.xrDate = null;
  }

  public String get_year() {
    return this.year;
  }

  public void set_year(String year) {
    this.year = year;
  }

  public void unset_year() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean is_set_year() {
    return this.year != null;
  }

  public void set_year_isSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public String get_plan() {
    return this.plan;
  }

  public void set_plan(String plan) {
    this.plan = plan;
  }

  public void unset_plan() {
    this.plan = null;
  }

  /** Returns true if field plan is set (has been assigned a value) and false otherwise */
  public boolean is_set_plan() {
    return this.plan != null;
  }

  public void set_plan_isSet(boolean value) {
    if (!value) {
      this.plan = null;
    }
  }

  public String get_xrDate() {
    return this.xrDate;
  }

  public void set_xrDate(String xrDate) {
    this.xrDate = xrDate;
  }

  public void unset_xrDate() {
    this.xrDate = null;
  }

  /** Returns true if field xrDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_xrDate() {
    return this.xrDate != null;
  }

  public void set_xrDate_isSet(boolean value) {
    if (!value) {
      this.xrDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YEAR:
      if (value == null) {
        unset_year();
      } else {
        set_year((String)value);
      }
      break;

    case PLAN:
      if (value == null) {
        unset_plan();
      } else {
        set_plan((String)value);
      }
      break;

    case XR_DATE:
      if (value == null) {
        unset_xrDate();
      } else {
        set_xrDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YEAR:
      return get_year();

    case PLAN:
      return get_plan();

    case XR_DATE:
      return get_xrDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YEAR:
      return is_set_year();
    case PLAN:
      return is_set_plan();
    case XR_DATE:
      return is_set_xrDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dividends)
      return this.equals((Dividends)that);
    return false;
  }

  public boolean equals(Dividends that) {
    if (that == null)
      return false;

    boolean this_present_year = true && this.is_set_year();
    boolean that_present_year = true && that.is_set_year();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_plan = true && this.is_set_plan();
    boolean that_present_plan = true && that.is_set_plan();
    if (this_present_plan || that_present_plan) {
      if (!(this_present_plan && that_present_plan))
        return false;
      if (!this.plan.equals(that.plan))
        return false;
    }

    boolean this_present_xrDate = true && this.is_set_xrDate();
    boolean that_present_xrDate = true && that.is_set_xrDate();
    if (this_present_xrDate || that_present_xrDate) {
      if (!(this_present_xrDate && that_present_xrDate))
        return false;
      if (!this.xrDate.equals(that.xrDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_year = true && (is_set_year());
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_plan = true && (is_set_plan());
    list.add(present_plan);
    if (present_plan)
      list.add(plan);

    boolean present_xrDate = true && (is_set_xrDate());
    list.add(present_xrDate);
    if (present_xrDate)
      list.add(xrDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(Dividends other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_year()).compareTo(other.is_set_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_plan()).compareTo(other.is_set_plan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_plan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_xrDate()).compareTo(other.is_set_xrDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_xrDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xrDate, other.xrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dividends(");
    boolean first = true;

    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plan:");
    if (this.plan == null) {
      sb.append("null");
    } else {
      sb.append(this.plan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xrDate:");
    if (this.xrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.xrDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_year()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' is unset! Struct:" + toString());
    }

    if (!is_set_plan()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'plan' is unset! Struct:" + toString());
    }

    if (!is_set_xrDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xrDate' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class DividendsStandardSchemeFactory implements SchemeFactory {
    public DividendsStandardScheme getScheme() {
      return new DividendsStandardScheme();
    }
  }

  private static class DividendsStandardScheme extends StandardScheme<Dividends> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dividends struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.set_year_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plan = iprot.readString();
              struct.set_plan_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xrDate = iprot.readString();
              struct.set_xrDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dividends struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      if (struct.plan != null) {
        oprot.writeFieldBegin(PLAN_FIELD_DESC);
        oprot.writeString(struct.plan);
        oprot.writeFieldEnd();
      }
      if (struct.xrDate != null) {
        oprot.writeFieldBegin(XR_DATE_FIELD_DESC);
        oprot.writeString(struct.xrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DividendsTupleSchemeFactory implements SchemeFactory {
    public DividendsTupleScheme getScheme() {
      return new DividendsTupleScheme();
    }
  }

  private static class DividendsTupleScheme extends TupleScheme<Dividends> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dividends struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.year);
      oprot.writeString(struct.plan);
      oprot.writeString(struct.xrDate);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dividends struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.year = iprot.readString();
      struct.set_year_isSet(true);
      struct.plan = iprot.readString();
      struct.set_plan_isSet(true);
      struct.xrDate = iprot.readString();
      struct.set_xrDate_isSet(true);
    }
  }

}

