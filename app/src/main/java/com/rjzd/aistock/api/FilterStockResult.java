/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 自定义选股-满足条件的股票
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class FilterStockResult implements org.apache.thrift.TBase<FilterStockResult, FilterStockResult._Fields>, java.io.Serializable, Cloneable, Comparable<FilterStockResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FilterStockResult");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("close", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_OF5D_FIELD_DESC = new org.apache.thrift.protocol.TField("amountOf5d", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField AMOUNT_OF20D_FIELD_DESC = new org.apache.thrift.protocol.TField("amountOf20d", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AMOUNT_OF60D_FIELD_DESC = new org.apache.thrift.protocol.TField("amountOf60d", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField AMOUNT_OF120D_FIELD_DESC = new org.apache.thrift.protocol.TField("amountOf120d", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField AMOUNT_OF250D_FIELD_DESC = new org.apache.thrift.protocol.TField("amountOf250d", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RANGE_OF5D_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOf5d", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RANGE_OF20D_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOf20d", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField RANGE_OF60D_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOf60d", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField RANGE_OF120D_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOf120d", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RANGE_OF250D_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOf250d", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField TURNOVER_OF5D_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverOf5d", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField TURNOVER_OF20D_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverOf20d", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField TURNOVER_OF60D_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverOf60d", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField TURNOVER_OF120D_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverOf120d", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField TURNOVER_OF250D_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverOf250d", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField RISE_STAY_FIELD_DESC = new org.apache.thrift.protocol.TField("riseStay", org.apache.thrift.protocol.TType.I16, (short)22);
  private static final org.apache.thrift.protocol.TField FALL_STAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fallStay", org.apache.thrift.protocol.TType.I16, (short)23);
  private static final org.apache.thrift.protocol.TField VALUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("valuation", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CIRCULATION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("circulationValue", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitude", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_OF5D_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitudeOf5d", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_OF20D_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitudeOf20d", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_OF60D_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitudeOf60d", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_OF120D_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitudeOf120d", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_OF250D_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitudeOf250d", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField LISTED_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("listedDays", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("industry", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField CONCEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("concept", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FilterStockResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FilterStockResultTupleSchemeFactory());
  }

  private String name; // required
  private String code; // required
  private double close; // required
  private double amount; // optional
  private double amountOf5d; // optional
  private double amountOf20d; // optional
  private double amountOf60d; // optional
  private double amountOf120d; // optional
  private double amountOf250d; // optional
  private double range; // required
  private double rangeOf5d; // optional
  private double rangeOf20d; // optional
  private double rangeOf60d; // optional
  private double rangeOf120d; // optional
  private double rangeOf250d; // optional
  private double turnover; // optional
  private double turnoverOf5d; // optional
  private double turnoverOf20d; // optional
  private double turnoverOf60d; // optional
  private double turnoverOf120d; // optional
  private double turnoverOf250d; // optional
  private short riseStay; // optional
  private short fallStay; // optional
  private double valuation; // optional
  private double circulationValue; // optional
  private double amplitude; // optional
  private double amplitudeOf5d; // optional
  private double amplitudeOf20d; // optional
  private double amplitudeOf60d; // optional
  private double amplitudeOf120d; // optional
  private double amplitudeOf250d; // optional
  private int listedDays; // optional
  private String industry; // optional
  private String concept; // optional
  private int pageNum; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: int
    out.writeInt(__isset_bitfield);

    out.writeString(name);
    out.writeString(code);
    out.writeDouble(close);
    out.writeDouble(amount);
    out.writeDouble(amountOf5d);
    out.writeDouble(amountOf20d);
    out.writeDouble(amountOf60d);
    out.writeDouble(amountOf120d);
    out.writeDouble(amountOf250d);
    out.writeDouble(range);
    out.writeDouble(rangeOf5d);
    out.writeDouble(rangeOf20d);
    out.writeDouble(rangeOf60d);
    out.writeDouble(rangeOf120d);
    out.writeDouble(rangeOf250d);
    out.writeDouble(turnover);
    out.writeDouble(turnoverOf5d);
    out.writeDouble(turnoverOf20d);
    out.writeDouble(turnoverOf60d);
    out.writeDouble(turnoverOf120d);
    out.writeDouble(turnoverOf250d);
    out.writeInt(new Short(riseStay).intValue());
    out.writeInt(new Short(fallStay).intValue());
    out.writeDouble(valuation);
    out.writeDouble(circulationValue);
    out.writeDouble(amplitude);
    out.writeDouble(amplitudeOf5d);
    out.writeDouble(amplitudeOf20d);
    out.writeDouble(amplitudeOf60d);
    out.writeDouble(amplitudeOf120d);
    out.writeDouble(amplitudeOf250d);
    out.writeInt(listedDays);
    out.writeString(industry);
    out.writeString(concept);
    out.writeInt(pageNum);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public FilterStockResult(android.os.Parcel in) {
    //primitive bitfield of type: int
    __isset_bitfield = in.readInt();

    this.name= in.readString();
    this.code= in.readString();
    this.close = in.readDouble();
    this.amount = in.readDouble();
    this.amountOf5d = in.readDouble();
    this.amountOf20d = in.readDouble();
    this.amountOf60d = in.readDouble();
    this.amountOf120d = in.readDouble();
    this.amountOf250d = in.readDouble();
    this.range = in.readDouble();
    this.rangeOf5d = in.readDouble();
    this.rangeOf20d = in.readDouble();
    this.rangeOf60d = in.readDouble();
    this.rangeOf120d = in.readDouble();
    this.rangeOf250d = in.readDouble();
    this.turnover = in.readDouble();
    this.turnoverOf5d = in.readDouble();
    this.turnoverOf20d = in.readDouble();
    this.turnoverOf60d = in.readDouble();
    this.turnoverOf120d = in.readDouble();
    this.turnoverOf250d = in.readDouble();
    this.riseStay = (short) in.readInt();
    this.fallStay = (short) in.readInt();
    this.valuation = in.readDouble();
    this.circulationValue = in.readDouble();
    this.amplitude = in.readDouble();
    this.amplitudeOf5d = in.readDouble();
    this.amplitudeOf20d = in.readDouble();
    this.amplitudeOf60d = in.readDouble();
    this.amplitudeOf120d = in.readDouble();
    this.amplitudeOf250d = in.readDouble();
    this.listedDays = in.readInt();
    this.industry= in.readString();
    this.concept= in.readString();
    this.pageNum = in.readInt();
  }

  public static final android.os.Parcelable.Creator<FilterStockResult> CREATOR = new android.os.Parcelable.Creator<FilterStockResult>() {
    @Override
    public FilterStockResult[] newArray(int size) {
      return new FilterStockResult[size];
    }

    @Override
    public FilterStockResult createFromParcel(android.os.Parcel in) {
      return new FilterStockResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    CODE((short)2, "code"),
    CLOSE((short)3, "close"),
    AMOUNT((short)4, "amount"),
    AMOUNT_OF5D((short)5, "amountOf5d"),
    AMOUNT_OF20D((short)6, "amountOf20d"),
    AMOUNT_OF60D((short)7, "amountOf60d"),
    AMOUNT_OF120D((short)8, "amountOf120d"),
    AMOUNT_OF250D((short)9, "amountOf250d"),
    RANGE((short)10, "range"),
    RANGE_OF5D((short)11, "rangeOf5d"),
    RANGE_OF20D((short)12, "rangeOf20d"),
    RANGE_OF60D((short)13, "rangeOf60d"),
    RANGE_OF120D((short)14, "rangeOf120d"),
    RANGE_OF250D((short)15, "rangeOf250d"),
    TURNOVER((short)16, "turnover"),
    TURNOVER_OF5D((short)17, "turnoverOf5d"),
    TURNOVER_OF20D((short)18, "turnoverOf20d"),
    TURNOVER_OF60D((short)19, "turnoverOf60d"),
    TURNOVER_OF120D((short)20, "turnoverOf120d"),
    TURNOVER_OF250D((short)21, "turnoverOf250d"),
    RISE_STAY((short)22, "riseStay"),
    FALL_STAY((short)23, "fallStay"),
    VALUATION((short)24, "valuation"),
    CIRCULATION_VALUE((short)25, "circulationValue"),
    AMPLITUDE((short)26, "amplitude"),
    AMPLITUDE_OF5D((short)27, "amplitudeOf5d"),
    AMPLITUDE_OF20D((short)28, "amplitudeOf20d"),
    AMPLITUDE_OF60D((short)29, "amplitudeOf60d"),
    AMPLITUDE_OF120D((short)30, "amplitudeOf120d"),
    AMPLITUDE_OF250D((short)31, "amplitudeOf250d"),
    LISTED_DAYS((short)32, "listedDays"),
    INDUSTRY((short)33, "industry"),
    CONCEPT((short)34, "concept"),
    PAGE_NUM((short)35, "pageNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CODE
          return CODE;
        case 3: // CLOSE
          return CLOSE;
        case 4: // AMOUNT
          return AMOUNT;
        case 5: // AMOUNT_OF5D
          return AMOUNT_OF5D;
        case 6: // AMOUNT_OF20D
          return AMOUNT_OF20D;
        case 7: // AMOUNT_OF60D
          return AMOUNT_OF60D;
        case 8: // AMOUNT_OF120D
          return AMOUNT_OF120D;
        case 9: // AMOUNT_OF250D
          return AMOUNT_OF250D;
        case 10: // RANGE
          return RANGE;
        case 11: // RANGE_OF5D
          return RANGE_OF5D;
        case 12: // RANGE_OF20D
          return RANGE_OF20D;
        case 13: // RANGE_OF60D
          return RANGE_OF60D;
        case 14: // RANGE_OF120D
          return RANGE_OF120D;
        case 15: // RANGE_OF250D
          return RANGE_OF250D;
        case 16: // TURNOVER
          return TURNOVER;
        case 17: // TURNOVER_OF5D
          return TURNOVER_OF5D;
        case 18: // TURNOVER_OF20D
          return TURNOVER_OF20D;
        case 19: // TURNOVER_OF60D
          return TURNOVER_OF60D;
        case 20: // TURNOVER_OF120D
          return TURNOVER_OF120D;
        case 21: // TURNOVER_OF250D
          return TURNOVER_OF250D;
        case 22: // RISE_STAY
          return RISE_STAY;
        case 23: // FALL_STAY
          return FALL_STAY;
        case 24: // VALUATION
          return VALUATION;
        case 25: // CIRCULATION_VALUE
          return CIRCULATION_VALUE;
        case 26: // AMPLITUDE
          return AMPLITUDE;
        case 27: // AMPLITUDE_OF5D
          return AMPLITUDE_OF5D;
        case 28: // AMPLITUDE_OF20D
          return AMPLITUDE_OF20D;
        case 29: // AMPLITUDE_OF60D
          return AMPLITUDE_OF60D;
        case 30: // AMPLITUDE_OF120D
          return AMPLITUDE_OF120D;
        case 31: // AMPLITUDE_OF250D
          return AMPLITUDE_OF250D;
        case 32: // LISTED_DAYS
          return LISTED_DAYS;
        case 33: // INDUSTRY
          return INDUSTRY;
        case 34: // CONCEPT
          return CONCEPT;
        case 35: // PAGE_NUM
          return PAGE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLOSE_ISSET_ID = 0;
  private static final int __AMOUNT_ISSET_ID = 1;
  private static final int __AMOUNTOF5D_ISSET_ID = 2;
  private static final int __AMOUNTOF20D_ISSET_ID = 3;
  private static final int __AMOUNTOF60D_ISSET_ID = 4;
  private static final int __AMOUNTOF120D_ISSET_ID = 5;
  private static final int __AMOUNTOF250D_ISSET_ID = 6;
  private static final int __RANGE_ISSET_ID = 7;
  private static final int __RANGEOF5D_ISSET_ID = 8;
  private static final int __RANGEOF20D_ISSET_ID = 9;
  private static final int __RANGEOF60D_ISSET_ID = 10;
  private static final int __RANGEOF120D_ISSET_ID = 11;
  private static final int __RANGEOF250D_ISSET_ID = 12;
  private static final int __TURNOVER_ISSET_ID = 13;
  private static final int __TURNOVEROF5D_ISSET_ID = 14;
  private static final int __TURNOVEROF20D_ISSET_ID = 15;
  private static final int __TURNOVEROF60D_ISSET_ID = 16;
  private static final int __TURNOVEROF120D_ISSET_ID = 17;
  private static final int __TURNOVEROF250D_ISSET_ID = 18;
  private static final int __RISESTAY_ISSET_ID = 19;
  private static final int __FALLSTAY_ISSET_ID = 20;
  private static final int __VALUATION_ISSET_ID = 21;
  private static final int __CIRCULATIONVALUE_ISSET_ID = 22;
  private static final int __AMPLITUDE_ISSET_ID = 23;
  private static final int __AMPLITUDEOF5D_ISSET_ID = 24;
  private static final int __AMPLITUDEOF20D_ISSET_ID = 25;
  private static final int __AMPLITUDEOF60D_ISSET_ID = 26;
  private static final int __AMPLITUDEOF120D_ISSET_ID = 27;
  private static final int __AMPLITUDEOF250D_ISSET_ID = 28;
  private static final int __LISTEDDAYS_ISSET_ID = 29;
  private static final int __PAGENUM_ISSET_ID = 30;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AMOUNT,_Fields.AMOUNT_OF5D,_Fields.AMOUNT_OF20D,_Fields.AMOUNT_OF60D,_Fields.AMOUNT_OF120D,_Fields.AMOUNT_OF250D,_Fields.RANGE_OF5D,_Fields.RANGE_OF20D,_Fields.RANGE_OF60D,_Fields.RANGE_OF120D,_Fields.RANGE_OF250D,_Fields.TURNOVER,_Fields.TURNOVER_OF5D,_Fields.TURNOVER_OF20D,_Fields.TURNOVER_OF60D,_Fields.TURNOVER_OF120D,_Fields.TURNOVER_OF250D,_Fields.RISE_STAY,_Fields.FALL_STAY,_Fields.VALUATION,_Fields.CIRCULATION_VALUE,_Fields.AMPLITUDE,_Fields.AMPLITUDE_OF5D,_Fields.AMPLITUDE_OF20D,_Fields.AMPLITUDE_OF60D,_Fields.AMPLITUDE_OF120D,_Fields.AMPLITUDE_OF250D,_Fields.LISTED_DAYS,_Fields.INDUSTRY,_Fields.CONCEPT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSE, new org.apache.thrift.meta_data.FieldMetaData("close", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT_OF5D, new org.apache.thrift.meta_data.FieldMetaData("amountOf5d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT_OF20D, new org.apache.thrift.meta_data.FieldMetaData("amountOf20d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT_OF60D, new org.apache.thrift.meta_data.FieldMetaData("amountOf60d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT_OF120D, new org.apache.thrift.meta_data.FieldMetaData("amountOf120d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT_OF250D, new org.apache.thrift.meta_data.FieldMetaData("amountOf250d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_OF5D, new org.apache.thrift.meta_data.FieldMetaData("rangeOf5d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_OF20D, new org.apache.thrift.meta_data.FieldMetaData("rangeOf20d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_OF60D, new org.apache.thrift.meta_data.FieldMetaData("rangeOf60d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_OF120D, new org.apache.thrift.meta_data.FieldMetaData("rangeOf120d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_OF250D, new org.apache.thrift.meta_data.FieldMetaData("rangeOf250d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_OF5D, new org.apache.thrift.meta_data.FieldMetaData("turnoverOf5d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_OF20D, new org.apache.thrift.meta_data.FieldMetaData("turnoverOf20d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_OF60D, new org.apache.thrift.meta_data.FieldMetaData("turnoverOf60d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_OF120D, new org.apache.thrift.meta_data.FieldMetaData("turnoverOf120d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_OF250D, new org.apache.thrift.meta_data.FieldMetaData("turnoverOf250d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISE_STAY, new org.apache.thrift.meta_data.FieldMetaData("riseStay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FALL_STAY, new org.apache.thrift.meta_data.FieldMetaData("fallStay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VALUATION, new org.apache.thrift.meta_data.FieldMetaData("valuation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CIRCULATION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("circulationValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE, new org.apache.thrift.meta_data.FieldMetaData("amplitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE_OF5D, new org.apache.thrift.meta_data.FieldMetaData("amplitudeOf5d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE_OF20D, new org.apache.thrift.meta_data.FieldMetaData("amplitudeOf20d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE_OF60D, new org.apache.thrift.meta_data.FieldMetaData("amplitudeOf60d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE_OF120D, new org.apache.thrift.meta_data.FieldMetaData("amplitudeOf120d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMPLITUDE_OF250D, new org.apache.thrift.meta_data.FieldMetaData("amplitudeOf250d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LISTED_DAYS, new org.apache.thrift.meta_data.FieldMetaData("listedDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("industry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONCEPT, new org.apache.thrift.meta_data.FieldMetaData("concept", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FilterStockResult.class, metaDataMap);
  }

  public FilterStockResult() {
  }

  public FilterStockResult(
    String name,
    String code,
    double close,
    double range,
    int pageNum)
  {
    this();
    this.name = name;
    this.code = code;
    this.close = close;
    set_close_isSet(true);
    this.range = range;
    set_range_isSet(true);
    this.pageNum = pageNum;
    set_pageNum_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FilterStockResult(FilterStockResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_name()) {
      this.name = other.name;
    }
    if (other.is_set_code()) {
      this.code = other.code;
    }
    this.close = other.close;
    this.amount = other.amount;
    this.amountOf5d = other.amountOf5d;
    this.amountOf20d = other.amountOf20d;
    this.amountOf60d = other.amountOf60d;
    this.amountOf120d = other.amountOf120d;
    this.amountOf250d = other.amountOf250d;
    this.range = other.range;
    this.rangeOf5d = other.rangeOf5d;
    this.rangeOf20d = other.rangeOf20d;
    this.rangeOf60d = other.rangeOf60d;
    this.rangeOf120d = other.rangeOf120d;
    this.rangeOf250d = other.rangeOf250d;
    this.turnover = other.turnover;
    this.turnoverOf5d = other.turnoverOf5d;
    this.turnoverOf20d = other.turnoverOf20d;
    this.turnoverOf60d = other.turnoverOf60d;
    this.turnoverOf120d = other.turnoverOf120d;
    this.turnoverOf250d = other.turnoverOf250d;
    this.riseStay = other.riseStay;
    this.fallStay = other.fallStay;
    this.valuation = other.valuation;
    this.circulationValue = other.circulationValue;
    this.amplitude = other.amplitude;
    this.amplitudeOf5d = other.amplitudeOf5d;
    this.amplitudeOf20d = other.amplitudeOf20d;
    this.amplitudeOf60d = other.amplitudeOf60d;
    this.amplitudeOf120d = other.amplitudeOf120d;
    this.amplitudeOf250d = other.amplitudeOf250d;
    this.listedDays = other.listedDays;
    if (other.is_set_industry()) {
      this.industry = other.industry;
    }
    if (other.is_set_concept()) {
      this.concept = other.concept;
    }
    this.pageNum = other.pageNum;
  }

  public FilterStockResult deepCopy() {
    return new FilterStockResult(this);
  }

  public void clear() {
    this.name = null;
    this.code = null;
    set_close_isSet(false);
    this.close = 0.0;
    set_amount_isSet(false);
    this.amount = 0.0;
    set_amountOf5d_isSet(false);
    this.amountOf5d = 0.0;
    set_amountOf20d_isSet(false);
    this.amountOf20d = 0.0;
    set_amountOf60d_isSet(false);
    this.amountOf60d = 0.0;
    set_amountOf120d_isSet(false);
    this.amountOf120d = 0.0;
    set_amountOf250d_isSet(false);
    this.amountOf250d = 0.0;
    set_range_isSet(false);
    this.range = 0.0;
    set_rangeOf5d_isSet(false);
    this.rangeOf5d = 0.0;
    set_rangeOf20d_isSet(false);
    this.rangeOf20d = 0.0;
    set_rangeOf60d_isSet(false);
    this.rangeOf60d = 0.0;
    set_rangeOf120d_isSet(false);
    this.rangeOf120d = 0.0;
    set_rangeOf250d_isSet(false);
    this.rangeOf250d = 0.0;
    set_turnover_isSet(false);
    this.turnover = 0.0;
    set_turnoverOf5d_isSet(false);
    this.turnoverOf5d = 0.0;
    set_turnoverOf20d_isSet(false);
    this.turnoverOf20d = 0.0;
    set_turnoverOf60d_isSet(false);
    this.turnoverOf60d = 0.0;
    set_turnoverOf120d_isSet(false);
    this.turnoverOf120d = 0.0;
    set_turnoverOf250d_isSet(false);
    this.turnoverOf250d = 0.0;
    set_riseStay_isSet(false);
    this.riseStay = 0;
    set_fallStay_isSet(false);
    this.fallStay = 0;
    set_valuation_isSet(false);
    this.valuation = 0.0;
    set_circulationValue_isSet(false);
    this.circulationValue = 0.0;
    set_amplitude_isSet(false);
    this.amplitude = 0.0;
    set_amplitudeOf5d_isSet(false);
    this.amplitudeOf5d = 0.0;
    set_amplitudeOf20d_isSet(false);
    this.amplitudeOf20d = 0.0;
    set_amplitudeOf60d_isSet(false);
    this.amplitudeOf60d = 0.0;
    set_amplitudeOf120d_isSet(false);
    this.amplitudeOf120d = 0.0;
    set_amplitudeOf250d_isSet(false);
    this.amplitudeOf250d = 0.0;
    set_listedDays_isSet(false);
    this.listedDays = 0;
    this.industry = null;
    this.concept = null;
    set_pageNum_isSet(false);
    this.pageNum = 0;
  }

  public String get_name() {
    return this.name;
  }

  public void set_name(String name) {
    this.name = name;
  }

  public void unset_name() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean is_set_name() {
    return this.name != null;
  }

  public void set_name_isSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String get_code() {
    return this.code;
  }

  public void set_code(String code) {
    this.code = code;
  }

  public void unset_code() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean is_set_code() {
    return this.code != null;
  }

  public void set_code_isSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public double get_close() {
    return this.close;
  }

  public void set_close(double close) {
    this.close = close;
    set_close_isSet(true);
  }

  public void unset_close() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  /** Returns true if field close is set (has been assigned a value) and false otherwise */
  public boolean is_set_close() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  public void set_close_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSE_ISSET_ID, value);
  }

  public double get_amount() {
    return this.amount;
  }

  public void set_amount(double amount) {
    this.amount = amount;
    set_amount_isSet(true);
  }

  public void unset_amount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean is_set_amount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void set_amount_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public double get_amountOf5d() {
    return this.amountOf5d;
  }

  public void set_amountOf5d(double amountOf5d) {
    this.amountOf5d = amountOf5d;
    set_amountOf5d_isSet(true);
  }

  public void unset_amountOf5d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTOF5D_ISSET_ID);
  }

  /** Returns true if field amountOf5d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amountOf5d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTOF5D_ISSET_ID);
  }

  public void set_amountOf5d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTOF5D_ISSET_ID, value);
  }

  public double get_amountOf20d() {
    return this.amountOf20d;
  }

  public void set_amountOf20d(double amountOf20d) {
    this.amountOf20d = amountOf20d;
    set_amountOf20d_isSet(true);
  }

  public void unset_amountOf20d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTOF20D_ISSET_ID);
  }

  /** Returns true if field amountOf20d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amountOf20d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTOF20D_ISSET_ID);
  }

  public void set_amountOf20d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTOF20D_ISSET_ID, value);
  }

  public double get_amountOf60d() {
    return this.amountOf60d;
  }

  public void set_amountOf60d(double amountOf60d) {
    this.amountOf60d = amountOf60d;
    set_amountOf60d_isSet(true);
  }

  public void unset_amountOf60d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTOF60D_ISSET_ID);
  }

  /** Returns true if field amountOf60d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amountOf60d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTOF60D_ISSET_ID);
  }

  public void set_amountOf60d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTOF60D_ISSET_ID, value);
  }

  public double get_amountOf120d() {
    return this.amountOf120d;
  }

  public void set_amountOf120d(double amountOf120d) {
    this.amountOf120d = amountOf120d;
    set_amountOf120d_isSet(true);
  }

  public void unset_amountOf120d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTOF120D_ISSET_ID);
  }

  /** Returns true if field amountOf120d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amountOf120d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTOF120D_ISSET_ID);
  }

  public void set_amountOf120d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTOF120D_ISSET_ID, value);
  }

  public double get_amountOf250d() {
    return this.amountOf250d;
  }

  public void set_amountOf250d(double amountOf250d) {
    this.amountOf250d = amountOf250d;
    set_amountOf250d_isSet(true);
  }

  public void unset_amountOf250d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTOF250D_ISSET_ID);
  }

  /** Returns true if field amountOf250d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amountOf250d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTOF250D_ISSET_ID);
  }

  public void set_amountOf250d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTOF250D_ISSET_ID, value);
  }

  public double get_range() {
    return this.range;
  }

  public void set_range(double range) {
    this.range = range;
    set_range_isSet(true);
  }

  public void unset_range() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean is_set_range() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  public void set_range_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
  }

  public double get_rangeOf5d() {
    return this.rangeOf5d;
  }

  public void set_rangeOf5d(double rangeOf5d) {
    this.rangeOf5d = rangeOf5d;
    set_rangeOf5d_isSet(true);
  }

  public void unset_rangeOf5d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOF5D_ISSET_ID);
  }

  /** Returns true if field rangeOf5d is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOf5d() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOF5D_ISSET_ID);
  }

  public void set_rangeOf5d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOF5D_ISSET_ID, value);
  }

  public double get_rangeOf20d() {
    return this.rangeOf20d;
  }

  public void set_rangeOf20d(double rangeOf20d) {
    this.rangeOf20d = rangeOf20d;
    set_rangeOf20d_isSet(true);
  }

  public void unset_rangeOf20d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOF20D_ISSET_ID);
  }

  /** Returns true if field rangeOf20d is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOf20d() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOF20D_ISSET_ID);
  }

  public void set_rangeOf20d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOF20D_ISSET_ID, value);
  }

  public double get_rangeOf60d() {
    return this.rangeOf60d;
  }

  public void set_rangeOf60d(double rangeOf60d) {
    this.rangeOf60d = rangeOf60d;
    set_rangeOf60d_isSet(true);
  }

  public void unset_rangeOf60d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOF60D_ISSET_ID);
  }

  /** Returns true if field rangeOf60d is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOf60d() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOF60D_ISSET_ID);
  }

  public void set_rangeOf60d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOF60D_ISSET_ID, value);
  }

  public double get_rangeOf120d() {
    return this.rangeOf120d;
  }

  public void set_rangeOf120d(double rangeOf120d) {
    this.rangeOf120d = rangeOf120d;
    set_rangeOf120d_isSet(true);
  }

  public void unset_rangeOf120d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOF120D_ISSET_ID);
  }

  /** Returns true if field rangeOf120d is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOf120d() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOF120D_ISSET_ID);
  }

  public void set_rangeOf120d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOF120D_ISSET_ID, value);
  }

  public double get_rangeOf250d() {
    return this.rangeOf250d;
  }

  public void set_rangeOf250d(double rangeOf250d) {
    this.rangeOf250d = rangeOf250d;
    set_rangeOf250d_isSet(true);
  }

  public void unset_rangeOf250d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOF250D_ISSET_ID);
  }

  /** Returns true if field rangeOf250d is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOf250d() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOF250D_ISSET_ID);
  }

  public void set_rangeOf250d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOF250D_ISSET_ID, value);
  }

  public double get_turnover() {
    return this.turnover;
  }

  public void set_turnover(double turnover) {
    this.turnover = turnover;
    set_turnover_isSet(true);
  }

  public void unset_turnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void set_turnover_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public double get_turnoverOf5d() {
    return this.turnoverOf5d;
  }

  public void set_turnoverOf5d(double turnoverOf5d) {
    this.turnoverOf5d = turnoverOf5d;
    set_turnoverOf5d_isSet(true);
  }

  public void unset_turnoverOf5d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVEROF5D_ISSET_ID);
  }

  /** Returns true if field turnoverOf5d is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnoverOf5d() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVEROF5D_ISSET_ID);
  }

  public void set_turnoverOf5d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVEROF5D_ISSET_ID, value);
  }

  public double get_turnoverOf20d() {
    return this.turnoverOf20d;
  }

  public void set_turnoverOf20d(double turnoverOf20d) {
    this.turnoverOf20d = turnoverOf20d;
    set_turnoverOf20d_isSet(true);
  }

  public void unset_turnoverOf20d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVEROF20D_ISSET_ID);
  }

  /** Returns true if field turnoverOf20d is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnoverOf20d() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVEROF20D_ISSET_ID);
  }

  public void set_turnoverOf20d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVEROF20D_ISSET_ID, value);
  }

  public double get_turnoverOf60d() {
    return this.turnoverOf60d;
  }

  public void set_turnoverOf60d(double turnoverOf60d) {
    this.turnoverOf60d = turnoverOf60d;
    set_turnoverOf60d_isSet(true);
  }

  public void unset_turnoverOf60d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVEROF60D_ISSET_ID);
  }

  /** Returns true if field turnoverOf60d is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnoverOf60d() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVEROF60D_ISSET_ID);
  }

  public void set_turnoverOf60d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVEROF60D_ISSET_ID, value);
  }

  public double get_turnoverOf120d() {
    return this.turnoverOf120d;
  }

  public void set_turnoverOf120d(double turnoverOf120d) {
    this.turnoverOf120d = turnoverOf120d;
    set_turnoverOf120d_isSet(true);
  }

  public void unset_turnoverOf120d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVEROF120D_ISSET_ID);
  }

  /** Returns true if field turnoverOf120d is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnoverOf120d() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVEROF120D_ISSET_ID);
  }

  public void set_turnoverOf120d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVEROF120D_ISSET_ID, value);
  }

  public double get_turnoverOf250d() {
    return this.turnoverOf250d;
  }

  public void set_turnoverOf250d(double turnoverOf250d) {
    this.turnoverOf250d = turnoverOf250d;
    set_turnoverOf250d_isSet(true);
  }

  public void unset_turnoverOf250d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVEROF250D_ISSET_ID);
  }

  /** Returns true if field turnoverOf250d is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnoverOf250d() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVEROF250D_ISSET_ID);
  }

  public void set_turnoverOf250d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVEROF250D_ISSET_ID, value);
  }

  public short get_riseStay() {
    return this.riseStay;
  }

  public void set_riseStay(short riseStay) {
    this.riseStay = riseStay;
    set_riseStay_isSet(true);
  }

  public void unset_riseStay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISESTAY_ISSET_ID);
  }

  /** Returns true if field riseStay is set (has been assigned a value) and false otherwise */
  public boolean is_set_riseStay() {
    return EncodingUtils.testBit(__isset_bitfield, __RISESTAY_ISSET_ID);
  }

  public void set_riseStay_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISESTAY_ISSET_ID, value);
  }

  public short get_fallStay() {
    return this.fallStay;
  }

  public void set_fallStay(short fallStay) {
    this.fallStay = fallStay;
    set_fallStay_isSet(true);
  }

  public void unset_fallStay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FALLSTAY_ISSET_ID);
  }

  /** Returns true if field fallStay is set (has been assigned a value) and false otherwise */
  public boolean is_set_fallStay() {
    return EncodingUtils.testBit(__isset_bitfield, __FALLSTAY_ISSET_ID);
  }

  public void set_fallStay_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FALLSTAY_ISSET_ID, value);
  }

  public double get_valuation() {
    return this.valuation;
  }

  public void set_valuation(double valuation) {
    this.valuation = valuation;
    set_valuation_isSet(true);
  }

  public void unset_valuation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUATION_ISSET_ID);
  }

  /** Returns true if field valuation is set (has been assigned a value) and false otherwise */
  public boolean is_set_valuation() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUATION_ISSET_ID);
  }

  public void set_valuation_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUATION_ISSET_ID, value);
  }

  public double get_circulationValue() {
    return this.circulationValue;
  }

  public void set_circulationValue(double circulationValue) {
    this.circulationValue = circulationValue;
    set_circulationValue_isSet(true);
  }

  public void unset_circulationValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CIRCULATIONVALUE_ISSET_ID);
  }

  /** Returns true if field circulationValue is set (has been assigned a value) and false otherwise */
  public boolean is_set_circulationValue() {
    return EncodingUtils.testBit(__isset_bitfield, __CIRCULATIONVALUE_ISSET_ID);
  }

  public void set_circulationValue_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CIRCULATIONVALUE_ISSET_ID, value);
  }

  public double get_amplitude() {
    return this.amplitude;
  }

  public void set_amplitude(double amplitude) {
    this.amplitude = amplitude;
    set_amplitude_isSet(true);
  }

  public void unset_amplitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDE_ISSET_ID);
  }

  /** Returns true if field amplitude is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitude() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDE_ISSET_ID);
  }

  public void set_amplitude_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDE_ISSET_ID, value);
  }

  public double get_amplitudeOf5d() {
    return this.amplitudeOf5d;
  }

  public void set_amplitudeOf5d(double amplitudeOf5d) {
    this.amplitudeOf5d = amplitudeOf5d;
    set_amplitudeOf5d_isSet(true);
  }

  public void unset_amplitudeOf5d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDEOF5D_ISSET_ID);
  }

  /** Returns true if field amplitudeOf5d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitudeOf5d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDEOF5D_ISSET_ID);
  }

  public void set_amplitudeOf5d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDEOF5D_ISSET_ID, value);
  }

  public double get_amplitudeOf20d() {
    return this.amplitudeOf20d;
  }

  public void set_amplitudeOf20d(double amplitudeOf20d) {
    this.amplitudeOf20d = amplitudeOf20d;
    set_amplitudeOf20d_isSet(true);
  }

  public void unset_amplitudeOf20d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDEOF20D_ISSET_ID);
  }

  /** Returns true if field amplitudeOf20d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitudeOf20d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDEOF20D_ISSET_ID);
  }

  public void set_amplitudeOf20d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDEOF20D_ISSET_ID, value);
  }

  public double get_amplitudeOf60d() {
    return this.amplitudeOf60d;
  }

  public void set_amplitudeOf60d(double amplitudeOf60d) {
    this.amplitudeOf60d = amplitudeOf60d;
    set_amplitudeOf60d_isSet(true);
  }

  public void unset_amplitudeOf60d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDEOF60D_ISSET_ID);
  }

  /** Returns true if field amplitudeOf60d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitudeOf60d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDEOF60D_ISSET_ID);
  }

  public void set_amplitudeOf60d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDEOF60D_ISSET_ID, value);
  }

  public double get_amplitudeOf120d() {
    return this.amplitudeOf120d;
  }

  public void set_amplitudeOf120d(double amplitudeOf120d) {
    this.amplitudeOf120d = amplitudeOf120d;
    set_amplitudeOf120d_isSet(true);
  }

  public void unset_amplitudeOf120d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDEOF120D_ISSET_ID);
  }

  /** Returns true if field amplitudeOf120d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitudeOf120d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDEOF120D_ISSET_ID);
  }

  public void set_amplitudeOf120d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDEOF120D_ISSET_ID, value);
  }

  public double get_amplitudeOf250d() {
    return this.amplitudeOf250d;
  }

  public void set_amplitudeOf250d(double amplitudeOf250d) {
    this.amplitudeOf250d = amplitudeOf250d;
    set_amplitudeOf250d_isSet(true);
  }

  public void unset_amplitudeOf250d() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDEOF250D_ISSET_ID);
  }

  /** Returns true if field amplitudeOf250d is set (has been assigned a value) and false otherwise */
  public boolean is_set_amplitudeOf250d() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDEOF250D_ISSET_ID);
  }

  public void set_amplitudeOf250d_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDEOF250D_ISSET_ID, value);
  }

  public int get_listedDays() {
    return this.listedDays;
  }

  public void set_listedDays(int listedDays) {
    this.listedDays = listedDays;
    set_listedDays_isSet(true);
  }

  public void unset_listedDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTEDDAYS_ISSET_ID);
  }

  /** Returns true if field listedDays is set (has been assigned a value) and false otherwise */
  public boolean is_set_listedDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LISTEDDAYS_ISSET_ID);
  }

  public void set_listedDays_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTEDDAYS_ISSET_ID, value);
  }

  public String get_industry() {
    return this.industry;
  }

  public void set_industry(String industry) {
    this.industry = industry;
  }

  public void unset_industry() {
    this.industry = null;
  }

  /** Returns true if field industry is set (has been assigned a value) and false otherwise */
  public boolean is_set_industry() {
    return this.industry != null;
  }

  public void set_industry_isSet(boolean value) {
    if (!value) {
      this.industry = null;
    }
  }

  public String get_concept() {
    return this.concept;
  }

  public void set_concept(String concept) {
    this.concept = concept;
  }

  public void unset_concept() {
    this.concept = null;
  }

  /** Returns true if field concept is set (has been assigned a value) and false otherwise */
  public boolean is_set_concept() {
    return this.concept != null;
  }

  public void set_concept_isSet(boolean value) {
    if (!value) {
      this.concept = null;
    }
  }

  public int get_pageNum() {
    return this.pageNum;
  }

  public void set_pageNum(int pageNum) {
    this.pageNum = pageNum;
    set_pageNum_isSet(true);
  }

  public void unset_pageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_pageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  public void set_pageNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unset_code();
      } else {
        set_code((String)value);
      }
      break;

    case CLOSE:
      if (value == null) {
        unset_close();
      } else {
        set_close((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unset_amount();
      } else {
        set_amount((Double)value);
      }
      break;

    case AMOUNT_OF5D:
      if (value == null) {
        unset_amountOf5d();
      } else {
        set_amountOf5d((Double)value);
      }
      break;

    case AMOUNT_OF20D:
      if (value == null) {
        unset_amountOf20d();
      } else {
        set_amountOf20d((Double)value);
      }
      break;

    case AMOUNT_OF60D:
      if (value == null) {
        unset_amountOf60d();
      } else {
        set_amountOf60d((Double)value);
      }
      break;

    case AMOUNT_OF120D:
      if (value == null) {
        unset_amountOf120d();
      } else {
        set_amountOf120d((Double)value);
      }
      break;

    case AMOUNT_OF250D:
      if (value == null) {
        unset_amountOf250d();
      } else {
        set_amountOf250d((Double)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unset_range();
      } else {
        set_range((Double)value);
      }
      break;

    case RANGE_OF5D:
      if (value == null) {
        unset_rangeOf5d();
      } else {
        set_rangeOf5d((Double)value);
      }
      break;

    case RANGE_OF20D:
      if (value == null) {
        unset_rangeOf20d();
      } else {
        set_rangeOf20d((Double)value);
      }
      break;

    case RANGE_OF60D:
      if (value == null) {
        unset_rangeOf60d();
      } else {
        set_rangeOf60d((Double)value);
      }
      break;

    case RANGE_OF120D:
      if (value == null) {
        unset_rangeOf120d();
      } else {
        set_rangeOf120d((Double)value);
      }
      break;

    case RANGE_OF250D:
      if (value == null) {
        unset_rangeOf250d();
      } else {
        set_rangeOf250d((Double)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unset_turnover();
      } else {
        set_turnover((Double)value);
      }
      break;

    case TURNOVER_OF5D:
      if (value == null) {
        unset_turnoverOf5d();
      } else {
        set_turnoverOf5d((Double)value);
      }
      break;

    case TURNOVER_OF20D:
      if (value == null) {
        unset_turnoverOf20d();
      } else {
        set_turnoverOf20d((Double)value);
      }
      break;

    case TURNOVER_OF60D:
      if (value == null) {
        unset_turnoverOf60d();
      } else {
        set_turnoverOf60d((Double)value);
      }
      break;

    case TURNOVER_OF120D:
      if (value == null) {
        unset_turnoverOf120d();
      } else {
        set_turnoverOf120d((Double)value);
      }
      break;

    case TURNOVER_OF250D:
      if (value == null) {
        unset_turnoverOf250d();
      } else {
        set_turnoverOf250d((Double)value);
      }
      break;

    case RISE_STAY:
      if (value == null) {
        unset_riseStay();
      } else {
        set_riseStay((Short)value);
      }
      break;

    case FALL_STAY:
      if (value == null) {
        unset_fallStay();
      } else {
        set_fallStay((Short)value);
      }
      break;

    case VALUATION:
      if (value == null) {
        unset_valuation();
      } else {
        set_valuation((Double)value);
      }
      break;

    case CIRCULATION_VALUE:
      if (value == null) {
        unset_circulationValue();
      } else {
        set_circulationValue((Double)value);
      }
      break;

    case AMPLITUDE:
      if (value == null) {
        unset_amplitude();
      } else {
        set_amplitude((Double)value);
      }
      break;

    case AMPLITUDE_OF5D:
      if (value == null) {
        unset_amplitudeOf5d();
      } else {
        set_amplitudeOf5d((Double)value);
      }
      break;

    case AMPLITUDE_OF20D:
      if (value == null) {
        unset_amplitudeOf20d();
      } else {
        set_amplitudeOf20d((Double)value);
      }
      break;

    case AMPLITUDE_OF60D:
      if (value == null) {
        unset_amplitudeOf60d();
      } else {
        set_amplitudeOf60d((Double)value);
      }
      break;

    case AMPLITUDE_OF120D:
      if (value == null) {
        unset_amplitudeOf120d();
      } else {
        set_amplitudeOf120d((Double)value);
      }
      break;

    case AMPLITUDE_OF250D:
      if (value == null) {
        unset_amplitudeOf250d();
      } else {
        set_amplitudeOf250d((Double)value);
      }
      break;

    case LISTED_DAYS:
      if (value == null) {
        unset_listedDays();
      } else {
        set_listedDays((Integer)value);
      }
      break;

    case INDUSTRY:
      if (value == null) {
        unset_industry();
      } else {
        set_industry((String)value);
      }
      break;

    case CONCEPT:
      if (value == null) {
        unset_concept();
      } else {
        set_concept((String)value);
      }
      break;

    case PAGE_NUM:
      if (value == null) {
        unset_pageNum();
      } else {
        set_pageNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return get_name();

    case CODE:
      return get_code();

    case CLOSE:
      return get_close();

    case AMOUNT:
      return get_amount();

    case AMOUNT_OF5D:
      return get_amountOf5d();

    case AMOUNT_OF20D:
      return get_amountOf20d();

    case AMOUNT_OF60D:
      return get_amountOf60d();

    case AMOUNT_OF120D:
      return get_amountOf120d();

    case AMOUNT_OF250D:
      return get_amountOf250d();

    case RANGE:
      return get_range();

    case RANGE_OF5D:
      return get_rangeOf5d();

    case RANGE_OF20D:
      return get_rangeOf20d();

    case RANGE_OF60D:
      return get_rangeOf60d();

    case RANGE_OF120D:
      return get_rangeOf120d();

    case RANGE_OF250D:
      return get_rangeOf250d();

    case TURNOVER:
      return get_turnover();

    case TURNOVER_OF5D:
      return get_turnoverOf5d();

    case TURNOVER_OF20D:
      return get_turnoverOf20d();

    case TURNOVER_OF60D:
      return get_turnoverOf60d();

    case TURNOVER_OF120D:
      return get_turnoverOf120d();

    case TURNOVER_OF250D:
      return get_turnoverOf250d();

    case RISE_STAY:
      return get_riseStay();

    case FALL_STAY:
      return get_fallStay();

    case VALUATION:
      return get_valuation();

    case CIRCULATION_VALUE:
      return get_circulationValue();

    case AMPLITUDE:
      return get_amplitude();

    case AMPLITUDE_OF5D:
      return get_amplitudeOf5d();

    case AMPLITUDE_OF20D:
      return get_amplitudeOf20d();

    case AMPLITUDE_OF60D:
      return get_amplitudeOf60d();

    case AMPLITUDE_OF120D:
      return get_amplitudeOf120d();

    case AMPLITUDE_OF250D:
      return get_amplitudeOf250d();

    case LISTED_DAYS:
      return get_listedDays();

    case INDUSTRY:
      return get_industry();

    case CONCEPT:
      return get_concept();

    case PAGE_NUM:
      return get_pageNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return is_set_name();
    case CODE:
      return is_set_code();
    case CLOSE:
      return is_set_close();
    case AMOUNT:
      return is_set_amount();
    case AMOUNT_OF5D:
      return is_set_amountOf5d();
    case AMOUNT_OF20D:
      return is_set_amountOf20d();
    case AMOUNT_OF60D:
      return is_set_amountOf60d();
    case AMOUNT_OF120D:
      return is_set_amountOf120d();
    case AMOUNT_OF250D:
      return is_set_amountOf250d();
    case RANGE:
      return is_set_range();
    case RANGE_OF5D:
      return is_set_rangeOf5d();
    case RANGE_OF20D:
      return is_set_rangeOf20d();
    case RANGE_OF60D:
      return is_set_rangeOf60d();
    case RANGE_OF120D:
      return is_set_rangeOf120d();
    case RANGE_OF250D:
      return is_set_rangeOf250d();
    case TURNOVER:
      return is_set_turnover();
    case TURNOVER_OF5D:
      return is_set_turnoverOf5d();
    case TURNOVER_OF20D:
      return is_set_turnoverOf20d();
    case TURNOVER_OF60D:
      return is_set_turnoverOf60d();
    case TURNOVER_OF120D:
      return is_set_turnoverOf120d();
    case TURNOVER_OF250D:
      return is_set_turnoverOf250d();
    case RISE_STAY:
      return is_set_riseStay();
    case FALL_STAY:
      return is_set_fallStay();
    case VALUATION:
      return is_set_valuation();
    case CIRCULATION_VALUE:
      return is_set_circulationValue();
    case AMPLITUDE:
      return is_set_amplitude();
    case AMPLITUDE_OF5D:
      return is_set_amplitudeOf5d();
    case AMPLITUDE_OF20D:
      return is_set_amplitudeOf20d();
    case AMPLITUDE_OF60D:
      return is_set_amplitudeOf60d();
    case AMPLITUDE_OF120D:
      return is_set_amplitudeOf120d();
    case AMPLITUDE_OF250D:
      return is_set_amplitudeOf250d();
    case LISTED_DAYS:
      return is_set_listedDays();
    case INDUSTRY:
      return is_set_industry();
    case CONCEPT:
      return is_set_concept();
    case PAGE_NUM:
      return is_set_pageNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FilterStockResult)
      return this.equals((FilterStockResult)that);
    return false;
  }

  public boolean equals(FilterStockResult that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.is_set_name();
    boolean that_present_name = true && that.is_set_name();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_code = true && this.is_set_code();
    boolean that_present_code = true && that.is_set_code();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_close = true;
    boolean that_present_close = true;
    if (this_present_close || that_present_close) {
      if (!(this_present_close && that_present_close))
        return false;
      if (this.close != that.close)
        return false;
    }

    boolean this_present_amount = true && this.is_set_amount();
    boolean that_present_amount = true && that.is_set_amount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_amountOf5d = true && this.is_set_amountOf5d();
    boolean that_present_amountOf5d = true && that.is_set_amountOf5d();
    if (this_present_amountOf5d || that_present_amountOf5d) {
      if (!(this_present_amountOf5d && that_present_amountOf5d))
        return false;
      if (this.amountOf5d != that.amountOf5d)
        return false;
    }

    boolean this_present_amountOf20d = true && this.is_set_amountOf20d();
    boolean that_present_amountOf20d = true && that.is_set_amountOf20d();
    if (this_present_amountOf20d || that_present_amountOf20d) {
      if (!(this_present_amountOf20d && that_present_amountOf20d))
        return false;
      if (this.amountOf20d != that.amountOf20d)
        return false;
    }

    boolean this_present_amountOf60d = true && this.is_set_amountOf60d();
    boolean that_present_amountOf60d = true && that.is_set_amountOf60d();
    if (this_present_amountOf60d || that_present_amountOf60d) {
      if (!(this_present_amountOf60d && that_present_amountOf60d))
        return false;
      if (this.amountOf60d != that.amountOf60d)
        return false;
    }

    boolean this_present_amountOf120d = true && this.is_set_amountOf120d();
    boolean that_present_amountOf120d = true && that.is_set_amountOf120d();
    if (this_present_amountOf120d || that_present_amountOf120d) {
      if (!(this_present_amountOf120d && that_present_amountOf120d))
        return false;
      if (this.amountOf120d != that.amountOf120d)
        return false;
    }

    boolean this_present_amountOf250d = true && this.is_set_amountOf250d();
    boolean that_present_amountOf250d = true && that.is_set_amountOf250d();
    if (this_present_amountOf250d || that_present_amountOf250d) {
      if (!(this_present_amountOf250d && that_present_amountOf250d))
        return false;
      if (this.amountOf250d != that.amountOf250d)
        return false;
    }

    boolean this_present_range = true;
    boolean that_present_range = true;
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (this.range != that.range)
        return false;
    }

    boolean this_present_rangeOf5d = true && this.is_set_rangeOf5d();
    boolean that_present_rangeOf5d = true && that.is_set_rangeOf5d();
    if (this_present_rangeOf5d || that_present_rangeOf5d) {
      if (!(this_present_rangeOf5d && that_present_rangeOf5d))
        return false;
      if (this.rangeOf5d != that.rangeOf5d)
        return false;
    }

    boolean this_present_rangeOf20d = true && this.is_set_rangeOf20d();
    boolean that_present_rangeOf20d = true && that.is_set_rangeOf20d();
    if (this_present_rangeOf20d || that_present_rangeOf20d) {
      if (!(this_present_rangeOf20d && that_present_rangeOf20d))
        return false;
      if (this.rangeOf20d != that.rangeOf20d)
        return false;
    }

    boolean this_present_rangeOf60d = true && this.is_set_rangeOf60d();
    boolean that_present_rangeOf60d = true && that.is_set_rangeOf60d();
    if (this_present_rangeOf60d || that_present_rangeOf60d) {
      if (!(this_present_rangeOf60d && that_present_rangeOf60d))
        return false;
      if (this.rangeOf60d != that.rangeOf60d)
        return false;
    }

    boolean this_present_rangeOf120d = true && this.is_set_rangeOf120d();
    boolean that_present_rangeOf120d = true && that.is_set_rangeOf120d();
    if (this_present_rangeOf120d || that_present_rangeOf120d) {
      if (!(this_present_rangeOf120d && that_present_rangeOf120d))
        return false;
      if (this.rangeOf120d != that.rangeOf120d)
        return false;
    }

    boolean this_present_rangeOf250d = true && this.is_set_rangeOf250d();
    boolean that_present_rangeOf250d = true && that.is_set_rangeOf250d();
    if (this_present_rangeOf250d || that_present_rangeOf250d) {
      if (!(this_present_rangeOf250d && that_present_rangeOf250d))
        return false;
      if (this.rangeOf250d != that.rangeOf250d)
        return false;
    }

    boolean this_present_turnover = true && this.is_set_turnover();
    boolean that_present_turnover = true && that.is_set_turnover();
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_turnoverOf5d = true && this.is_set_turnoverOf5d();
    boolean that_present_turnoverOf5d = true && that.is_set_turnoverOf5d();
    if (this_present_turnoverOf5d || that_present_turnoverOf5d) {
      if (!(this_present_turnoverOf5d && that_present_turnoverOf5d))
        return false;
      if (this.turnoverOf5d != that.turnoverOf5d)
        return false;
    }

    boolean this_present_turnoverOf20d = true && this.is_set_turnoverOf20d();
    boolean that_present_turnoverOf20d = true && that.is_set_turnoverOf20d();
    if (this_present_turnoverOf20d || that_present_turnoverOf20d) {
      if (!(this_present_turnoverOf20d && that_present_turnoverOf20d))
        return false;
      if (this.turnoverOf20d != that.turnoverOf20d)
        return false;
    }

    boolean this_present_turnoverOf60d = true && this.is_set_turnoverOf60d();
    boolean that_present_turnoverOf60d = true && that.is_set_turnoverOf60d();
    if (this_present_turnoverOf60d || that_present_turnoverOf60d) {
      if (!(this_present_turnoverOf60d && that_present_turnoverOf60d))
        return false;
      if (this.turnoverOf60d != that.turnoverOf60d)
        return false;
    }

    boolean this_present_turnoverOf120d = true && this.is_set_turnoverOf120d();
    boolean that_present_turnoverOf120d = true && that.is_set_turnoverOf120d();
    if (this_present_turnoverOf120d || that_present_turnoverOf120d) {
      if (!(this_present_turnoverOf120d && that_present_turnoverOf120d))
        return false;
      if (this.turnoverOf120d != that.turnoverOf120d)
        return false;
    }

    boolean this_present_turnoverOf250d = true && this.is_set_turnoverOf250d();
    boolean that_present_turnoverOf250d = true && that.is_set_turnoverOf250d();
    if (this_present_turnoverOf250d || that_present_turnoverOf250d) {
      if (!(this_present_turnoverOf250d && that_present_turnoverOf250d))
        return false;
      if (this.turnoverOf250d != that.turnoverOf250d)
        return false;
    }

    boolean this_present_riseStay = true && this.is_set_riseStay();
    boolean that_present_riseStay = true && that.is_set_riseStay();
    if (this_present_riseStay || that_present_riseStay) {
      if (!(this_present_riseStay && that_present_riseStay))
        return false;
      if (this.riseStay != that.riseStay)
        return false;
    }

    boolean this_present_fallStay = true && this.is_set_fallStay();
    boolean that_present_fallStay = true && that.is_set_fallStay();
    if (this_present_fallStay || that_present_fallStay) {
      if (!(this_present_fallStay && that_present_fallStay))
        return false;
      if (this.fallStay != that.fallStay)
        return false;
    }

    boolean this_present_valuation = true && this.is_set_valuation();
    boolean that_present_valuation = true && that.is_set_valuation();
    if (this_present_valuation || that_present_valuation) {
      if (!(this_present_valuation && that_present_valuation))
        return false;
      if (this.valuation != that.valuation)
        return false;
    }

    boolean this_present_circulationValue = true && this.is_set_circulationValue();
    boolean that_present_circulationValue = true && that.is_set_circulationValue();
    if (this_present_circulationValue || that_present_circulationValue) {
      if (!(this_present_circulationValue && that_present_circulationValue))
        return false;
      if (this.circulationValue != that.circulationValue)
        return false;
    }

    boolean this_present_amplitude = true && this.is_set_amplitude();
    boolean that_present_amplitude = true && that.is_set_amplitude();
    if (this_present_amplitude || that_present_amplitude) {
      if (!(this_present_amplitude && that_present_amplitude))
        return false;
      if (this.amplitude != that.amplitude)
        return false;
    }

    boolean this_present_amplitudeOf5d = true && this.is_set_amplitudeOf5d();
    boolean that_present_amplitudeOf5d = true && that.is_set_amplitudeOf5d();
    if (this_present_amplitudeOf5d || that_present_amplitudeOf5d) {
      if (!(this_present_amplitudeOf5d && that_present_amplitudeOf5d))
        return false;
      if (this.amplitudeOf5d != that.amplitudeOf5d)
        return false;
    }

    boolean this_present_amplitudeOf20d = true && this.is_set_amplitudeOf20d();
    boolean that_present_amplitudeOf20d = true && that.is_set_amplitudeOf20d();
    if (this_present_amplitudeOf20d || that_present_amplitudeOf20d) {
      if (!(this_present_amplitudeOf20d && that_present_amplitudeOf20d))
        return false;
      if (this.amplitudeOf20d != that.amplitudeOf20d)
        return false;
    }

    boolean this_present_amplitudeOf60d = true && this.is_set_amplitudeOf60d();
    boolean that_present_amplitudeOf60d = true && that.is_set_amplitudeOf60d();
    if (this_present_amplitudeOf60d || that_present_amplitudeOf60d) {
      if (!(this_present_amplitudeOf60d && that_present_amplitudeOf60d))
        return false;
      if (this.amplitudeOf60d != that.amplitudeOf60d)
        return false;
    }

    boolean this_present_amplitudeOf120d = true && this.is_set_amplitudeOf120d();
    boolean that_present_amplitudeOf120d = true && that.is_set_amplitudeOf120d();
    if (this_present_amplitudeOf120d || that_present_amplitudeOf120d) {
      if (!(this_present_amplitudeOf120d && that_present_amplitudeOf120d))
        return false;
      if (this.amplitudeOf120d != that.amplitudeOf120d)
        return false;
    }

    boolean this_present_amplitudeOf250d = true && this.is_set_amplitudeOf250d();
    boolean that_present_amplitudeOf250d = true && that.is_set_amplitudeOf250d();
    if (this_present_amplitudeOf250d || that_present_amplitudeOf250d) {
      if (!(this_present_amplitudeOf250d && that_present_amplitudeOf250d))
        return false;
      if (this.amplitudeOf250d != that.amplitudeOf250d)
        return false;
    }

    boolean this_present_listedDays = true && this.is_set_listedDays();
    boolean that_present_listedDays = true && that.is_set_listedDays();
    if (this_present_listedDays || that_present_listedDays) {
      if (!(this_present_listedDays && that_present_listedDays))
        return false;
      if (this.listedDays != that.listedDays)
        return false;
    }

    boolean this_present_industry = true && this.is_set_industry();
    boolean that_present_industry = true && that.is_set_industry();
    if (this_present_industry || that_present_industry) {
      if (!(this_present_industry && that_present_industry))
        return false;
      if (!this.industry.equals(that.industry))
        return false;
    }

    boolean this_present_concept = true && this.is_set_concept();
    boolean that_present_concept = true && that.is_set_concept();
    if (this_present_concept || that_present_concept) {
      if (!(this_present_concept && that_present_concept))
        return false;
      if (!this.concept.equals(that.concept))
        return false;
    }

    boolean this_present_pageNum = true;
    boolean that_present_pageNum = true;
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (is_set_name());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_code = true && (is_set_code());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_close = true;
    list.add(present_close);
    if (present_close)
      list.add(close);

    boolean present_amount = true && (is_set_amount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_amountOf5d = true && (is_set_amountOf5d());
    list.add(present_amountOf5d);
    if (present_amountOf5d)
      list.add(amountOf5d);

    boolean present_amountOf20d = true && (is_set_amountOf20d());
    list.add(present_amountOf20d);
    if (present_amountOf20d)
      list.add(amountOf20d);

    boolean present_amountOf60d = true && (is_set_amountOf60d());
    list.add(present_amountOf60d);
    if (present_amountOf60d)
      list.add(amountOf60d);

    boolean present_amountOf120d = true && (is_set_amountOf120d());
    list.add(present_amountOf120d);
    if (present_amountOf120d)
      list.add(amountOf120d);

    boolean present_amountOf250d = true && (is_set_amountOf250d());
    list.add(present_amountOf250d);
    if (present_amountOf250d)
      list.add(amountOf250d);

    boolean present_range = true;
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_rangeOf5d = true && (is_set_rangeOf5d());
    list.add(present_rangeOf5d);
    if (present_rangeOf5d)
      list.add(rangeOf5d);

    boolean present_rangeOf20d = true && (is_set_rangeOf20d());
    list.add(present_rangeOf20d);
    if (present_rangeOf20d)
      list.add(rangeOf20d);

    boolean present_rangeOf60d = true && (is_set_rangeOf60d());
    list.add(present_rangeOf60d);
    if (present_rangeOf60d)
      list.add(rangeOf60d);

    boolean present_rangeOf120d = true && (is_set_rangeOf120d());
    list.add(present_rangeOf120d);
    if (present_rangeOf120d)
      list.add(rangeOf120d);

    boolean present_rangeOf250d = true && (is_set_rangeOf250d());
    list.add(present_rangeOf250d);
    if (present_rangeOf250d)
      list.add(rangeOf250d);

    boolean present_turnover = true && (is_set_turnover());
    list.add(present_turnover);
    if (present_turnover)
      list.add(turnover);

    boolean present_turnoverOf5d = true && (is_set_turnoverOf5d());
    list.add(present_turnoverOf5d);
    if (present_turnoverOf5d)
      list.add(turnoverOf5d);

    boolean present_turnoverOf20d = true && (is_set_turnoverOf20d());
    list.add(present_turnoverOf20d);
    if (present_turnoverOf20d)
      list.add(turnoverOf20d);

    boolean present_turnoverOf60d = true && (is_set_turnoverOf60d());
    list.add(present_turnoverOf60d);
    if (present_turnoverOf60d)
      list.add(turnoverOf60d);

    boolean present_turnoverOf120d = true && (is_set_turnoverOf120d());
    list.add(present_turnoverOf120d);
    if (present_turnoverOf120d)
      list.add(turnoverOf120d);

    boolean present_turnoverOf250d = true && (is_set_turnoverOf250d());
    list.add(present_turnoverOf250d);
    if (present_turnoverOf250d)
      list.add(turnoverOf250d);

    boolean present_riseStay = true && (is_set_riseStay());
    list.add(present_riseStay);
    if (present_riseStay)
      list.add(riseStay);

    boolean present_fallStay = true && (is_set_fallStay());
    list.add(present_fallStay);
    if (present_fallStay)
      list.add(fallStay);

    boolean present_valuation = true && (is_set_valuation());
    list.add(present_valuation);
    if (present_valuation)
      list.add(valuation);

    boolean present_circulationValue = true && (is_set_circulationValue());
    list.add(present_circulationValue);
    if (present_circulationValue)
      list.add(circulationValue);

    boolean present_amplitude = true && (is_set_amplitude());
    list.add(present_amplitude);
    if (present_amplitude)
      list.add(amplitude);

    boolean present_amplitudeOf5d = true && (is_set_amplitudeOf5d());
    list.add(present_amplitudeOf5d);
    if (present_amplitudeOf5d)
      list.add(amplitudeOf5d);

    boolean present_amplitudeOf20d = true && (is_set_amplitudeOf20d());
    list.add(present_amplitudeOf20d);
    if (present_amplitudeOf20d)
      list.add(amplitudeOf20d);

    boolean present_amplitudeOf60d = true && (is_set_amplitudeOf60d());
    list.add(present_amplitudeOf60d);
    if (present_amplitudeOf60d)
      list.add(amplitudeOf60d);

    boolean present_amplitudeOf120d = true && (is_set_amplitudeOf120d());
    list.add(present_amplitudeOf120d);
    if (present_amplitudeOf120d)
      list.add(amplitudeOf120d);

    boolean present_amplitudeOf250d = true && (is_set_amplitudeOf250d());
    list.add(present_amplitudeOf250d);
    if (present_amplitudeOf250d)
      list.add(amplitudeOf250d);

    boolean present_listedDays = true && (is_set_listedDays());
    list.add(present_listedDays);
    if (present_listedDays)
      list.add(listedDays);

    boolean present_industry = true && (is_set_industry());
    list.add(present_industry);
    if (present_industry)
      list.add(industry);

    boolean present_concept = true && (is_set_concept());
    list.add(present_concept);
    if (present_concept)
      list.add(concept);

    boolean present_pageNum = true;
    list.add(present_pageNum);
    if (present_pageNum)
      list.add(pageNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(FilterStockResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_name()).compareTo(other.is_set_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_close()).compareTo(other.is_set_close());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_close()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close, other.close);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amount()).compareTo(other.is_set_amount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amountOf5d()).compareTo(other.is_set_amountOf5d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amountOf5d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountOf5d, other.amountOf5d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amountOf20d()).compareTo(other.is_set_amountOf20d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amountOf20d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountOf20d, other.amountOf20d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amountOf60d()).compareTo(other.is_set_amountOf60d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amountOf60d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountOf60d, other.amountOf60d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amountOf120d()).compareTo(other.is_set_amountOf120d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amountOf120d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountOf120d, other.amountOf120d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amountOf250d()).compareTo(other.is_set_amountOf250d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amountOf250d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountOf250d, other.amountOf250d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_range()).compareTo(other.is_set_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOf5d()).compareTo(other.is_set_rangeOf5d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOf5d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOf5d, other.rangeOf5d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOf20d()).compareTo(other.is_set_rangeOf20d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOf20d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOf20d, other.rangeOf20d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOf60d()).compareTo(other.is_set_rangeOf60d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOf60d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOf60d, other.rangeOf60d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOf120d()).compareTo(other.is_set_rangeOf120d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOf120d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOf120d, other.rangeOf120d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOf250d()).compareTo(other.is_set_rangeOf250d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOf250d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOf250d, other.rangeOf250d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnover()).compareTo(other.is_set_turnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnoverOf5d()).compareTo(other.is_set_turnoverOf5d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnoverOf5d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverOf5d, other.turnoverOf5d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnoverOf20d()).compareTo(other.is_set_turnoverOf20d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnoverOf20d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverOf20d, other.turnoverOf20d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnoverOf60d()).compareTo(other.is_set_turnoverOf60d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnoverOf60d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverOf60d, other.turnoverOf60d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnoverOf120d()).compareTo(other.is_set_turnoverOf120d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnoverOf120d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverOf120d, other.turnoverOf120d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnoverOf250d()).compareTo(other.is_set_turnoverOf250d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnoverOf250d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverOf250d, other.turnoverOf250d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_riseStay()).compareTo(other.is_set_riseStay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_riseStay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riseStay, other.riseStay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_fallStay()).compareTo(other.is_set_fallStay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_fallStay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fallStay, other.fallStay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_valuation()).compareTo(other.is_set_valuation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_valuation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valuation, other.valuation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_circulationValue()).compareTo(other.is_set_circulationValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_circulationValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circulationValue, other.circulationValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitude()).compareTo(other.is_set_amplitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitude, other.amplitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitudeOf5d()).compareTo(other.is_set_amplitudeOf5d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitudeOf5d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitudeOf5d, other.amplitudeOf5d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitudeOf20d()).compareTo(other.is_set_amplitudeOf20d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitudeOf20d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitudeOf20d, other.amplitudeOf20d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitudeOf60d()).compareTo(other.is_set_amplitudeOf60d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitudeOf60d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitudeOf60d, other.amplitudeOf60d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitudeOf120d()).compareTo(other.is_set_amplitudeOf120d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitudeOf120d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitudeOf120d, other.amplitudeOf120d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amplitudeOf250d()).compareTo(other.is_set_amplitudeOf250d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amplitudeOf250d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitudeOf250d, other.amplitudeOf250d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_listedDays()).compareTo(other.is_set_listedDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_listedDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listedDays, other.listedDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_industry()).compareTo(other.is_set_industry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_industry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industry, other.industry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_concept()).compareTo(other.is_set_concept());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_concept()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concept, other.concept);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_pageNum()).compareTo(other.is_set_pageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FilterStockResult(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("close:");
    sb.append(this.close);
    first = false;
    if (is_set_amount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (is_set_amountOf5d()) {
      if (!first) sb.append(", ");
      sb.append("amountOf5d:");
      sb.append(this.amountOf5d);
      first = false;
    }
    if (is_set_amountOf20d()) {
      if (!first) sb.append(", ");
      sb.append("amountOf20d:");
      sb.append(this.amountOf20d);
      first = false;
    }
    if (is_set_amountOf60d()) {
      if (!first) sb.append(", ");
      sb.append("amountOf60d:");
      sb.append(this.amountOf60d);
      first = false;
    }
    if (is_set_amountOf120d()) {
      if (!first) sb.append(", ");
      sb.append("amountOf120d:");
      sb.append(this.amountOf120d);
      first = false;
    }
    if (is_set_amountOf250d()) {
      if (!first) sb.append(", ");
      sb.append("amountOf250d:");
      sb.append(this.amountOf250d);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("range:");
    sb.append(this.range);
    first = false;
    if (is_set_rangeOf5d()) {
      if (!first) sb.append(", ");
      sb.append("rangeOf5d:");
      sb.append(this.rangeOf5d);
      first = false;
    }
    if (is_set_rangeOf20d()) {
      if (!first) sb.append(", ");
      sb.append("rangeOf20d:");
      sb.append(this.rangeOf20d);
      first = false;
    }
    if (is_set_rangeOf60d()) {
      if (!first) sb.append(", ");
      sb.append("rangeOf60d:");
      sb.append(this.rangeOf60d);
      first = false;
    }
    if (is_set_rangeOf120d()) {
      if (!first) sb.append(", ");
      sb.append("rangeOf120d:");
      sb.append(this.rangeOf120d);
      first = false;
    }
    if (is_set_rangeOf250d()) {
      if (!first) sb.append(", ");
      sb.append("rangeOf250d:");
      sb.append(this.rangeOf250d);
      first = false;
    }
    if (is_set_turnover()) {
      if (!first) sb.append(", ");
      sb.append("turnover:");
      sb.append(this.turnover);
      first = false;
    }
    if (is_set_turnoverOf5d()) {
      if (!first) sb.append(", ");
      sb.append("turnoverOf5d:");
      sb.append(this.turnoverOf5d);
      first = false;
    }
    if (is_set_turnoverOf20d()) {
      if (!first) sb.append(", ");
      sb.append("turnoverOf20d:");
      sb.append(this.turnoverOf20d);
      first = false;
    }
    if (is_set_turnoverOf60d()) {
      if (!first) sb.append(", ");
      sb.append("turnoverOf60d:");
      sb.append(this.turnoverOf60d);
      first = false;
    }
    if (is_set_turnoverOf120d()) {
      if (!first) sb.append(", ");
      sb.append("turnoverOf120d:");
      sb.append(this.turnoverOf120d);
      first = false;
    }
    if (is_set_turnoverOf250d()) {
      if (!first) sb.append(", ");
      sb.append("turnoverOf250d:");
      sb.append(this.turnoverOf250d);
      first = false;
    }
    if (is_set_riseStay()) {
      if (!first) sb.append(", ");
      sb.append("riseStay:");
      sb.append(this.riseStay);
      first = false;
    }
    if (is_set_fallStay()) {
      if (!first) sb.append(", ");
      sb.append("fallStay:");
      sb.append(this.fallStay);
      first = false;
    }
    if (is_set_valuation()) {
      if (!first) sb.append(", ");
      sb.append("valuation:");
      sb.append(this.valuation);
      first = false;
    }
    if (is_set_circulationValue()) {
      if (!first) sb.append(", ");
      sb.append("circulationValue:");
      sb.append(this.circulationValue);
      first = false;
    }
    if (is_set_amplitude()) {
      if (!first) sb.append(", ");
      sb.append("amplitude:");
      sb.append(this.amplitude);
      first = false;
    }
    if (is_set_amplitudeOf5d()) {
      if (!first) sb.append(", ");
      sb.append("amplitudeOf5d:");
      sb.append(this.amplitudeOf5d);
      first = false;
    }
    if (is_set_amplitudeOf20d()) {
      if (!first) sb.append(", ");
      sb.append("amplitudeOf20d:");
      sb.append(this.amplitudeOf20d);
      first = false;
    }
    if (is_set_amplitudeOf60d()) {
      if (!first) sb.append(", ");
      sb.append("amplitudeOf60d:");
      sb.append(this.amplitudeOf60d);
      first = false;
    }
    if (is_set_amplitudeOf120d()) {
      if (!first) sb.append(", ");
      sb.append("amplitudeOf120d:");
      sb.append(this.amplitudeOf120d);
      first = false;
    }
    if (is_set_amplitudeOf250d()) {
      if (!first) sb.append(", ");
      sb.append("amplitudeOf250d:");
      sb.append(this.amplitudeOf250d);
      first = false;
    }
    if (is_set_listedDays()) {
      if (!first) sb.append(", ");
      sb.append("listedDays:");
      sb.append(this.listedDays);
      first = false;
    }
    if (is_set_industry()) {
      if (!first) sb.append(", ");
      sb.append("industry:");
      if (this.industry == null) {
        sb.append("null");
      } else {
        sb.append(this.industry);
      }
      first = false;
    }
    if (is_set_concept()) {
      if (!first) sb.append(", ");
      sb.append("concept:");
      if (this.concept == null) {
        sb.append("null");
      } else {
        sb.append(this.concept);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("pageNum:");
    sb.append(this.pageNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!is_set_code()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
    }

    if (!is_set_close()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'close' is unset! Struct:" + toString());
    }

    if (!is_set_range()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'range' is unset! Struct:" + toString());
    }

    if (!is_set_pageNum()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pageNum' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class FilterStockResultStandardSchemeFactory implements SchemeFactory {
    public FilterStockResultStandardScheme getScheme() {
      return new FilterStockResultStandardScheme();
    }
  }

  private static class FilterStockResultStandardScheme extends StandardScheme<FilterStockResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FilterStockResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.set_name_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.set_code_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.close = iprot.readDouble();
              struct.set_close_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.set_amount_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT_OF5D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amountOf5d = iprot.readDouble();
              struct.set_amountOf5d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AMOUNT_OF20D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amountOf20d = iprot.readDouble();
              struct.set_amountOf20d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AMOUNT_OF60D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amountOf60d = iprot.readDouble();
              struct.set_amountOf60d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AMOUNT_OF120D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amountOf120d = iprot.readDouble();
              struct.set_amountOf120d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AMOUNT_OF250D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amountOf250d = iprot.readDouble();
              struct.set_amountOf250d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.range = iprot.readDouble();
              struct.set_range_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RANGE_OF5D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOf5d = iprot.readDouble();
              struct.set_rangeOf5d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RANGE_OF20D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOf20d = iprot.readDouble();
              struct.set_rangeOf20d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RANGE_OF60D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOf60d = iprot.readDouble();
              struct.set_rangeOf60d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RANGE_OF120D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOf120d = iprot.readDouble();
              struct.set_rangeOf120d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RANGE_OF250D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOf250d = iprot.readDouble();
              struct.set_rangeOf250d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.set_turnover_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TURNOVER_OF5D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverOf5d = iprot.readDouble();
              struct.set_turnoverOf5d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TURNOVER_OF20D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverOf20d = iprot.readDouble();
              struct.set_turnoverOf20d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TURNOVER_OF60D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverOf60d = iprot.readDouble();
              struct.set_turnoverOf60d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TURNOVER_OF120D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverOf120d = iprot.readDouble();
              struct.set_turnoverOf120d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TURNOVER_OF250D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverOf250d = iprot.readDouble();
              struct.set_turnoverOf250d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RISE_STAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.riseStay = iprot.readI16();
              struct.set_riseStay_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FALL_STAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.fallStay = iprot.readI16();
              struct.set_fallStay_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VALUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.valuation = iprot.readDouble();
              struct.set_valuation_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CIRCULATION_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.circulationValue = iprot.readDouble();
              struct.set_circulationValue_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // AMPLITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitude = iprot.readDouble();
              struct.set_amplitude_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // AMPLITUDE_OF5D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitudeOf5d = iprot.readDouble();
              struct.set_amplitudeOf5d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // AMPLITUDE_OF20D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitudeOf20d = iprot.readDouble();
              struct.set_amplitudeOf20d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // AMPLITUDE_OF60D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitudeOf60d = iprot.readDouble();
              struct.set_amplitudeOf60d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // AMPLITUDE_OF120D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitudeOf120d = iprot.readDouble();
              struct.set_amplitudeOf120d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // AMPLITUDE_OF250D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amplitudeOf250d = iprot.readDouble();
              struct.set_amplitudeOf250d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LISTED_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listedDays = iprot.readI32();
              struct.set_listedDays_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industry = iprot.readString();
              struct.set_industry_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CONCEPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.concept = iprot.readString();
              struct.set_concept_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.set_pageNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FilterStockResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLOSE_FIELD_DESC);
      oprot.writeDouble(struct.close);
      oprot.writeFieldEnd();
      if (struct.is_set_amount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amountOf5d()) {
        oprot.writeFieldBegin(AMOUNT_OF5D_FIELD_DESC);
        oprot.writeDouble(struct.amountOf5d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amountOf20d()) {
        oprot.writeFieldBegin(AMOUNT_OF20D_FIELD_DESC);
        oprot.writeDouble(struct.amountOf20d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amountOf60d()) {
        oprot.writeFieldBegin(AMOUNT_OF60D_FIELD_DESC);
        oprot.writeDouble(struct.amountOf60d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amountOf120d()) {
        oprot.writeFieldBegin(AMOUNT_OF120D_FIELD_DESC);
        oprot.writeDouble(struct.amountOf120d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amountOf250d()) {
        oprot.writeFieldBegin(AMOUNT_OF250D_FIELD_DESC);
        oprot.writeDouble(struct.amountOf250d);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANGE_FIELD_DESC);
      oprot.writeDouble(struct.range);
      oprot.writeFieldEnd();
      if (struct.is_set_rangeOf5d()) {
        oprot.writeFieldBegin(RANGE_OF5D_FIELD_DESC);
        oprot.writeDouble(struct.rangeOf5d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_rangeOf20d()) {
        oprot.writeFieldBegin(RANGE_OF20D_FIELD_DESC);
        oprot.writeDouble(struct.rangeOf20d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_rangeOf60d()) {
        oprot.writeFieldBegin(RANGE_OF60D_FIELD_DESC);
        oprot.writeDouble(struct.rangeOf60d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_rangeOf120d()) {
        oprot.writeFieldBegin(RANGE_OF120D_FIELD_DESC);
        oprot.writeDouble(struct.rangeOf120d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_rangeOf250d()) {
        oprot.writeFieldBegin(RANGE_OF250D_FIELD_DESC);
        oprot.writeDouble(struct.rangeOf250d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnover()) {
        oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
        oprot.writeDouble(struct.turnover);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnoverOf5d()) {
        oprot.writeFieldBegin(TURNOVER_OF5D_FIELD_DESC);
        oprot.writeDouble(struct.turnoverOf5d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnoverOf20d()) {
        oprot.writeFieldBegin(TURNOVER_OF20D_FIELD_DESC);
        oprot.writeDouble(struct.turnoverOf20d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnoverOf60d()) {
        oprot.writeFieldBegin(TURNOVER_OF60D_FIELD_DESC);
        oprot.writeDouble(struct.turnoverOf60d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnoverOf120d()) {
        oprot.writeFieldBegin(TURNOVER_OF120D_FIELD_DESC);
        oprot.writeDouble(struct.turnoverOf120d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_turnoverOf250d()) {
        oprot.writeFieldBegin(TURNOVER_OF250D_FIELD_DESC);
        oprot.writeDouble(struct.turnoverOf250d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_riseStay()) {
        oprot.writeFieldBegin(RISE_STAY_FIELD_DESC);
        oprot.writeI16(struct.riseStay);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_fallStay()) {
        oprot.writeFieldBegin(FALL_STAY_FIELD_DESC);
        oprot.writeI16(struct.fallStay);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_valuation()) {
        oprot.writeFieldBegin(VALUATION_FIELD_DESC);
        oprot.writeDouble(struct.valuation);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_circulationValue()) {
        oprot.writeFieldBegin(CIRCULATION_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.circulationValue);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitude()) {
        oprot.writeFieldBegin(AMPLITUDE_FIELD_DESC);
        oprot.writeDouble(struct.amplitude);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitudeOf5d()) {
        oprot.writeFieldBegin(AMPLITUDE_OF5D_FIELD_DESC);
        oprot.writeDouble(struct.amplitudeOf5d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitudeOf20d()) {
        oprot.writeFieldBegin(AMPLITUDE_OF20D_FIELD_DESC);
        oprot.writeDouble(struct.amplitudeOf20d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitudeOf60d()) {
        oprot.writeFieldBegin(AMPLITUDE_OF60D_FIELD_DESC);
        oprot.writeDouble(struct.amplitudeOf60d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitudeOf120d()) {
        oprot.writeFieldBegin(AMPLITUDE_OF120D_FIELD_DESC);
        oprot.writeDouble(struct.amplitudeOf120d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_amplitudeOf250d()) {
        oprot.writeFieldBegin(AMPLITUDE_OF250D_FIELD_DESC);
        oprot.writeDouble(struct.amplitudeOf250d);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_listedDays()) {
        oprot.writeFieldBegin(LISTED_DAYS_FIELD_DESC);
        oprot.writeI32(struct.listedDays);
        oprot.writeFieldEnd();
      }
      if (struct.industry != null) {
        if (struct.is_set_industry()) {
          oprot.writeFieldBegin(INDUSTRY_FIELD_DESC);
          oprot.writeString(struct.industry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.concept != null) {
        if (struct.is_set_concept()) {
          oprot.writeFieldBegin(CONCEPT_FIELD_DESC);
          oprot.writeString(struct.concept);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.pageNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilterStockResultTupleSchemeFactory implements SchemeFactory {
    public FilterStockResultTupleScheme getScheme() {
      return new FilterStockResultTupleScheme();
    }
  }

  private static class FilterStockResultTupleScheme extends TupleScheme<FilterStockResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FilterStockResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.code);
      oprot.writeDouble(struct.close);
      oprot.writeDouble(struct.range);
      oprot.writeI32(struct.pageNum);
      BitSet optionals = new BitSet();
      if (struct.is_set_amount()) {
        optionals.set(0);
      }
      if (struct.is_set_amountOf5d()) {
        optionals.set(1);
      }
      if (struct.is_set_amountOf20d()) {
        optionals.set(2);
      }
      if (struct.is_set_amountOf60d()) {
        optionals.set(3);
      }
      if (struct.is_set_amountOf120d()) {
        optionals.set(4);
      }
      if (struct.is_set_amountOf250d()) {
        optionals.set(5);
      }
      if (struct.is_set_rangeOf5d()) {
        optionals.set(6);
      }
      if (struct.is_set_rangeOf20d()) {
        optionals.set(7);
      }
      if (struct.is_set_rangeOf60d()) {
        optionals.set(8);
      }
      if (struct.is_set_rangeOf120d()) {
        optionals.set(9);
      }
      if (struct.is_set_rangeOf250d()) {
        optionals.set(10);
      }
      if (struct.is_set_turnover()) {
        optionals.set(11);
      }
      if (struct.is_set_turnoverOf5d()) {
        optionals.set(12);
      }
      if (struct.is_set_turnoverOf20d()) {
        optionals.set(13);
      }
      if (struct.is_set_turnoverOf60d()) {
        optionals.set(14);
      }
      if (struct.is_set_turnoverOf120d()) {
        optionals.set(15);
      }
      if (struct.is_set_turnoverOf250d()) {
        optionals.set(16);
      }
      if (struct.is_set_riseStay()) {
        optionals.set(17);
      }
      if (struct.is_set_fallStay()) {
        optionals.set(18);
      }
      if (struct.is_set_valuation()) {
        optionals.set(19);
      }
      if (struct.is_set_circulationValue()) {
        optionals.set(20);
      }
      if (struct.is_set_amplitude()) {
        optionals.set(21);
      }
      if (struct.is_set_amplitudeOf5d()) {
        optionals.set(22);
      }
      if (struct.is_set_amplitudeOf20d()) {
        optionals.set(23);
      }
      if (struct.is_set_amplitudeOf60d()) {
        optionals.set(24);
      }
      if (struct.is_set_amplitudeOf120d()) {
        optionals.set(25);
      }
      if (struct.is_set_amplitudeOf250d()) {
        optionals.set(26);
      }
      if (struct.is_set_listedDays()) {
        optionals.set(27);
      }
      if (struct.is_set_industry()) {
        optionals.set(28);
      }
      if (struct.is_set_concept()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.is_set_amount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.is_set_amountOf5d()) {
        oprot.writeDouble(struct.amountOf5d);
      }
      if (struct.is_set_amountOf20d()) {
        oprot.writeDouble(struct.amountOf20d);
      }
      if (struct.is_set_amountOf60d()) {
        oprot.writeDouble(struct.amountOf60d);
      }
      if (struct.is_set_amountOf120d()) {
        oprot.writeDouble(struct.amountOf120d);
      }
      if (struct.is_set_amountOf250d()) {
        oprot.writeDouble(struct.amountOf250d);
      }
      if (struct.is_set_rangeOf5d()) {
        oprot.writeDouble(struct.rangeOf5d);
      }
      if (struct.is_set_rangeOf20d()) {
        oprot.writeDouble(struct.rangeOf20d);
      }
      if (struct.is_set_rangeOf60d()) {
        oprot.writeDouble(struct.rangeOf60d);
      }
      if (struct.is_set_rangeOf120d()) {
        oprot.writeDouble(struct.rangeOf120d);
      }
      if (struct.is_set_rangeOf250d()) {
        oprot.writeDouble(struct.rangeOf250d);
      }
      if (struct.is_set_turnover()) {
        oprot.writeDouble(struct.turnover);
      }
      if (struct.is_set_turnoverOf5d()) {
        oprot.writeDouble(struct.turnoverOf5d);
      }
      if (struct.is_set_turnoverOf20d()) {
        oprot.writeDouble(struct.turnoverOf20d);
      }
      if (struct.is_set_turnoverOf60d()) {
        oprot.writeDouble(struct.turnoverOf60d);
      }
      if (struct.is_set_turnoverOf120d()) {
        oprot.writeDouble(struct.turnoverOf120d);
      }
      if (struct.is_set_turnoverOf250d()) {
        oprot.writeDouble(struct.turnoverOf250d);
      }
      if (struct.is_set_riseStay()) {
        oprot.writeI16(struct.riseStay);
      }
      if (struct.is_set_fallStay()) {
        oprot.writeI16(struct.fallStay);
      }
      if (struct.is_set_valuation()) {
        oprot.writeDouble(struct.valuation);
      }
      if (struct.is_set_circulationValue()) {
        oprot.writeDouble(struct.circulationValue);
      }
      if (struct.is_set_amplitude()) {
        oprot.writeDouble(struct.amplitude);
      }
      if (struct.is_set_amplitudeOf5d()) {
        oprot.writeDouble(struct.amplitudeOf5d);
      }
      if (struct.is_set_amplitudeOf20d()) {
        oprot.writeDouble(struct.amplitudeOf20d);
      }
      if (struct.is_set_amplitudeOf60d()) {
        oprot.writeDouble(struct.amplitudeOf60d);
      }
      if (struct.is_set_amplitudeOf120d()) {
        oprot.writeDouble(struct.amplitudeOf120d);
      }
      if (struct.is_set_amplitudeOf250d()) {
        oprot.writeDouble(struct.amplitudeOf250d);
      }
      if (struct.is_set_listedDays()) {
        oprot.writeI32(struct.listedDays);
      }
      if (struct.is_set_industry()) {
        oprot.writeString(struct.industry);
      }
      if (struct.is_set_concept()) {
        oprot.writeString(struct.concept);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FilterStockResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.set_name_isSet(true);
      struct.code = iprot.readString();
      struct.set_code_isSet(true);
      struct.close = iprot.readDouble();
      struct.set_close_isSet(true);
      struct.range = iprot.readDouble();
      struct.set_range_isSet(true);
      struct.pageNum = iprot.readI32();
      struct.set_pageNum_isSet(true);
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.amount = iprot.readDouble();
        struct.set_amount_isSet(true);
      }
      if (incoming.get(1)) {
        struct.amountOf5d = iprot.readDouble();
        struct.set_amountOf5d_isSet(true);
      }
      if (incoming.get(2)) {
        struct.amountOf20d = iprot.readDouble();
        struct.set_amountOf20d_isSet(true);
      }
      if (incoming.get(3)) {
        struct.amountOf60d = iprot.readDouble();
        struct.set_amountOf60d_isSet(true);
      }
      if (incoming.get(4)) {
        struct.amountOf120d = iprot.readDouble();
        struct.set_amountOf120d_isSet(true);
      }
      if (incoming.get(5)) {
        struct.amountOf250d = iprot.readDouble();
        struct.set_amountOf250d_isSet(true);
      }
      if (incoming.get(6)) {
        struct.rangeOf5d = iprot.readDouble();
        struct.set_rangeOf5d_isSet(true);
      }
      if (incoming.get(7)) {
        struct.rangeOf20d = iprot.readDouble();
        struct.set_rangeOf20d_isSet(true);
      }
      if (incoming.get(8)) {
        struct.rangeOf60d = iprot.readDouble();
        struct.set_rangeOf60d_isSet(true);
      }
      if (incoming.get(9)) {
        struct.rangeOf120d = iprot.readDouble();
        struct.set_rangeOf120d_isSet(true);
      }
      if (incoming.get(10)) {
        struct.rangeOf250d = iprot.readDouble();
        struct.set_rangeOf250d_isSet(true);
      }
      if (incoming.get(11)) {
        struct.turnover = iprot.readDouble();
        struct.set_turnover_isSet(true);
      }
      if (incoming.get(12)) {
        struct.turnoverOf5d = iprot.readDouble();
        struct.set_turnoverOf5d_isSet(true);
      }
      if (incoming.get(13)) {
        struct.turnoverOf20d = iprot.readDouble();
        struct.set_turnoverOf20d_isSet(true);
      }
      if (incoming.get(14)) {
        struct.turnoverOf60d = iprot.readDouble();
        struct.set_turnoverOf60d_isSet(true);
      }
      if (incoming.get(15)) {
        struct.turnoverOf120d = iprot.readDouble();
        struct.set_turnoverOf120d_isSet(true);
      }
      if (incoming.get(16)) {
        struct.turnoverOf250d = iprot.readDouble();
        struct.set_turnoverOf250d_isSet(true);
      }
      if (incoming.get(17)) {
        struct.riseStay = iprot.readI16();
        struct.set_riseStay_isSet(true);
      }
      if (incoming.get(18)) {
        struct.fallStay = iprot.readI16();
        struct.set_fallStay_isSet(true);
      }
      if (incoming.get(19)) {
        struct.valuation = iprot.readDouble();
        struct.set_valuation_isSet(true);
      }
      if (incoming.get(20)) {
        struct.circulationValue = iprot.readDouble();
        struct.set_circulationValue_isSet(true);
      }
      if (incoming.get(21)) {
        struct.amplitude = iprot.readDouble();
        struct.set_amplitude_isSet(true);
      }
      if (incoming.get(22)) {
        struct.amplitudeOf5d = iprot.readDouble();
        struct.set_amplitudeOf5d_isSet(true);
      }
      if (incoming.get(23)) {
        struct.amplitudeOf20d = iprot.readDouble();
        struct.set_amplitudeOf20d_isSet(true);
      }
      if (incoming.get(24)) {
        struct.amplitudeOf60d = iprot.readDouble();
        struct.set_amplitudeOf60d_isSet(true);
      }
      if (incoming.get(25)) {
        struct.amplitudeOf120d = iprot.readDouble();
        struct.set_amplitudeOf120d_isSet(true);
      }
      if (incoming.get(26)) {
        struct.amplitudeOf250d = iprot.readDouble();
        struct.set_amplitudeOf250d_isSet(true);
      }
      if (incoming.get(27)) {
        struct.listedDays = iprot.readI32();
        struct.set_listedDays_isSet(true);
      }
      if (incoming.get(28)) {
        struct.industry = iprot.readString();
        struct.set_industry_isSet(true);
      }
      if (incoming.get(29)) {
        struct.concept = iprot.readString();
        struct.set_concept_isSet(true);
      }
    }
  }

}

