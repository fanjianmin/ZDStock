/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 基本面数据
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Fundamentals implements org.apache.thrift.TBase<Fundamentals, Fundamentals._Fields>, java.io.Serializable, Cloneable, Comparable<Fundamentals>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Fundamentals");

  private static final org.apache.thrift.protocol.TField PB_FIELD_DESC = new org.apache.thrift.protocol.TField("pb", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField EPS_FIELD_DESC = new org.apache.thrift.protocol.TField("eps", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FIXED_ASSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedAssets", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MKTCAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mktcap", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stockName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FundamentalsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FundamentalsTupleSchemeFactory());
  }

  private double pb; // required
  private double pe; // required
  private double eps; // required
  private double fixedAssets; // required
  private double mktcap; // required
  private String stockName; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeDouble(pb);
    out.writeDouble(pe);
    out.writeDouble(eps);
    out.writeDouble(fixedAssets);
    out.writeDouble(mktcap);
    out.writeString(stockName);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Fundamentals(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.pb = in.readDouble();
    this.pe = in.readDouble();
    this.eps = in.readDouble();
    this.fixedAssets = in.readDouble();
    this.mktcap = in.readDouble();
    this.stockName= in.readString();
  }

  public static final android.os.Parcelable.Creator<Fundamentals> CREATOR = new android.os.Parcelable.Creator<Fundamentals>() {
    @Override
    public Fundamentals[] newArray(int size) {
      return new Fundamentals[size];
    }

    @Override
    public Fundamentals createFromParcel(android.os.Parcel in) {
      return new Fundamentals(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PB((short)1, "pb"),
    PE((short)2, "pe"),
    EPS((short)3, "eps"),
    FIXED_ASSETS((short)4, "fixedAssets"),
    MKTCAP((short)5, "mktcap"),
    STOCK_NAME((short)6, "stockName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PB
          return PB;
        case 2: // PE
          return PE;
        case 3: // EPS
          return EPS;
        case 4: // FIXED_ASSETS
          return FIXED_ASSETS;
        case 5: // MKTCAP
          return MKTCAP;
        case 6: // STOCK_NAME
          return STOCK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PB_ISSET_ID = 0;
  private static final int __PE_ISSET_ID = 1;
  private static final int __EPS_ISSET_ID = 2;
  private static final int __FIXEDASSETS_ISSET_ID = 3;
  private static final int __MKTCAP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PB, new org.apache.thrift.meta_data.FieldMetaData("pb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EPS, new org.apache.thrift.meta_data.FieldMetaData("eps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_ASSETS, new org.apache.thrift.meta_data.FieldMetaData("fixedAssets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MKTCAP, new org.apache.thrift.meta_data.FieldMetaData("mktcap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stockName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Fundamentals.class, metaDataMap);
  }

  public Fundamentals() {
  }

  public Fundamentals(
    double pb,
    double pe,
    double eps,
    double fixedAssets,
    double mktcap,
    String stockName)
  {
    this();
    this.pb = pb;
    set_pb_isSet(true);
    this.pe = pe;
    set_pe_isSet(true);
    this.eps = eps;
    set_eps_isSet(true);
    this.fixedAssets = fixedAssets;
    set_fixedAssets_isSet(true);
    this.mktcap = mktcap;
    set_mktcap_isSet(true);
    this.stockName = stockName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Fundamentals(Fundamentals other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pb = other.pb;
    this.pe = other.pe;
    this.eps = other.eps;
    this.fixedAssets = other.fixedAssets;
    this.mktcap = other.mktcap;
    if (other.is_set_stockName()) {
      this.stockName = other.stockName;
    }
  }

  public Fundamentals deepCopy() {
    return new Fundamentals(this);
  }

  public void clear() {
    set_pb_isSet(false);
    this.pb = 0.0;
    set_pe_isSet(false);
    this.pe = 0.0;
    set_eps_isSet(false);
    this.eps = 0.0;
    set_fixedAssets_isSet(false);
    this.fixedAssets = 0.0;
    set_mktcap_isSet(false);
    this.mktcap = 0.0;
    this.stockName = null;
  }

  public double get_pb() {
    return this.pb;
  }

  public void set_pb(double pb) {
    this.pb = pb;
    set_pb_isSet(true);
  }

  public void unset_pb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PB_ISSET_ID);
  }

  /** Returns true if field pb is set (has been assigned a value) and false otherwise */
  public boolean is_set_pb() {
    return EncodingUtils.testBit(__isset_bitfield, __PB_ISSET_ID);
  }

  public void set_pb_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PB_ISSET_ID, value);
  }

  public double get_pe() {
    return this.pe;
  }

  public void set_pe(double pe) {
    this.pe = pe;
    set_pe_isSet(true);
  }

  public void unset_pe() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PE_ISSET_ID);
  }

  /** Returns true if field pe is set (has been assigned a value) and false otherwise */
  public boolean is_set_pe() {
    return EncodingUtils.testBit(__isset_bitfield, __PE_ISSET_ID);
  }

  public void set_pe_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PE_ISSET_ID, value);
  }

  public double get_eps() {
    return this.eps;
  }

  public void set_eps(double eps) {
    this.eps = eps;
    set_eps_isSet(true);
  }

  public void unset_eps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPS_ISSET_ID);
  }

  /** Returns true if field eps is set (has been assigned a value) and false otherwise */
  public boolean is_set_eps() {
    return EncodingUtils.testBit(__isset_bitfield, __EPS_ISSET_ID);
  }

  public void set_eps_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPS_ISSET_ID, value);
  }

  public double get_fixedAssets() {
    return this.fixedAssets;
  }

  public void set_fixedAssets(double fixedAssets) {
    this.fixedAssets = fixedAssets;
    set_fixedAssets_isSet(true);
  }

  public void unset_fixedAssets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDASSETS_ISSET_ID);
  }

  /** Returns true if field fixedAssets is set (has been assigned a value) and false otherwise */
  public boolean is_set_fixedAssets() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDASSETS_ISSET_ID);
  }

  public void set_fixedAssets_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDASSETS_ISSET_ID, value);
  }

  public double get_mktcap() {
    return this.mktcap;
  }

  public void set_mktcap(double mktcap) {
    this.mktcap = mktcap;
    set_mktcap_isSet(true);
  }

  public void unset_mktcap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MKTCAP_ISSET_ID);
  }

  /** Returns true if field mktcap is set (has been assigned a value) and false otherwise */
  public boolean is_set_mktcap() {
    return EncodingUtils.testBit(__isset_bitfield, __MKTCAP_ISSET_ID);
  }

  public void set_mktcap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MKTCAP_ISSET_ID, value);
  }

  public String get_stockName() {
    return this.stockName;
  }

  public void set_stockName(String stockName) {
    this.stockName = stockName;
  }

  public void unset_stockName() {
    this.stockName = null;
  }

  /** Returns true if field stockName is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockName() {
    return this.stockName != null;
  }

  public void set_stockName_isSet(boolean value) {
    if (!value) {
      this.stockName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PB:
      if (value == null) {
        unset_pb();
      } else {
        set_pb((Double)value);
      }
      break;

    case PE:
      if (value == null) {
        unset_pe();
      } else {
        set_pe((Double)value);
      }
      break;

    case EPS:
      if (value == null) {
        unset_eps();
      } else {
        set_eps((Double)value);
      }
      break;

    case FIXED_ASSETS:
      if (value == null) {
        unset_fixedAssets();
      } else {
        set_fixedAssets((Double)value);
      }
      break;

    case MKTCAP:
      if (value == null) {
        unset_mktcap();
      } else {
        set_mktcap((Double)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unset_stockName();
      } else {
        set_stockName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PB:
      return get_pb();

    case PE:
      return get_pe();

    case EPS:
      return get_eps();

    case FIXED_ASSETS:
      return get_fixedAssets();

    case MKTCAP:
      return get_mktcap();

    case STOCK_NAME:
      return get_stockName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PB:
      return is_set_pb();
    case PE:
      return is_set_pe();
    case EPS:
      return is_set_eps();
    case FIXED_ASSETS:
      return is_set_fixedAssets();
    case MKTCAP:
      return is_set_mktcap();
    case STOCK_NAME:
      return is_set_stockName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Fundamentals)
      return this.equals((Fundamentals)that);
    return false;
  }

  public boolean equals(Fundamentals that) {
    if (that == null)
      return false;

    boolean this_present_pb = true;
    boolean that_present_pb = true;
    if (this_present_pb || that_present_pb) {
      if (!(this_present_pb && that_present_pb))
        return false;
      if (this.pb != that.pb)
        return false;
    }

    boolean this_present_pe = true;
    boolean that_present_pe = true;
    if (this_present_pe || that_present_pe) {
      if (!(this_present_pe && that_present_pe))
        return false;
      if (this.pe != that.pe)
        return false;
    }

    boolean this_present_eps = true;
    boolean that_present_eps = true;
    if (this_present_eps || that_present_eps) {
      if (!(this_present_eps && that_present_eps))
        return false;
      if (this.eps != that.eps)
        return false;
    }

    boolean this_present_fixedAssets = true;
    boolean that_present_fixedAssets = true;
    if (this_present_fixedAssets || that_present_fixedAssets) {
      if (!(this_present_fixedAssets && that_present_fixedAssets))
        return false;
      if (this.fixedAssets != that.fixedAssets)
        return false;
    }

    boolean this_present_mktcap = true;
    boolean that_present_mktcap = true;
    if (this_present_mktcap || that_present_mktcap) {
      if (!(this_present_mktcap && that_present_mktcap))
        return false;
      if (this.mktcap != that.mktcap)
        return false;
    }

    boolean this_present_stockName = true && this.is_set_stockName();
    boolean that_present_stockName = true && that.is_set_stockName();
    if (this_present_stockName || that_present_stockName) {
      if (!(this_present_stockName && that_present_stockName))
        return false;
      if (!this.stockName.equals(that.stockName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pb = true;
    list.add(present_pb);
    if (present_pb)
      list.add(pb);

    boolean present_pe = true;
    list.add(present_pe);
    if (present_pe)
      list.add(pe);

    boolean present_eps = true;
    list.add(present_eps);
    if (present_eps)
      list.add(eps);

    boolean present_fixedAssets = true;
    list.add(present_fixedAssets);
    if (present_fixedAssets)
      list.add(fixedAssets);

    boolean present_mktcap = true;
    list.add(present_mktcap);
    if (present_mktcap)
      list.add(mktcap);

    boolean present_stockName = true && (is_set_stockName());
    list.add(present_stockName);
    if (present_stockName)
      list.add(stockName);

    return list.hashCode();
  }

  @Override
  public int compareTo(Fundamentals other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_pb()).compareTo(other.is_set_pb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pb, other.pb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_pe()).compareTo(other.is_set_pe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_eps()).compareTo(other.is_set_eps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_eps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eps, other.eps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_fixedAssets()).compareTo(other.is_set_fixedAssets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_fixedAssets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedAssets, other.fixedAssets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_mktcap()).compareTo(other.is_set_mktcap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mktcap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mktcap, other.mktcap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockName()).compareTo(other.is_set_stockName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockName, other.stockName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Fundamentals(");
    boolean first = true;

    sb.append("pb:");
    sb.append(this.pb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pe:");
    sb.append(this.pe);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eps:");
    sb.append(this.eps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedAssets:");
    sb.append(this.fixedAssets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mktcap:");
    sb.append(this.mktcap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockName:");
    if (this.stockName == null) {
      sb.append("null");
    } else {
      sb.append(this.stockName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_pb()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pb' is unset! Struct:" + toString());
    }

    if (!is_set_pe()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pe' is unset! Struct:" + toString());
    }

    if (!is_set_eps()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eps' is unset! Struct:" + toString());
    }

    if (!is_set_fixedAssets()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fixedAssets' is unset! Struct:" + toString());
    }

    if (!is_set_mktcap()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mktcap' is unset! Struct:" + toString());
    }

    if (!is_set_stockName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class FundamentalsStandardSchemeFactory implements SchemeFactory {
    public FundamentalsStandardScheme getScheme() {
      return new FundamentalsStandardScheme();
    }
  }

  private static class FundamentalsStandardScheme extends StandardScheme<Fundamentals> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Fundamentals struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PB
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pb = iprot.readDouble();
              struct.set_pb_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pe = iprot.readDouble();
              struct.set_pe_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EPS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.eps = iprot.readDouble();
              struct.set_eps_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIXED_ASSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedAssets = iprot.readDouble();
              struct.set_fixedAssets_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MKTCAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mktcap = iprot.readDouble();
              struct.set_mktcap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockName = iprot.readString();
              struct.set_stockName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Fundamentals struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PB_FIELD_DESC);
      oprot.writeDouble(struct.pb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PE_FIELD_DESC);
      oprot.writeDouble(struct.pe);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EPS_FIELD_DESC);
      oprot.writeDouble(struct.eps);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_ASSETS_FIELD_DESC);
      oprot.writeDouble(struct.fixedAssets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MKTCAP_FIELD_DESC);
      oprot.writeDouble(struct.mktcap);
      oprot.writeFieldEnd();
      if (struct.stockName != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stockName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FundamentalsTupleSchemeFactory implements SchemeFactory {
    public FundamentalsTupleScheme getScheme() {
      return new FundamentalsTupleScheme();
    }
  }

  private static class FundamentalsTupleScheme extends TupleScheme<Fundamentals> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Fundamentals struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.pb);
      oprot.writeDouble(struct.pe);
      oprot.writeDouble(struct.eps);
      oprot.writeDouble(struct.fixedAssets);
      oprot.writeDouble(struct.mktcap);
      oprot.writeString(struct.stockName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Fundamentals struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pb = iprot.readDouble();
      struct.set_pb_isSet(true);
      struct.pe = iprot.readDouble();
      struct.set_pe_isSet(true);
      struct.eps = iprot.readDouble();
      struct.set_eps_isSet(true);
      struct.fixedAssets = iprot.readDouble();
      struct.set_fixedAssets_isSet(true);
      struct.mktcap = iprot.readDouble();
      struct.set_mktcap_isSet(true);
      struct.stockName = iprot.readString();
      struct.set_stockName_isSet(true);
    }
  }

}

