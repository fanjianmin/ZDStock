/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 日本云
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class IchimokuData implements org.apache.thrift.TBase<IchimokuData, IchimokuData._Fields>, java.io.Serializable, Cloneable, Comparable<IchimokuData>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IchimokuData");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("close", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField TENKAN_FIELD_DESC = new org.apache.thrift.protocol.TField("Tenkan", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField KIJUN_FIELD_DESC = new org.apache.thrift.protocol.TField("Kijun", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SENKOU_A_FIELD_DESC = new org.apache.thrift.protocol.TField("SenkouA", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SENKOU_B_FIELD_DESC = new org.apache.thrift.protocol.TField("SenkouB", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CHIKOU_FIELD_DESC = new org.apache.thrift.protocol.TField("Chikou", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IchimokuDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IchimokuDataTupleSchemeFactory());
  }

  private String date; // required
  private double close; // required
  private double Tenkan; // required
  private double Kijun; // required
  private double SenkouA; // required
  private double SenkouB; // required
  private double Chikou; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(date);
    out.writeDouble(close);
    out.writeDouble(Tenkan);
    out.writeDouble(Kijun);
    out.writeDouble(SenkouA);
    out.writeDouble(SenkouB);
    out.writeDouble(Chikou);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public IchimokuData(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.date= in.readString();
    this.close = in.readDouble();
    this.Tenkan = in.readDouble();
    this.Kijun = in.readDouble();
    this.SenkouA = in.readDouble();
    this.SenkouB = in.readDouble();
    this.Chikou = in.readDouble();
  }

  public static final android.os.Parcelable.Creator<IchimokuData> CREATOR = new android.os.Parcelable.Creator<IchimokuData>() {
    @Override
    public IchimokuData[] newArray(int size) {
      return new IchimokuData[size];
    }

    @Override
    public IchimokuData createFromParcel(android.os.Parcel in) {
      return new IchimokuData(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    CLOSE((short)2, "close"),
    TENKAN((short)3, "Tenkan"),
    KIJUN((short)4, "Kijun"),
    SENKOU_A((short)5, "SenkouA"),
    SENKOU_B((short)6, "SenkouB"),
    CHIKOU((short)7, "Chikou");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // CLOSE
          return CLOSE;
        case 3: // TENKAN
          return TENKAN;
        case 4: // KIJUN
          return KIJUN;
        case 5: // SENKOU_A
          return SENKOU_A;
        case 6: // SENKOU_B
          return SENKOU_B;
        case 7: // CHIKOU
          return CHIKOU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLOSE_ISSET_ID = 0;
  private static final int __TENKAN_ISSET_ID = 1;
  private static final int __KIJUN_ISSET_ID = 2;
  private static final int __SENKOUA_ISSET_ID = 3;
  private static final int __SENKOUB_ISSET_ID = 4;
  private static final int __CHIKOU_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSE, new org.apache.thrift.meta_data.FieldMetaData("close", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TENKAN, new org.apache.thrift.meta_data.FieldMetaData("Tenkan", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KIJUN, new org.apache.thrift.meta_data.FieldMetaData("Kijun", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SENKOU_A, new org.apache.thrift.meta_data.FieldMetaData("SenkouA", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SENKOU_B, new org.apache.thrift.meta_data.FieldMetaData("SenkouB", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHIKOU, new org.apache.thrift.meta_data.FieldMetaData("Chikou", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IchimokuData.class, metaDataMap);
  }

  public IchimokuData() {
  }

  public IchimokuData(
    String date,
    double close,
    double Tenkan,
    double Kijun,
    double SenkouA,
    double SenkouB,
    double Chikou)
  {
    this();
    this.date = date;
    this.close = close;
    set_close_isSet(true);
    this.Tenkan = Tenkan;
    set_Tenkan_isSet(true);
    this.Kijun = Kijun;
    set_Kijun_isSet(true);
    this.SenkouA = SenkouA;
    set_SenkouA_isSet(true);
    this.SenkouB = SenkouB;
    set_SenkouB_isSet(true);
    this.Chikou = Chikou;
    set_Chikou_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IchimokuData(IchimokuData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_date()) {
      this.date = other.date;
    }
    this.close = other.close;
    this.Tenkan = other.Tenkan;
    this.Kijun = other.Kijun;
    this.SenkouA = other.SenkouA;
    this.SenkouB = other.SenkouB;
    this.Chikou = other.Chikou;
  }

  public IchimokuData deepCopy() {
    return new IchimokuData(this);
  }

  public void clear() {
    this.date = null;
    set_close_isSet(false);
    this.close = 0.0;
    set_Tenkan_isSet(false);
    this.Tenkan = 0.0;
    set_Kijun_isSet(false);
    this.Kijun = 0.0;
    set_SenkouA_isSet(false);
    this.SenkouA = 0.0;
    set_SenkouB_isSet(false);
    this.SenkouB = 0.0;
    set_Chikou_isSet(false);
    this.Chikou = 0.0;
  }

  public String get_date() {
    return this.date;
  }

  public void set_date(String date) {
    this.date = date;
  }

  public void unset_date() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean is_set_date() {
    return this.date != null;
  }

  public void set_date_isSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public double get_close() {
    return this.close;
  }

  public void set_close(double close) {
    this.close = close;
    set_close_isSet(true);
  }

  public void unset_close() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  /** Returns true if field close is set (has been assigned a value) and false otherwise */
  public boolean is_set_close() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  public void set_close_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSE_ISSET_ID, value);
  }

  public double get_Tenkan() {
    return this.Tenkan;
  }

  public void set_Tenkan(double Tenkan) {
    this.Tenkan = Tenkan;
    set_Tenkan_isSet(true);
  }

  public void unset_Tenkan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENKAN_ISSET_ID);
  }

  /** Returns true if field Tenkan is set (has been assigned a value) and false otherwise */
  public boolean is_set_Tenkan() {
    return EncodingUtils.testBit(__isset_bitfield, __TENKAN_ISSET_ID);
  }

  public void set_Tenkan_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENKAN_ISSET_ID, value);
  }

  public double get_Kijun() {
    return this.Kijun;
  }

  public void set_Kijun(double Kijun) {
    this.Kijun = Kijun;
    set_Kijun_isSet(true);
  }

  public void unset_Kijun() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KIJUN_ISSET_ID);
  }

  /** Returns true if field Kijun is set (has been assigned a value) and false otherwise */
  public boolean is_set_Kijun() {
    return EncodingUtils.testBit(__isset_bitfield, __KIJUN_ISSET_ID);
  }

  public void set_Kijun_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KIJUN_ISSET_ID, value);
  }

  public double get_SenkouA() {
    return this.SenkouA;
  }

  public void set_SenkouA(double SenkouA) {
    this.SenkouA = SenkouA;
    set_SenkouA_isSet(true);
  }

  public void unset_SenkouA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENKOUA_ISSET_ID);
  }

  /** Returns true if field SenkouA is set (has been assigned a value) and false otherwise */
  public boolean is_set_SenkouA() {
    return EncodingUtils.testBit(__isset_bitfield, __SENKOUA_ISSET_ID);
  }

  public void set_SenkouA_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENKOUA_ISSET_ID, value);
  }

  public double get_SenkouB() {
    return this.SenkouB;
  }

  public void set_SenkouB(double SenkouB) {
    this.SenkouB = SenkouB;
    set_SenkouB_isSet(true);
  }

  public void unset_SenkouB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENKOUB_ISSET_ID);
  }

  /** Returns true if field SenkouB is set (has been assigned a value) and false otherwise */
  public boolean is_set_SenkouB() {
    return EncodingUtils.testBit(__isset_bitfield, __SENKOUB_ISSET_ID);
  }

  public void set_SenkouB_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENKOUB_ISSET_ID, value);
  }

  public double get_Chikou() {
    return this.Chikou;
  }

  public void set_Chikou(double Chikou) {
    this.Chikou = Chikou;
    set_Chikou_isSet(true);
  }

  public void unset_Chikou() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHIKOU_ISSET_ID);
  }

  /** Returns true if field Chikou is set (has been assigned a value) and false otherwise */
  public boolean is_set_Chikou() {
    return EncodingUtils.testBit(__isset_bitfield, __CHIKOU_ISSET_ID);
  }

  public void set_Chikou_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHIKOU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unset_date();
      } else {
        set_date((String)value);
      }
      break;

    case CLOSE:
      if (value == null) {
        unset_close();
      } else {
        set_close((Double)value);
      }
      break;

    case TENKAN:
      if (value == null) {
        unset_Tenkan();
      } else {
        set_Tenkan((Double)value);
      }
      break;

    case KIJUN:
      if (value == null) {
        unset_Kijun();
      } else {
        set_Kijun((Double)value);
      }
      break;

    case SENKOU_A:
      if (value == null) {
        unset_SenkouA();
      } else {
        set_SenkouA((Double)value);
      }
      break;

    case SENKOU_B:
      if (value == null) {
        unset_SenkouB();
      } else {
        set_SenkouB((Double)value);
      }
      break;

    case CHIKOU:
      if (value == null) {
        unset_Chikou();
      } else {
        set_Chikou((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return get_date();

    case CLOSE:
      return get_close();

    case TENKAN:
      return get_Tenkan();

    case KIJUN:
      return get_Kijun();

    case SENKOU_A:
      return get_SenkouA();

    case SENKOU_B:
      return get_SenkouB();

    case CHIKOU:
      return get_Chikou();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return is_set_date();
    case CLOSE:
      return is_set_close();
    case TENKAN:
      return is_set_Tenkan();
    case KIJUN:
      return is_set_Kijun();
    case SENKOU_A:
      return is_set_SenkouA();
    case SENKOU_B:
      return is_set_SenkouB();
    case CHIKOU:
      return is_set_Chikou();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IchimokuData)
      return this.equals((IchimokuData)that);
    return false;
  }

  public boolean equals(IchimokuData that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.is_set_date();
    boolean that_present_date = true && that.is_set_date();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_close = true;
    boolean that_present_close = true;
    if (this_present_close || that_present_close) {
      if (!(this_present_close && that_present_close))
        return false;
      if (this.close != that.close)
        return false;
    }

    boolean this_present_Tenkan = true;
    boolean that_present_Tenkan = true;
    if (this_present_Tenkan || that_present_Tenkan) {
      if (!(this_present_Tenkan && that_present_Tenkan))
        return false;
      if (this.Tenkan != that.Tenkan)
        return false;
    }

    boolean this_present_Kijun = true;
    boolean that_present_Kijun = true;
    if (this_present_Kijun || that_present_Kijun) {
      if (!(this_present_Kijun && that_present_Kijun))
        return false;
      if (this.Kijun != that.Kijun)
        return false;
    }

    boolean this_present_SenkouA = true;
    boolean that_present_SenkouA = true;
    if (this_present_SenkouA || that_present_SenkouA) {
      if (!(this_present_SenkouA && that_present_SenkouA))
        return false;
      if (this.SenkouA != that.SenkouA)
        return false;
    }

    boolean this_present_SenkouB = true;
    boolean that_present_SenkouB = true;
    if (this_present_SenkouB || that_present_SenkouB) {
      if (!(this_present_SenkouB && that_present_SenkouB))
        return false;
      if (this.SenkouB != that.SenkouB)
        return false;
    }

    boolean this_present_Chikou = true;
    boolean that_present_Chikou = true;
    if (this_present_Chikou || that_present_Chikou) {
      if (!(this_present_Chikou && that_present_Chikou))
        return false;
      if (this.Chikou != that.Chikou)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_date = true && (is_set_date());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_close = true;
    list.add(present_close);
    if (present_close)
      list.add(close);

    boolean present_Tenkan = true;
    list.add(present_Tenkan);
    if (present_Tenkan)
      list.add(Tenkan);

    boolean present_Kijun = true;
    list.add(present_Kijun);
    if (present_Kijun)
      list.add(Kijun);

    boolean present_SenkouA = true;
    list.add(present_SenkouA);
    if (present_SenkouA)
      list.add(SenkouA);

    boolean present_SenkouB = true;
    list.add(present_SenkouB);
    if (present_SenkouB)
      list.add(SenkouB);

    boolean present_Chikou = true;
    list.add(present_Chikou);
    if (present_Chikou)
      list.add(Chikou);

    return list.hashCode();
  }

  @Override
  public int compareTo(IchimokuData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_date()).compareTo(other.is_set_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_close()).compareTo(other.is_set_close());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_close()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close, other.close);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_Tenkan()).compareTo(other.is_set_Tenkan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_Tenkan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Tenkan, other.Tenkan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_Kijun()).compareTo(other.is_set_Kijun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_Kijun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Kijun, other.Kijun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_SenkouA()).compareTo(other.is_set_SenkouA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_SenkouA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SenkouA, other.SenkouA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_SenkouB()).compareTo(other.is_set_SenkouB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_SenkouB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SenkouB, other.SenkouB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_Chikou()).compareTo(other.is_set_Chikou());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_Chikou()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chikou, other.Chikou);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IchimokuData(");
    boolean first = true;

    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("close:");
    sb.append(this.close);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Tenkan:");
    sb.append(this.Tenkan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Kijun:");
    sb.append(this.Kijun);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SenkouA:");
    sb.append(this.SenkouA);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SenkouB:");
    sb.append(this.SenkouB);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Chikou:");
    sb.append(this.Chikou);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_date()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' is unset! Struct:" + toString());
    }

    if (!is_set_close()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'close' is unset! Struct:" + toString());
    }

    if (!is_set_Tenkan()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Tenkan' is unset! Struct:" + toString());
    }

    if (!is_set_Kijun()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Kijun' is unset! Struct:" + toString());
    }

    if (!is_set_SenkouA()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SenkouA' is unset! Struct:" + toString());
    }

    if (!is_set_SenkouB()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SenkouB' is unset! Struct:" + toString());
    }

    if (!is_set_Chikou()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Chikou' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class IchimokuDataStandardSchemeFactory implements SchemeFactory {
    public IchimokuDataStandardScheme getScheme() {
      return new IchimokuDataStandardScheme();
    }
  }

  private static class IchimokuDataStandardScheme extends StandardScheme<IchimokuData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IchimokuData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.set_date_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.close = iprot.readDouble();
              struct.set_close_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TENKAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Tenkan = iprot.readDouble();
              struct.set_Tenkan_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KIJUN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Kijun = iprot.readDouble();
              struct.set_Kijun_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SENKOU_A
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SenkouA = iprot.readDouble();
              struct.set_SenkouA_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENKOU_B
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SenkouB = iprot.readDouble();
              struct.set_SenkouB_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHIKOU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Chikou = iprot.readDouble();
              struct.set_Chikou_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IchimokuData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLOSE_FIELD_DESC);
      oprot.writeDouble(struct.close);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TENKAN_FIELD_DESC);
      oprot.writeDouble(struct.Tenkan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KIJUN_FIELD_DESC);
      oprot.writeDouble(struct.Kijun);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENKOU_A_FIELD_DESC);
      oprot.writeDouble(struct.SenkouA);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENKOU_B_FIELD_DESC);
      oprot.writeDouble(struct.SenkouB);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHIKOU_FIELD_DESC);
      oprot.writeDouble(struct.Chikou);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IchimokuDataTupleSchemeFactory implements SchemeFactory {
    public IchimokuDataTupleScheme getScheme() {
      return new IchimokuDataTupleScheme();
    }
  }

  private static class IchimokuDataTupleScheme extends TupleScheme<IchimokuData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IchimokuData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.date);
      oprot.writeDouble(struct.close);
      oprot.writeDouble(struct.Tenkan);
      oprot.writeDouble(struct.Kijun);
      oprot.writeDouble(struct.SenkouA);
      oprot.writeDouble(struct.SenkouB);
      oprot.writeDouble(struct.Chikou);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IchimokuData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.date = iprot.readString();
      struct.set_date_isSet(true);
      struct.close = iprot.readDouble();
      struct.set_close_isSet(true);
      struct.Tenkan = iprot.readDouble();
      struct.set_Tenkan_isSet(true);
      struct.Kijun = iprot.readDouble();
      struct.set_Kijun_isSet(true);
      struct.SenkouA = iprot.readDouble();
      struct.set_SenkouA_isSet(true);
      struct.SenkouB = iprot.readDouble();
      struct.set_SenkouB_isSet(true);
      struct.Chikou = iprot.readDouble();
      struct.set_Chikou_isSet(true);
    }
  }

}

