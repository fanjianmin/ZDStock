/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 邀请好友
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Invite implements org.apache.thrift.TBase<Invite, Invite._Fields>, java.io.Serializable, Cloneable, Comparable<Invite>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Invite");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GAIN_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("gainPoints", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InviteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InviteTupleSchemeFactory());
  }

  private int userId; // required
  private String avatar; // optional
  private String nickName; // required
  private String registerTime; // required
  private int gainPoints; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(userId);
    out.writeString(avatar);
    out.writeString(nickName);
    out.writeString(registerTime);
    out.writeInt(gainPoints);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Invite(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.userId = in.readInt();
    this.avatar= in.readString();
    this.nickName= in.readString();
    this.registerTime= in.readString();
    this.gainPoints = in.readInt();
  }

  public static final android.os.Parcelable.Creator<Invite> CREATOR = new android.os.Parcelable.Creator<Invite>() {
    @Override
    public Invite[] newArray(int size) {
      return new Invite[size];
    }

    @Override
    public Invite createFromParcel(android.os.Parcel in) {
      return new Invite(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    AVATAR((short)2, "avatar"),
    NICK_NAME((short)3, "nickName"),
    REGISTER_TIME((short)4, "registerTime"),
    GAIN_POINTS((short)5, "gainPoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // AVATAR
          return AVATAR;
        case 3: // NICK_NAME
          return NICK_NAME;
        case 4: // REGISTER_TIME
          return REGISTER_TIME;
        case 5: // GAIN_POINTS
          return GAIN_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __GAINPOINTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AVATAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAIN_POINTS, new org.apache.thrift.meta_data.FieldMetaData("gainPoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Invite.class, metaDataMap);
  }

  public Invite() {
  }

  public Invite(
    int userId,
    String nickName,
    String registerTime,
    int gainPoints)
  {
    this();
    this.userId = userId;
    set_userId_isSet(true);
    this.nickName = nickName;
    this.registerTime = registerTime;
    this.gainPoints = gainPoints;
    set_gainPoints_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Invite(Invite other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.is_set_avatar()) {
      this.avatar = other.avatar;
    }
    if (other.is_set_nickName()) {
      this.nickName = other.nickName;
    }
    if (other.is_set_registerTime()) {
      this.registerTime = other.registerTime;
    }
    this.gainPoints = other.gainPoints;
  }

  public Invite deepCopy() {
    return new Invite(this);
  }

  public void clear() {
    set_userId_isSet(false);
    this.userId = 0;
    this.avatar = null;
    this.nickName = null;
    this.registerTime = null;
    set_gainPoints_isSet(false);
    this.gainPoints = 0;
  }

  public int get_userId() {
    return this.userId;
  }

  public void set_userId(int userId) {
    this.userId = userId;
    set_userId_isSet(true);
  }

  public void unset_userId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean is_set_userId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void set_userId_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String get_avatar() {
    return this.avatar;
  }

  public void set_avatar(String avatar) {
    this.avatar = avatar;
  }

  public void unset_avatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean is_set_avatar() {
    return this.avatar != null;
  }

  public void set_avatar_isSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public String get_nickName() {
    return this.nickName;
  }

  public void set_nickName(String nickName) {
    this.nickName = nickName;
  }

  public void unset_nickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean is_set_nickName() {
    return this.nickName != null;
  }

  public void set_nickName_isSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String get_registerTime() {
    return this.registerTime;
  }

  public void set_registerTime(String registerTime) {
    this.registerTime = registerTime;
  }

  public void unset_registerTime() {
    this.registerTime = null;
  }

  /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_registerTime() {
    return this.registerTime != null;
  }

  public void set_registerTime_isSet(boolean value) {
    if (!value) {
      this.registerTime = null;
    }
  }

  public int get_gainPoints() {
    return this.gainPoints;
  }

  public void set_gainPoints(int gainPoints) {
    this.gainPoints = gainPoints;
    set_gainPoints_isSet(true);
  }

  public void unset_gainPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAINPOINTS_ISSET_ID);
  }

  /** Returns true if field gainPoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_gainPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __GAINPOINTS_ISSET_ID);
  }

  public void set_gainPoints_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAINPOINTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unset_userId();
      } else {
        set_userId((Integer)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unset_avatar();
      } else {
        set_avatar((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unset_nickName();
      } else {
        set_nickName((String)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unset_registerTime();
      } else {
        set_registerTime((String)value);
      }
      break;

    case GAIN_POINTS:
      if (value == null) {
        unset_gainPoints();
      } else {
        set_gainPoints((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return get_userId();

    case AVATAR:
      return get_avatar();

    case NICK_NAME:
      return get_nickName();

    case REGISTER_TIME:
      return get_registerTime();

    case GAIN_POINTS:
      return get_gainPoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return is_set_userId();
    case AVATAR:
      return is_set_avatar();
    case NICK_NAME:
      return is_set_nickName();
    case REGISTER_TIME:
      return is_set_registerTime();
    case GAIN_POINTS:
      return is_set_gainPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Invite)
      return this.equals((Invite)that);
    return false;
  }

  public boolean equals(Invite that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_avatar = true && this.is_set_avatar();
    boolean that_present_avatar = true && that.is_set_avatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_nickName = true && this.is_set_nickName();
    boolean that_present_nickName = true && that.is_set_nickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_registerTime = true && this.is_set_registerTime();
    boolean that_present_registerTime = true && that.is_set_registerTime();
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (!this.registerTime.equals(that.registerTime))
        return false;
    }

    boolean this_present_gainPoints = true;
    boolean that_present_gainPoints = true;
    if (this_present_gainPoints || that_present_gainPoints) {
      if (!(this_present_gainPoints && that_present_gainPoints))
        return false;
      if (this.gainPoints != that.gainPoints)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_avatar = true && (is_set_avatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_nickName = true && (is_set_nickName());
    list.add(present_nickName);
    if (present_nickName)
      list.add(nickName);

    boolean present_registerTime = true && (is_set_registerTime());
    list.add(present_registerTime);
    if (present_registerTime)
      list.add(registerTime);

    boolean present_gainPoints = true;
    list.add(present_gainPoints);
    if (present_gainPoints)
      list.add(gainPoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(Invite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_userId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_avatar()).compareTo(other.is_set_avatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_avatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_nickName()).compareTo(other.is_set_nickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_nickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_registerTime()).compareTo(other.is_set_registerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_registerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_gainPoints()).compareTo(other.is_set_gainPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_gainPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gainPoints, other.gainPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Invite(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (is_set_avatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTime:");
    if (this.registerTime == null) {
      sb.append("null");
    } else {
      sb.append(this.registerTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gainPoints:");
    sb.append(this.gainPoints);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_userId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' is unset! Struct:" + toString());
    }

    if (!is_set_nickName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nickName' is unset! Struct:" + toString());
    }

    if (!is_set_registerTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'registerTime' is unset! Struct:" + toString());
    }

    if (!is_set_gainPoints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gainPoints' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class InviteStandardSchemeFactory implements SchemeFactory {
    public InviteStandardScheme getScheme() {
      return new InviteStandardScheme();
    }
  }

  private static class InviteStandardScheme extends StandardScheme<Invite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Invite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.set_userId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.set_avatar_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.set_nickName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTime = iprot.readString();
              struct.set_registerTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GAIN_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gainPoints = iprot.readI32();
              struct.set_gainPoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Invite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.avatar != null) {
        if (struct.is_set_avatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.registerTime != null) {
        oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
        oprot.writeString(struct.registerTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GAIN_POINTS_FIELD_DESC);
      oprot.writeI32(struct.gainPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InviteTupleSchemeFactory implements SchemeFactory {
    public InviteTupleScheme getScheme() {
      return new InviteTupleScheme();
    }
  }

  private static class InviteTupleScheme extends TupleScheme<Invite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Invite struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.nickName);
      oprot.writeString(struct.registerTime);
      oprot.writeI32(struct.gainPoints);
      BitSet optionals = new BitSet();
      if (struct.is_set_avatar()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_avatar()) {
        oprot.writeString(struct.avatar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Invite struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.set_userId_isSet(true);
      struct.nickName = iprot.readString();
      struct.set_nickName_isSet(true);
      struct.registerTime = iprot.readString();
      struct.set_registerTime_isSet(true);
      struct.gainPoints = iprot.readI32();
      struct.set_gainPoints_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.avatar = iprot.readString();
        struct.set_avatar_isSet(true);
      }
    }
  }

}

