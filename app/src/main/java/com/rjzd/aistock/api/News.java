/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 新闻公告
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class News implements org.apache.thrift.TBase<News, News._Fields>, java.io.Serializable, Cloneable, Comparable<News>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("News");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEWS_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("newsDetail", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLIC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isHeadline", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewsTupleSchemeFactory());
  }

  private String title; // required
  private String newsDetail; // required
  private String publicDate; // required
  private String origin; // required
  private boolean isHeadline; // required
  private String url; // optional
  private String summary; // optional
  private String imageUrl; // optional
  private String type; // optional
  private String newsId; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(title);
    out.writeString(newsDetail);
    out.writeString(publicDate);
    out.writeString(origin);
    out.writeInt(isHeadline ? 1 : 0);
    out.writeString(url);
    out.writeString(summary);
    out.writeString(imageUrl);
    out.writeString(type);
    out.writeString(newsId);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public News(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.title= in.readString();
    this.newsDetail= in.readString();
    this.publicDate= in.readString();
    this.origin= in.readString();
    this.isHeadline = (in.readInt()==1);
    this.url= in.readString();
    this.summary= in.readString();
    this.imageUrl= in.readString();
    this.type= in.readString();
    this.newsId= in.readString();
  }

  public static final android.os.Parcelable.Creator<News> CREATOR = new android.os.Parcelable.Creator<News>() {
    @Override
    public News[] newArray(int size) {
      return new News[size];
    }

    @Override
    public News createFromParcel(android.os.Parcel in) {
      return new News(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    NEWS_DETAIL((short)2, "newsDetail"),
    PUBLIC_DATE((short)3, "publicDate"),
    ORIGIN((short)4, "origin"),
    IS_HEADLINE((short)5, "isHeadline"),
    URL((short)6, "url"),
    SUMMARY((short)7, "summary"),
    IMAGE_URL((short)8, "imageUrl"),
    TYPE((short)9, "type"),
    NEWS_ID((short)10, "newsId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // NEWS_DETAIL
          return NEWS_DETAIL;
        case 3: // PUBLIC_DATE
          return PUBLIC_DATE;
        case 4: // ORIGIN
          return ORIGIN;
        case 5: // IS_HEADLINE
          return IS_HEADLINE;
        case 6: // URL
          return URL;
        case 7: // SUMMARY
          return SUMMARY;
        case 8: // IMAGE_URL
          return IMAGE_URL;
        case 9: // TYPE
          return TYPE;
        case 10: // NEWS_ID
          return NEWS_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISHEADLINE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.URL,_Fields.SUMMARY,_Fields.IMAGE_URL,_Fields.TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEWS_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("newsDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_DATE, new org.apache.thrift.meta_data.FieldMetaData("publicDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("isHeadline", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(News.class, metaDataMap);
  }

  public News() {
  }

  public News(
    String title,
    String newsDetail,
    String publicDate,
    String origin,
    boolean isHeadline,
    String newsId)
  {
    this();
    this.title = title;
    this.newsDetail = newsDetail;
    this.publicDate = publicDate;
    this.origin = origin;
    this.isHeadline = isHeadline;
    set_isHeadline_isSet(true);
    this.newsId = newsId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public News(News other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_title()) {
      this.title = other.title;
    }
    if (other.is_set_newsDetail()) {
      this.newsDetail = other.newsDetail;
    }
    if (other.is_set_publicDate()) {
      this.publicDate = other.publicDate;
    }
    if (other.is_set_origin()) {
      this.origin = other.origin;
    }
    this.isHeadline = other.isHeadline;
    if (other.is_set_url()) {
      this.url = other.url;
    }
    if (other.is_set_summary()) {
      this.summary = other.summary;
    }
    if (other.is_set_imageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.is_set_type()) {
      this.type = other.type;
    }
    if (other.is_set_newsId()) {
      this.newsId = other.newsId;
    }
  }

  public News deepCopy() {
    return new News(this);
  }

  public void clear() {
    this.title = null;
    this.newsDetail = null;
    this.publicDate = null;
    this.origin = null;
    set_isHeadline_isSet(false);
    this.isHeadline = false;
    this.url = null;
    this.summary = null;
    this.imageUrl = null;
    this.type = null;
    this.newsId = null;
  }

  public String get_title() {
    return this.title;
  }

  public void set_title(String title) {
    this.title = title;
  }

  public void unset_title() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean is_set_title() {
    return this.title != null;
  }

  public void set_title_isSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String get_newsDetail() {
    return this.newsDetail;
  }

  public void set_newsDetail(String newsDetail) {
    this.newsDetail = newsDetail;
  }

  public void unset_newsDetail() {
    this.newsDetail = null;
  }

  /** Returns true if field newsDetail is set (has been assigned a value) and false otherwise */
  public boolean is_set_newsDetail() {
    return this.newsDetail != null;
  }

  public void set_newsDetail_isSet(boolean value) {
    if (!value) {
      this.newsDetail = null;
    }
  }

  public String get_publicDate() {
    return this.publicDate;
  }

  public void set_publicDate(String publicDate) {
    this.publicDate = publicDate;
  }

  public void unset_publicDate() {
    this.publicDate = null;
  }

  /** Returns true if field publicDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_publicDate() {
    return this.publicDate != null;
  }

  public void set_publicDate_isSet(boolean value) {
    if (!value) {
      this.publicDate = null;
    }
  }

  public String get_origin() {
    return this.origin;
  }

  public void set_origin(String origin) {
    this.origin = origin;
  }

  public void unset_origin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean is_set_origin() {
    return this.origin != null;
  }

  public void set_origin_isSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public boolean is_isHeadline() {
    return this.isHeadline;
  }

  public void set_isHeadline(boolean isHeadline) {
    this.isHeadline = isHeadline;
    set_isHeadline_isSet(true);
  }

  public void unset_isHeadline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHEADLINE_ISSET_ID);
  }

  /** Returns true if field isHeadline is set (has been assigned a value) and false otherwise */
  public boolean is_set_isHeadline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHEADLINE_ISSET_ID);
  }

  public void set_isHeadline_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHEADLINE_ISSET_ID, value);
  }

  public String get_url() {
    return this.url;
  }

  public void set_url(String url) {
    this.url = url;
  }

  public void unset_url() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean is_set_url() {
    return this.url != null;
  }

  public void set_url_isSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String get_summary() {
    return this.summary;
  }

  public void set_summary(String summary) {
    this.summary = summary;
  }

  public void unset_summary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean is_set_summary() {
    return this.summary != null;
  }

  public void set_summary_isSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public String get_imageUrl() {
    return this.imageUrl;
  }

  public void set_imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unset_imageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean is_set_imageUrl() {
    return this.imageUrl != null;
  }

  public void set_imageUrl_isSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public String get_type() {
    return this.type;
  }

  public void set_type(String type) {
    this.type = type;
  }

  public void unset_type() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean is_set_type() {
    return this.type != null;
  }

  public void set_type_isSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String get_newsId() {
    return this.newsId;
  }

  public void set_newsId(String newsId) {
    this.newsId = newsId;
  }

  public void unset_newsId() {
    this.newsId = null;
  }

  /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
  public boolean is_set_newsId() {
    return this.newsId != null;
  }

  public void set_newsId_isSet(boolean value) {
    if (!value) {
      this.newsId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unset_title();
      } else {
        set_title((String)value);
      }
      break;

    case NEWS_DETAIL:
      if (value == null) {
        unset_newsDetail();
      } else {
        set_newsDetail((String)value);
      }
      break;

    case PUBLIC_DATE:
      if (value == null) {
        unset_publicDate();
      } else {
        set_publicDate((String)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unset_origin();
      } else {
        set_origin((String)value);
      }
      break;

    case IS_HEADLINE:
      if (value == null) {
        unset_isHeadline();
      } else {
        set_isHeadline((Boolean)value);
      }
      break;

    case URL:
      if (value == null) {
        unset_url();
      } else {
        set_url((String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unset_summary();
      } else {
        set_summary((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unset_imageUrl();
      } else {
        set_imageUrl((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unset_type();
      } else {
        set_type((String)value);
      }
      break;

    case NEWS_ID:
      if (value == null) {
        unset_newsId();
      } else {
        set_newsId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return get_title();

    case NEWS_DETAIL:
      return get_newsDetail();

    case PUBLIC_DATE:
      return get_publicDate();

    case ORIGIN:
      return get_origin();

    case IS_HEADLINE:
      return is_isHeadline();

    case URL:
      return get_url();

    case SUMMARY:
      return get_summary();

    case IMAGE_URL:
      return get_imageUrl();

    case TYPE:
      return get_type();

    case NEWS_ID:
      return get_newsId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return is_set_title();
    case NEWS_DETAIL:
      return is_set_newsDetail();
    case PUBLIC_DATE:
      return is_set_publicDate();
    case ORIGIN:
      return is_set_origin();
    case IS_HEADLINE:
      return is_set_isHeadline();
    case URL:
      return is_set_url();
    case SUMMARY:
      return is_set_summary();
    case IMAGE_URL:
      return is_set_imageUrl();
    case TYPE:
      return is_set_type();
    case NEWS_ID:
      return is_set_newsId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof News)
      return this.equals((News)that);
    return false;
  }

  public boolean equals(News that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.is_set_title();
    boolean that_present_title = true && that.is_set_title();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_newsDetail = true && this.is_set_newsDetail();
    boolean that_present_newsDetail = true && that.is_set_newsDetail();
    if (this_present_newsDetail || that_present_newsDetail) {
      if (!(this_present_newsDetail && that_present_newsDetail))
        return false;
      if (!this.newsDetail.equals(that.newsDetail))
        return false;
    }

    boolean this_present_publicDate = true && this.is_set_publicDate();
    boolean that_present_publicDate = true && that.is_set_publicDate();
    if (this_present_publicDate || that_present_publicDate) {
      if (!(this_present_publicDate && that_present_publicDate))
        return false;
      if (!this.publicDate.equals(that.publicDate))
        return false;
    }

    boolean this_present_origin = true && this.is_set_origin();
    boolean that_present_origin = true && that.is_set_origin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_isHeadline = true;
    boolean that_present_isHeadline = true;
    if (this_present_isHeadline || that_present_isHeadline) {
      if (!(this_present_isHeadline && that_present_isHeadline))
        return false;
      if (this.isHeadline != that.isHeadline)
        return false;
    }

    boolean this_present_url = true && this.is_set_url();
    boolean that_present_url = true && that.is_set_url();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_summary = true && this.is_set_summary();
    boolean that_present_summary = true && that.is_set_summary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_imageUrl = true && this.is_set_imageUrl();
    boolean that_present_imageUrl = true && that.is_set_imageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_type = true && this.is_set_type();
    boolean that_present_type = true && that.is_set_type();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_newsId = true && this.is_set_newsId();
    boolean that_present_newsId = true && that.is_set_newsId();
    if (this_present_newsId || that_present_newsId) {
      if (!(this_present_newsId && that_present_newsId))
        return false;
      if (!this.newsId.equals(that.newsId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (is_set_title());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_newsDetail = true && (is_set_newsDetail());
    list.add(present_newsDetail);
    if (present_newsDetail)
      list.add(newsDetail);

    boolean present_publicDate = true && (is_set_publicDate());
    list.add(present_publicDate);
    if (present_publicDate)
      list.add(publicDate);

    boolean present_origin = true && (is_set_origin());
    list.add(present_origin);
    if (present_origin)
      list.add(origin);

    boolean present_isHeadline = true;
    list.add(present_isHeadline);
    if (present_isHeadline)
      list.add(isHeadline);

    boolean present_url = true && (is_set_url());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_summary = true && (is_set_summary());
    list.add(present_summary);
    if (present_summary)
      list.add(summary);

    boolean present_imageUrl = true && (is_set_imageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_type = true && (is_set_type());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_newsId = true && (is_set_newsId());
    list.add(present_newsId);
    if (present_newsId)
      list.add(newsId);

    return list.hashCode();
  }

  @Override
  public int compareTo(News other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_title()).compareTo(other.is_set_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_newsDetail()).compareTo(other.is_set_newsDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_newsDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsDetail, other.newsDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_publicDate()).compareTo(other.is_set_publicDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_publicDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicDate, other.publicDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_origin()).compareTo(other.is_set_origin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_origin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isHeadline()).compareTo(other.is_set_isHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHeadline, other.isHeadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_url()).compareTo(other.is_set_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_summary()).compareTo(other.is_set_summary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_summary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_imageUrl()).compareTo(other.is_set_imageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_imageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_type()).compareTo(other.is_set_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_newsId()).compareTo(other.is_set_newsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_newsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("News(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newsDetail:");
    if (this.newsDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.newsDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicDate:");
    if (this.publicDate == null) {
      sb.append("null");
    } else {
      sb.append(this.publicDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHeadline:");
    sb.append(this.isHeadline);
    first = false;
    if (is_set_url()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (is_set_summary()) {
      if (!first) sb.append(", ");
      sb.append("summary:");
      if (this.summary == null) {
        sb.append("null");
      } else {
        sb.append(this.summary);
      }
      first = false;
    }
    if (is_set_imageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (is_set_type()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("newsId:");
    if (this.newsId == null) {
      sb.append("null");
    } else {
      sb.append(this.newsId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_title()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' is unset! Struct:" + toString());
    }

    if (!is_set_newsDetail()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newsDetail' is unset! Struct:" + toString());
    }

    if (!is_set_publicDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'publicDate' is unset! Struct:" + toString());
    }

    if (!is_set_origin()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'origin' is unset! Struct:" + toString());
    }

    if (!is_set_isHeadline()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isHeadline' is unset! Struct:" + toString());
    }

    if (!is_set_newsId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newsId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class NewsStandardSchemeFactory implements SchemeFactory {
    public NewsStandardScheme getScheme() {
      return new NewsStandardScheme();
    }
  }

  private static class NewsStandardScheme extends StandardScheme<News> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, News struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.set_title_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEWS_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newsDetail = iprot.readString();
              struct.set_newsDetail_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLIC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicDate = iprot.readString();
              struct.set_publicDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.set_origin_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHeadline = iprot.readBool();
              struct.set_isHeadline_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.set_url_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.set_summary_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.set_imageUrl_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.set_type_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEWS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newsId = iprot.readString();
              struct.set_newsId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, News struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.newsDetail != null) {
        oprot.writeFieldBegin(NEWS_DETAIL_FIELD_DESC);
        oprot.writeString(struct.newsDetail);
        oprot.writeFieldEnd();
      }
      if (struct.publicDate != null) {
        oprot.writeFieldBegin(PUBLIC_DATE_FIELD_DESC);
        oprot.writeString(struct.publicDate);
        oprot.writeFieldEnd();
      }
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeString(struct.origin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HEADLINE_FIELD_DESC);
      oprot.writeBool(struct.isHeadline);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        if (struct.is_set_url()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.summary != null) {
        if (struct.is_set_summary()) {
          oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
          oprot.writeString(struct.summary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.is_set_imageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.is_set_type()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.newsId != null) {
        oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
        oprot.writeString(struct.newsId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewsTupleSchemeFactory implements SchemeFactory {
    public NewsTupleScheme getScheme() {
      return new NewsTupleScheme();
    }
  }

  private static class NewsTupleScheme extends TupleScheme<News> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, News struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.title);
      oprot.writeString(struct.newsDetail);
      oprot.writeString(struct.publicDate);
      oprot.writeString(struct.origin);
      oprot.writeBool(struct.isHeadline);
      oprot.writeString(struct.newsId);
      BitSet optionals = new BitSet();
      if (struct.is_set_url()) {
        optionals.set(0);
      }
      if (struct.is_set_summary()) {
        optionals.set(1);
      }
      if (struct.is_set_imageUrl()) {
        optionals.set(2);
      }
      if (struct.is_set_type()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.is_set_url()) {
        oprot.writeString(struct.url);
      }
      if (struct.is_set_summary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.is_set_imageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.is_set_type()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, News struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.title = iprot.readString();
      struct.set_title_isSet(true);
      struct.newsDetail = iprot.readString();
      struct.set_newsDetail_isSet(true);
      struct.publicDate = iprot.readString();
      struct.set_publicDate_isSet(true);
      struct.origin = iprot.readString();
      struct.set_origin_isSet(true);
      struct.isHeadline = iprot.readBool();
      struct.set_isHeadline_isSet(true);
      struct.newsId = iprot.readString();
      struct.set_newsId_isSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.url = iprot.readString();
        struct.set_url_isSet(true);
      }
      if (incoming.get(1)) {
        struct.summary = iprot.readString();
        struct.set_summary_isSet(true);
      }
      if (incoming.get(2)) {
        struct.imageUrl = iprot.readString();
        struct.set_imageUrl_isSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.set_type_isSet(true);
      }
    }
  }

}

