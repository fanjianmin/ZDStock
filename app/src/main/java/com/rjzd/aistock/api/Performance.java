/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Performance implements org.apache.thrift.TBase<Performance, Performance._Fields>, java.io.Serializable, Cloneable, Comparable<Performance>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Performance");

  private static final org.apache.thrift.protocol.TField YEARS_FIELD_DESC = new org.apache.thrift.protocol.TField("years", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LATEST_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("latestYear", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LATEST_QUARTERLY_FIELD_DESC = new org.apache.thrift.protocol.TField("latestQuarterly", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_INCOMES_FIELD_DESC = new org.apache.thrift.protocol.TField("businessIncomes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PROFITS_FIELD_DESC = new org.apache.thrift.protocol.TField("profits", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EPS_FIELD_DESC = new org.apache.thrift.protocol.TField("eps", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PerformanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PerformanceTupleSchemeFactory());
  }

  private List<String> years; // required
  private String latestYear; // optional
  private String latestQuarterly; // optional
  private List<BusinessIncome> businessIncomes; // required
  private List<Profits> profits; // required
  private List<Double> eps; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeList(years);
    out.writeString(latestYear);
    out.writeString(latestQuarterly);
    out.writeTypedList(businessIncomes);
    out.writeTypedList(profits);
    out.writeList(eps);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Performance(android.os.Parcel in) {
    this.years = new ArrayList<String>();
    in.readList(this.years, Performance.class.getClassLoader());
    this.latestYear= in.readString();
    this.latestQuarterly= in.readString();
    this.businessIncomes = new ArrayList<BusinessIncome>();
    in.readTypedList(this.businessIncomes, BusinessIncome.CREATOR);
    this.profits = new ArrayList<Profits>();
    in.readTypedList(this.profits, Profits.CREATOR);
    this.eps = new ArrayList<Double>();
    in.readList(this.eps, Performance.class.getClassLoader());
  }

  public static final android.os.Parcelable.Creator<Performance> CREATOR = new android.os.Parcelable.Creator<Performance>() {
    @Override
    public Performance[] newArray(int size) {
      return new Performance[size];
    }

    @Override
    public Performance createFromParcel(android.os.Parcel in) {
      return new Performance(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YEARS((short)1, "years"),
    LATEST_YEAR((short)2, "latestYear"),
    LATEST_QUARTERLY((short)3, "latestQuarterly"),
    BUSINESS_INCOMES((short)4, "businessIncomes"),
    PROFITS((short)5, "profits"),
    EPS((short)6, "eps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YEARS
          return YEARS;
        case 2: // LATEST_YEAR
          return LATEST_YEAR;
        case 3: // LATEST_QUARTERLY
          return LATEST_QUARTERLY;
        case 4: // BUSINESS_INCOMES
          return BUSINESS_INCOMES;
        case 5: // PROFITS
          return PROFITS;
        case 6: // EPS
          return EPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LATEST_YEAR,_Fields.LATEST_QUARTERLY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YEARS, new org.apache.thrift.meta_data.FieldMetaData("years", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LATEST_YEAR, new org.apache.thrift.meta_data.FieldMetaData("latestYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_QUARTERLY, new org.apache.thrift.meta_data.FieldMetaData("latestQuarterly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_INCOMES, new org.apache.thrift.meta_data.FieldMetaData("businessIncomes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessIncome.class))));
    tmpMap.put(_Fields.PROFITS, new org.apache.thrift.meta_data.FieldMetaData("profits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Profits.class))));
    tmpMap.put(_Fields.EPS, new org.apache.thrift.meta_data.FieldMetaData("eps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Performance.class, metaDataMap);
  }

  public Performance() {
  }

  public Performance(
    List<String> years,
    List<BusinessIncome> businessIncomes,
    List<Profits> profits,
    List<Double> eps)
  {
    this();
    this.years = years;
    this.businessIncomes = businessIncomes;
    this.profits = profits;
    this.eps = eps;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Performance(Performance other) {
    if (other.is_set_years()) {
      List<String> __this__years = new ArrayList<String>(other.years);
      this.years = __this__years;
    }
    if (other.is_set_latestYear()) {
      this.latestYear = other.latestYear;
    }
    if (other.is_set_latestQuarterly()) {
      this.latestQuarterly = other.latestQuarterly;
    }
    if (other.is_set_businessIncomes()) {
      List<BusinessIncome> __this__businessIncomes = new ArrayList<BusinessIncome>(other.businessIncomes.size());
      for (BusinessIncome other_element : other.businessIncomes) {
        __this__businessIncomes.add(new BusinessIncome(other_element));
      }
      this.businessIncomes = __this__businessIncomes;
    }
    if (other.is_set_profits()) {
      List<Profits> __this__profits = new ArrayList<Profits>(other.profits.size());
      for (Profits other_element : other.profits) {
        __this__profits.add(new Profits(other_element));
      }
      this.profits = __this__profits;
    }
    if (other.is_set_eps()) {
      List<Double> __this__eps = new ArrayList<Double>(other.eps);
      this.eps = __this__eps;
    }
  }

  public Performance deepCopy() {
    return new Performance(this);
  }

  public void clear() {
    if (this.years != null) {
      this.years.clear();
    }
    this.latestYear = null;
    this.latestQuarterly = null;
    if (this.businessIncomes != null) {
      this.businessIncomes.clear();
    }
    if (this.profits != null) {
      this.profits.clear();
    }
    if (this.eps != null) {
      this.eps.clear();
    }
  }

  public int get_years_size() {
    return (this.years == null) ? 0 : this.years.size();
  }

  public java.util.Iterator<String> get_years_iterator() {
    return (this.years == null) ? null : this.years.iterator();
  }

  public void add_to_years(String elem) {
    if (this.years == null) {
      this.years = new ArrayList<String>();
    }
    this.years.add(elem);
  }

  public List<String> get_years() {
    return this.years;
  }

  public void set_years(List<String> years) {
    this.years = years;
  }

  public void unset_years() {
    this.years = null;
  }

  /** Returns true if field years is set (has been assigned a value) and false otherwise */
  public boolean is_set_years() {
    return this.years != null;
  }

  public void set_years_isSet(boolean value) {
    if (!value) {
      this.years = null;
    }
  }

  public String get_latestYear() {
    return this.latestYear;
  }

  public void set_latestYear(String latestYear) {
    this.latestYear = latestYear;
  }

  public void unset_latestYear() {
    this.latestYear = null;
  }

  /** Returns true if field latestYear is set (has been assigned a value) and false otherwise */
  public boolean is_set_latestYear() {
    return this.latestYear != null;
  }

  public void set_latestYear_isSet(boolean value) {
    if (!value) {
      this.latestYear = null;
    }
  }

  public String get_latestQuarterly() {
    return this.latestQuarterly;
  }

  public void set_latestQuarterly(String latestQuarterly) {
    this.latestQuarterly = latestQuarterly;
  }

  public void unset_latestQuarterly() {
    this.latestQuarterly = null;
  }

  /** Returns true if field latestQuarterly is set (has been assigned a value) and false otherwise */
  public boolean is_set_latestQuarterly() {
    return this.latestQuarterly != null;
  }

  public void set_latestQuarterly_isSet(boolean value) {
    if (!value) {
      this.latestQuarterly = null;
    }
  }

  public int get_businessIncomes_size() {
    return (this.businessIncomes == null) ? 0 : this.businessIncomes.size();
  }

  public java.util.Iterator<BusinessIncome> get_businessIncomes_iterator() {
    return (this.businessIncomes == null) ? null : this.businessIncomes.iterator();
  }

  public void add_to_businessIncomes(BusinessIncome elem) {
    if (this.businessIncomes == null) {
      this.businessIncomes = new ArrayList<BusinessIncome>();
    }
    this.businessIncomes.add(elem);
  }

  public List<BusinessIncome> get_businessIncomes() {
    return this.businessIncomes;
  }

  public void set_businessIncomes(List<BusinessIncome> businessIncomes) {
    this.businessIncomes = businessIncomes;
  }

  public void unset_businessIncomes() {
    this.businessIncomes = null;
  }

  /** Returns true if field businessIncomes is set (has been assigned a value) and false otherwise */
  public boolean is_set_businessIncomes() {
    return this.businessIncomes != null;
  }

  public void set_businessIncomes_isSet(boolean value) {
    if (!value) {
      this.businessIncomes = null;
    }
  }

  public int get_profits_size() {
    return (this.profits == null) ? 0 : this.profits.size();
  }

  public java.util.Iterator<Profits> get_profits_iterator() {
    return (this.profits == null) ? null : this.profits.iterator();
  }

  public void add_to_profits(Profits elem) {
    if (this.profits == null) {
      this.profits = new ArrayList<Profits>();
    }
    this.profits.add(elem);
  }

  public List<Profits> get_profits() {
    return this.profits;
  }

  public void set_profits(List<Profits> profits) {
    this.profits = profits;
  }

  public void unset_profits() {
    this.profits = null;
  }

  /** Returns true if field profits is set (has been assigned a value) and false otherwise */
  public boolean is_set_profits() {
    return this.profits != null;
  }

  public void set_profits_isSet(boolean value) {
    if (!value) {
      this.profits = null;
    }
  }

  public int get_eps_size() {
    return (this.eps == null) ? 0 : this.eps.size();
  }

  public java.util.Iterator<Double> get_eps_iterator() {
    return (this.eps == null) ? null : this.eps.iterator();
  }

  public void add_to_eps(double elem) {
    if (this.eps == null) {
      this.eps = new ArrayList<Double>();
    }
    this.eps.add(elem);
  }

  public List<Double> get_eps() {
    return this.eps;
  }

  public void set_eps(List<Double> eps) {
    this.eps = eps;
  }

  public void unset_eps() {
    this.eps = null;
  }

  /** Returns true if field eps is set (has been assigned a value) and false otherwise */
  public boolean is_set_eps() {
    return this.eps != null;
  }

  public void set_eps_isSet(boolean value) {
    if (!value) {
      this.eps = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YEARS:
      if (value == null) {
        unset_years();
      } else {
        set_years((List<String>)value);
      }
      break;

    case LATEST_YEAR:
      if (value == null) {
        unset_latestYear();
      } else {
        set_latestYear((String)value);
      }
      break;

    case LATEST_QUARTERLY:
      if (value == null) {
        unset_latestQuarterly();
      } else {
        set_latestQuarterly((String)value);
      }
      break;

    case BUSINESS_INCOMES:
      if (value == null) {
        unset_businessIncomes();
      } else {
        set_businessIncomes((List<BusinessIncome>)value);
      }
      break;

    case PROFITS:
      if (value == null) {
        unset_profits();
      } else {
        set_profits((List<Profits>)value);
      }
      break;

    case EPS:
      if (value == null) {
        unset_eps();
      } else {
        set_eps((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YEARS:
      return get_years();

    case LATEST_YEAR:
      return get_latestYear();

    case LATEST_QUARTERLY:
      return get_latestQuarterly();

    case BUSINESS_INCOMES:
      return get_businessIncomes();

    case PROFITS:
      return get_profits();

    case EPS:
      return get_eps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YEARS:
      return is_set_years();
    case LATEST_YEAR:
      return is_set_latestYear();
    case LATEST_QUARTERLY:
      return is_set_latestQuarterly();
    case BUSINESS_INCOMES:
      return is_set_businessIncomes();
    case PROFITS:
      return is_set_profits();
    case EPS:
      return is_set_eps();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Performance)
      return this.equals((Performance)that);
    return false;
  }

  public boolean equals(Performance that) {
    if (that == null)
      return false;

    boolean this_present_years = true && this.is_set_years();
    boolean that_present_years = true && that.is_set_years();
    if (this_present_years || that_present_years) {
      if (!(this_present_years && that_present_years))
        return false;
      if (!this.years.equals(that.years))
        return false;
    }

    boolean this_present_latestYear = true && this.is_set_latestYear();
    boolean that_present_latestYear = true && that.is_set_latestYear();
    if (this_present_latestYear || that_present_latestYear) {
      if (!(this_present_latestYear && that_present_latestYear))
        return false;
      if (!this.latestYear.equals(that.latestYear))
        return false;
    }

    boolean this_present_latestQuarterly = true && this.is_set_latestQuarterly();
    boolean that_present_latestQuarterly = true && that.is_set_latestQuarterly();
    if (this_present_latestQuarterly || that_present_latestQuarterly) {
      if (!(this_present_latestQuarterly && that_present_latestQuarterly))
        return false;
      if (!this.latestQuarterly.equals(that.latestQuarterly))
        return false;
    }

    boolean this_present_businessIncomes = true && this.is_set_businessIncomes();
    boolean that_present_businessIncomes = true && that.is_set_businessIncomes();
    if (this_present_businessIncomes || that_present_businessIncomes) {
      if (!(this_present_businessIncomes && that_present_businessIncomes))
        return false;
      if (!this.businessIncomes.equals(that.businessIncomes))
        return false;
    }

    boolean this_present_profits = true && this.is_set_profits();
    boolean that_present_profits = true && that.is_set_profits();
    if (this_present_profits || that_present_profits) {
      if (!(this_present_profits && that_present_profits))
        return false;
      if (!this.profits.equals(that.profits))
        return false;
    }

    boolean this_present_eps = true && this.is_set_eps();
    boolean that_present_eps = true && that.is_set_eps();
    if (this_present_eps || that_present_eps) {
      if (!(this_present_eps && that_present_eps))
        return false;
      if (!this.eps.equals(that.eps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_years = true && (is_set_years());
    list.add(present_years);
    if (present_years)
      list.add(years);

    boolean present_latestYear = true && (is_set_latestYear());
    list.add(present_latestYear);
    if (present_latestYear)
      list.add(latestYear);

    boolean present_latestQuarterly = true && (is_set_latestQuarterly());
    list.add(present_latestQuarterly);
    if (present_latestQuarterly)
      list.add(latestQuarterly);

    boolean present_businessIncomes = true && (is_set_businessIncomes());
    list.add(present_businessIncomes);
    if (present_businessIncomes)
      list.add(businessIncomes);

    boolean present_profits = true && (is_set_profits());
    list.add(present_profits);
    if (present_profits)
      list.add(profits);

    boolean present_eps = true && (is_set_eps());
    list.add(present_eps);
    if (present_eps)
      list.add(eps);

    return list.hashCode();
  }

  @Override
  public int compareTo(Performance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_years()).compareTo(other.is_set_years());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_years()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.years, other.years);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_latestYear()).compareTo(other.is_set_latestYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_latestYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestYear, other.latestYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_latestQuarterly()).compareTo(other.is_set_latestQuarterly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_latestQuarterly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestQuarterly, other.latestQuarterly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_businessIncomes()).compareTo(other.is_set_businessIncomes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_businessIncomes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessIncomes, other.businessIncomes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profits()).compareTo(other.is_set_profits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profits, other.profits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_eps()).compareTo(other.is_set_eps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_eps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eps, other.eps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Performance(");
    boolean first = true;

    sb.append("years:");
    if (this.years == null) {
      sb.append("null");
    } else {
      sb.append(this.years);
    }
    first = false;
    if (is_set_latestYear()) {
      if (!first) sb.append(", ");
      sb.append("latestYear:");
      if (this.latestYear == null) {
        sb.append("null");
      } else {
        sb.append(this.latestYear);
      }
      first = false;
    }
    if (is_set_latestQuarterly()) {
      if (!first) sb.append(", ");
      sb.append("latestQuarterly:");
      if (this.latestQuarterly == null) {
        sb.append("null");
      } else {
        sb.append(this.latestQuarterly);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("businessIncomes:");
    if (this.businessIncomes == null) {
      sb.append("null");
    } else {
      sb.append(this.businessIncomes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profits:");
    if (this.profits == null) {
      sb.append("null");
    } else {
      sb.append(this.profits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eps:");
    if (this.eps == null) {
      sb.append("null");
    } else {
      sb.append(this.eps);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_years()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'years' is unset! Struct:" + toString());
    }

    if (!is_set_businessIncomes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'businessIncomes' is unset! Struct:" + toString());
    }

    if (!is_set_profits()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profits' is unset! Struct:" + toString());
    }

    if (!is_set_eps()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eps' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PerformanceStandardSchemeFactory implements SchemeFactory {
    public PerformanceStandardScheme getScheme() {
      return new PerformanceStandardScheme();
    }
  }

  private static class PerformanceStandardScheme extends StandardScheme<Performance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Performance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YEARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                if (struct.years == null) {
                  struct.years = new ArrayList<String>(_list128.size);
                }
                String _elem129 = null;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = iprot.readString();
                  struct.years.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.set_years_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LATEST_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestYear = iprot.readString();
              struct.set_latestYear_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LATEST_QUARTERLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestQuarterly = iprot.readString();
              struct.set_latestQuarterly_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_INCOMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                if (struct.businessIncomes == null) {
                  struct.businessIncomes = new ArrayList<BusinessIncome>(_list131.size);
                }
                BusinessIncome _elem132 = new BusinessIncome();
                for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                {
                  if (_elem132 == null) {
                    _elem132 = new BusinessIncome();
                  }
                  _elem132.read(iprot);
                  struct.businessIncomes.add(_elem132);
                  _elem132 = null;
                }
                iprot.readListEnd();
              }
              struct.set_businessIncomes_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROFITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                if (struct.profits == null) {
                  struct.profits = new ArrayList<Profits>(_list134.size);
                }
                Profits _elem135 = new Profits();
                for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                {
                  if (_elem135 == null) {
                    _elem135 = new Profits();
                  }
                  _elem135.read(iprot);
                  struct.profits.add(_elem135);
                  _elem135 = null;
                }
                iprot.readListEnd();
              }
              struct.set_profits_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list137 = iprot.readListBegin();
                if (struct.eps == null) {
                  struct.eps = new ArrayList<Double>(_list137.size);
                }
                double _elem138 = (double)0;
                for (int _i139 = 0; _i139 < _list137.size; ++_i139)
                {
                  _elem138 = iprot.readDouble();
                  struct.eps.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.set_eps_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Performance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.years != null) {
        oprot.writeFieldBegin(YEARS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.years.size()));
          for (String _iter140 : struct.years)
          {
            oprot.writeString(_iter140);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.latestYear != null) {
        if (struct.is_set_latestYear()) {
          oprot.writeFieldBegin(LATEST_YEAR_FIELD_DESC);
          oprot.writeString(struct.latestYear);
          oprot.writeFieldEnd();
        }
      }
      if (struct.latestQuarterly != null) {
        if (struct.is_set_latestQuarterly()) {
          oprot.writeFieldBegin(LATEST_QUARTERLY_FIELD_DESC);
          oprot.writeString(struct.latestQuarterly);
          oprot.writeFieldEnd();
        }
      }
      if (struct.businessIncomes != null) {
        oprot.writeFieldBegin(BUSINESS_INCOMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.businessIncomes.size()));
          for (BusinessIncome _iter141 : struct.businessIncomes)
          {
            _iter141.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.profits != null) {
        oprot.writeFieldBegin(PROFITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profits.size()));
          for (Profits _iter142 : struct.profits)
          {
            _iter142.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.eps != null) {
        oprot.writeFieldBegin(EPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.eps.size()));
          for (double _iter143 : struct.eps)
          {
            oprot.writeDouble(_iter143);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PerformanceTupleSchemeFactory implements SchemeFactory {
    public PerformanceTupleScheme getScheme() {
      return new PerformanceTupleScheme();
    }
  }

  private static class PerformanceTupleScheme extends TupleScheme<Performance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Performance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.years.size());
        for (String _iter144 : struct.years)
        {
          oprot.writeString(_iter144);
        }
      }
      {
        oprot.writeI32(struct.businessIncomes.size());
        for (BusinessIncome _iter145 : struct.businessIncomes)
        {
          _iter145.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.profits.size());
        for (Profits _iter146 : struct.profits)
        {
          _iter146.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.eps.size());
        for (double _iter147 : struct.eps)
        {
          oprot.writeDouble(_iter147);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.is_set_latestYear()) {
        optionals.set(0);
      }
      if (struct.is_set_latestQuarterly()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_latestYear()) {
        oprot.writeString(struct.latestYear);
      }
      if (struct.is_set_latestQuarterly()) {
        oprot.writeString(struct.latestQuarterly);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Performance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list148 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.years == null) {
          struct.years = new ArrayList<String>(_list148.size);
        }
        String _elem149 = null;
        for (int _i150 = 0; _i150 < _list148.size; ++_i150)
        {
          _elem149 = iprot.readString();
          struct.years.add(_elem149);
        }
      }
      struct.set_years_isSet(true);
      {
        org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.businessIncomes == null) {
          struct.businessIncomes = new ArrayList<BusinessIncome>(_list151.size);
        }
        BusinessIncome _elem152 = new BusinessIncome();
        for (int _i153 = 0; _i153 < _list151.size; ++_i153)
        {
          if (_elem152 == null) {
            _elem152 = new BusinessIncome();
          }
          _elem152.read(iprot);
          struct.businessIncomes.add(_elem152);
          _elem152 = null;
        }
      }
      struct.set_businessIncomes_isSet(true);
      {
        org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.profits == null) {
          struct.profits = new ArrayList<Profits>(_list154.size);
        }
        Profits _elem155 = new Profits();
        for (int _i156 = 0; _i156 < _list154.size; ++_i156)
        {
          if (_elem155 == null) {
            _elem155 = new Profits();
          }
          _elem155.read(iprot);
          struct.profits.add(_elem155);
          _elem155 = null;
        }
      }
      struct.set_profits_isSet(true);
      {
        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.eps == null) {
          struct.eps = new ArrayList<Double>(_list157.size);
        }
        double _elem158 = (double)0;
        for (int _i159 = 0; _i159 < _list157.size; ++_i159)
        {
          _elem158 = iprot.readDouble();
          struct.eps.add(_elem158);
        }
      }
      struct.set_eps_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.latestYear = iprot.readString();
        struct.set_latestYear_isSet(true);
      }
      if (incoming.get(1)) {
        struct.latestQuarterly = iprot.readString();
        struct.set_latestQuarterly_isSet(true);
      }
    }
  }

}

