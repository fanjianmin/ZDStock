/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股票预测-周期性分析
 *  
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Periodicity implements org.apache.thrift.TBase<Periodicity, Periodicity._Fields>, java.io.Serializable, Cloneable, Comparable<Periodicity>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Periodicity");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("close", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField LPF_FIELD_DESC = new org.apache.thrift.protocol.TField("lpf", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SEGMENT_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentPoint", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PeriodicityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PeriodicityTupleSchemeFactory());
  }

  private String date; // required
  private double close; // required
  private double lpf; // optional
  private int segmentPoint; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(date);
    out.writeDouble(close);
    out.writeDouble(lpf);
    out.writeInt(segmentPoint);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Periodicity(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.date= in.readString();
    this.close = in.readDouble();
    this.lpf = in.readDouble();
    this.segmentPoint = in.readInt();
  }

  public static final android.os.Parcelable.Creator<Periodicity> CREATOR = new android.os.Parcelable.Creator<Periodicity>() {
    @Override
    public Periodicity[] newArray(int size) {
      return new Periodicity[size];
    }

    @Override
    public Periodicity createFromParcel(android.os.Parcel in) {
      return new Periodicity(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    CLOSE((short)2, "close"),
    LPF((short)3, "lpf"),
    SEGMENT_POINT((short)4, "segmentPoint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // CLOSE
          return CLOSE;
        case 3: // LPF
          return LPF;
        case 4: // SEGMENT_POINT
          return SEGMENT_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLOSE_ISSET_ID = 0;
  private static final int __LPF_ISSET_ID = 1;
  private static final int __SEGMENTPOINT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LPF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSE, new org.apache.thrift.meta_data.FieldMetaData("close", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LPF, new org.apache.thrift.meta_data.FieldMetaData("lpf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SEGMENT_POINT, new org.apache.thrift.meta_data.FieldMetaData("segmentPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Periodicity.class, metaDataMap);
  }

  public Periodicity() {
  }

  public Periodicity(
    String date,
    double close,
    int segmentPoint)
  {
    this();
    this.date = date;
    this.close = close;
    set_close_isSet(true);
    this.segmentPoint = segmentPoint;
    set_segmentPoint_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Periodicity(Periodicity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_date()) {
      this.date = other.date;
    }
    this.close = other.close;
    this.lpf = other.lpf;
    this.segmentPoint = other.segmentPoint;
  }

  public Periodicity deepCopy() {
    return new Periodicity(this);
  }

  public void clear() {
    this.date = null;
    set_close_isSet(false);
    this.close = 0.0;
    set_lpf_isSet(false);
    this.lpf = 0.0;
    set_segmentPoint_isSet(false);
    this.segmentPoint = 0;
  }

  public String get_date() {
    return this.date;
  }

  public void set_date(String date) {
    this.date = date;
  }

  public void unset_date() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean is_set_date() {
    return this.date != null;
  }

  public void set_date_isSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public double get_close() {
    return this.close;
  }

  public void set_close(double close) {
    this.close = close;
    set_close_isSet(true);
  }

  public void unset_close() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  /** Returns true if field close is set (has been assigned a value) and false otherwise */
  public boolean is_set_close() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  public void set_close_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSE_ISSET_ID, value);
  }

  public double get_lpf() {
    return this.lpf;
  }

  public void set_lpf(double lpf) {
    this.lpf = lpf;
    set_lpf_isSet(true);
  }

  public void unset_lpf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LPF_ISSET_ID);
  }

  /** Returns true if field lpf is set (has been assigned a value) and false otherwise */
  public boolean is_set_lpf() {
    return EncodingUtils.testBit(__isset_bitfield, __LPF_ISSET_ID);
  }

  public void set_lpf_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LPF_ISSET_ID, value);
  }

  public int get_segmentPoint() {
    return this.segmentPoint;
  }

  public void set_segmentPoint(int segmentPoint) {
    this.segmentPoint = segmentPoint;
    set_segmentPoint_isSet(true);
  }

  public void unset_segmentPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEGMENTPOINT_ISSET_ID);
  }

  /** Returns true if field segmentPoint is set (has been assigned a value) and false otherwise */
  public boolean is_set_segmentPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __SEGMENTPOINT_ISSET_ID);
  }

  public void set_segmentPoint_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEGMENTPOINT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unset_date();
      } else {
        set_date((String)value);
      }
      break;

    case CLOSE:
      if (value == null) {
        unset_close();
      } else {
        set_close((Double)value);
      }
      break;

    case LPF:
      if (value == null) {
        unset_lpf();
      } else {
        set_lpf((Double)value);
      }
      break;

    case SEGMENT_POINT:
      if (value == null) {
        unset_segmentPoint();
      } else {
        set_segmentPoint((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return get_date();

    case CLOSE:
      return get_close();

    case LPF:
      return get_lpf();

    case SEGMENT_POINT:
      return get_segmentPoint();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return is_set_date();
    case CLOSE:
      return is_set_close();
    case LPF:
      return is_set_lpf();
    case SEGMENT_POINT:
      return is_set_segmentPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Periodicity)
      return this.equals((Periodicity)that);
    return false;
  }

  public boolean equals(Periodicity that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.is_set_date();
    boolean that_present_date = true && that.is_set_date();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_close = true;
    boolean that_present_close = true;
    if (this_present_close || that_present_close) {
      if (!(this_present_close && that_present_close))
        return false;
      if (this.close != that.close)
        return false;
    }

    boolean this_present_lpf = true && this.is_set_lpf();
    boolean that_present_lpf = true && that.is_set_lpf();
    if (this_present_lpf || that_present_lpf) {
      if (!(this_present_lpf && that_present_lpf))
        return false;
      if (this.lpf != that.lpf)
        return false;
    }

    boolean this_present_segmentPoint = true;
    boolean that_present_segmentPoint = true;
    if (this_present_segmentPoint || that_present_segmentPoint) {
      if (!(this_present_segmentPoint && that_present_segmentPoint))
        return false;
      if (this.segmentPoint != that.segmentPoint)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_date = true && (is_set_date());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_close = true;
    list.add(present_close);
    if (present_close)
      list.add(close);

    boolean present_lpf = true && (is_set_lpf());
    list.add(present_lpf);
    if (present_lpf)
      list.add(lpf);

    boolean present_segmentPoint = true;
    list.add(present_segmentPoint);
    if (present_segmentPoint)
      list.add(segmentPoint);

    return list.hashCode();
  }

  @Override
  public int compareTo(Periodicity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_date()).compareTo(other.is_set_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_close()).compareTo(other.is_set_close());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_close()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close, other.close);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_lpf()).compareTo(other.is_set_lpf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_lpf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpf, other.lpf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_segmentPoint()).compareTo(other.is_set_segmentPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_segmentPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentPoint, other.segmentPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Periodicity(");
    boolean first = true;

    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("close:");
    sb.append(this.close);
    first = false;
    if (is_set_lpf()) {
      if (!first) sb.append(", ");
      sb.append("lpf:");
      sb.append(this.lpf);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("segmentPoint:");
    sb.append(this.segmentPoint);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_date()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' is unset! Struct:" + toString());
    }

    if (!is_set_close()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'close' is unset! Struct:" + toString());
    }

    if (!is_set_segmentPoint()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segmentPoint' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PeriodicityStandardSchemeFactory implements SchemeFactory {
    public PeriodicityStandardScheme getScheme() {
      return new PeriodicityStandardScheme();
    }
  }

  private static class PeriodicityStandardScheme extends StandardScheme<Periodicity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Periodicity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.set_date_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.close = iprot.readDouble();
              struct.set_close_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LPF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lpf = iprot.readDouble();
              struct.set_lpf_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEGMENT_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.segmentPoint = iprot.readI32();
              struct.set_segmentPoint_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Periodicity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLOSE_FIELD_DESC);
      oprot.writeDouble(struct.close);
      oprot.writeFieldEnd();
      if (struct.is_set_lpf()) {
        oprot.writeFieldBegin(LPF_FIELD_DESC);
        oprot.writeDouble(struct.lpf);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEGMENT_POINT_FIELD_DESC);
      oprot.writeI32(struct.segmentPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PeriodicityTupleSchemeFactory implements SchemeFactory {
    public PeriodicityTupleScheme getScheme() {
      return new PeriodicityTupleScheme();
    }
  }

  private static class PeriodicityTupleScheme extends TupleScheme<Periodicity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Periodicity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.date);
      oprot.writeDouble(struct.close);
      oprot.writeI32(struct.segmentPoint);
      BitSet optionals = new BitSet();
      if (struct.is_set_lpf()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_lpf()) {
        oprot.writeDouble(struct.lpf);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Periodicity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.date = iprot.readString();
      struct.set_date_isSet(true);
      struct.close = iprot.readDouble();
      struct.set_close_isSet(true);
      struct.segmentPoint = iprot.readI32();
      struct.set_segmentPoint_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.lpf = iprot.readDouble();
        struct.set_lpf_isSet(true);
      }
    }
  }

}

