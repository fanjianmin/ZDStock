/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股票预测影响因子
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class PredictFactor implements org.apache.thrift.TBase<PredictFactor, PredictFactor._Fields>, java.io.Serializable, Cloneable, Comparable<PredictFactor>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PredictFactor");

  private static final org.apache.thrift.protocol.TField FACTOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("factorName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FACTOR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("factorValue", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PredictFactorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PredictFactorTupleSchemeFactory());
  }

  private String factorName; // required
  private double factorValue; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(factorName);
    out.writeDouble(factorValue);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public PredictFactor(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.factorName= in.readString();
    this.factorValue = in.readDouble();
  }

  public static final android.os.Parcelable.Creator<PredictFactor> CREATOR = new android.os.Parcelable.Creator<PredictFactor>() {
    @Override
    public PredictFactor[] newArray(int size) {
      return new PredictFactor[size];
    }

    @Override
    public PredictFactor createFromParcel(android.os.Parcel in) {
      return new PredictFactor(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FACTOR_NAME((short)1, "factorName"),
    FACTOR_VALUE((short)2, "factorValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACTOR_NAME
          return FACTOR_NAME;
        case 2: // FACTOR_VALUE
          return FACTOR_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FACTORVALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACTOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("factorName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACTOR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("factorValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PredictFactor.class, metaDataMap);
  }

  public PredictFactor() {
  }

  public PredictFactor(
    String factorName,
    double factorValue)
  {
    this();
    this.factorName = factorName;
    this.factorValue = factorValue;
    set_factorValue_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PredictFactor(PredictFactor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_factorName()) {
      this.factorName = other.factorName;
    }
    this.factorValue = other.factorValue;
  }

  public PredictFactor deepCopy() {
    return new PredictFactor(this);
  }

  public void clear() {
    this.factorName = null;
    set_factorValue_isSet(false);
    this.factorValue = 0.0;
  }

  public String get_factorName() {
    return this.factorName;
  }

  public void set_factorName(String factorName) {
    this.factorName = factorName;
  }

  public void unset_factorName() {
    this.factorName = null;
  }

  /** Returns true if field factorName is set (has been assigned a value) and false otherwise */
  public boolean is_set_factorName() {
    return this.factorName != null;
  }

  public void set_factorName_isSet(boolean value) {
    if (!value) {
      this.factorName = null;
    }
  }

  public double get_factorValue() {
    return this.factorValue;
  }

  public void set_factorValue(double factorValue) {
    this.factorValue = factorValue;
    set_factorValue_isSet(true);
  }

  public void unset_factorValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACTORVALUE_ISSET_ID);
  }

  /** Returns true if field factorValue is set (has been assigned a value) and false otherwise */
  public boolean is_set_factorValue() {
    return EncodingUtils.testBit(__isset_bitfield, __FACTORVALUE_ISSET_ID);
  }

  public void set_factorValue_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACTORVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FACTOR_NAME:
      if (value == null) {
        unset_factorName();
      } else {
        set_factorName((String)value);
      }
      break;

    case FACTOR_VALUE:
      if (value == null) {
        unset_factorValue();
      } else {
        set_factorValue((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FACTOR_NAME:
      return get_factorName();

    case FACTOR_VALUE:
      return get_factorValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FACTOR_NAME:
      return is_set_factorName();
    case FACTOR_VALUE:
      return is_set_factorValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PredictFactor)
      return this.equals((PredictFactor)that);
    return false;
  }

  public boolean equals(PredictFactor that) {
    if (that == null)
      return false;

    boolean this_present_factorName = true && this.is_set_factorName();
    boolean that_present_factorName = true && that.is_set_factorName();
    if (this_present_factorName || that_present_factorName) {
      if (!(this_present_factorName && that_present_factorName))
        return false;
      if (!this.factorName.equals(that.factorName))
        return false;
    }

    boolean this_present_factorValue = true;
    boolean that_present_factorValue = true;
    if (this_present_factorValue || that_present_factorValue) {
      if (!(this_present_factorValue && that_present_factorValue))
        return false;
      if (this.factorValue != that.factorValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_factorName = true && (is_set_factorName());
    list.add(present_factorName);
    if (present_factorName)
      list.add(factorName);

    boolean present_factorValue = true;
    list.add(present_factorValue);
    if (present_factorValue)
      list.add(factorValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(PredictFactor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_factorName()).compareTo(other.is_set_factorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_factorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factorName, other.factorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_factorValue()).compareTo(other.is_set_factorValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_factorValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factorValue, other.factorValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PredictFactor(");
    boolean first = true;

    sb.append("factorName:");
    if (this.factorName == null) {
      sb.append("null");
    } else {
      sb.append(this.factorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factorValue:");
    sb.append(this.factorValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_factorName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'factorName' is unset! Struct:" + toString());
    }

    if (!is_set_factorValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'factorValue' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PredictFactorStandardSchemeFactory implements SchemeFactory {
    public PredictFactorStandardScheme getScheme() {
      return new PredictFactorStandardScheme();
    }
  }

  private static class PredictFactorStandardScheme extends StandardScheme<PredictFactor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PredictFactor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACTOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factorName = iprot.readString();
              struct.set_factorName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACTOR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.factorValue = iprot.readDouble();
              struct.set_factorValue_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PredictFactor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.factorName != null) {
        oprot.writeFieldBegin(FACTOR_NAME_FIELD_DESC);
        oprot.writeString(struct.factorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACTOR_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.factorValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PredictFactorTupleSchemeFactory implements SchemeFactory {
    public PredictFactorTupleScheme getScheme() {
      return new PredictFactorTupleScheme();
    }
  }

  private static class PredictFactorTupleScheme extends TupleScheme<PredictFactor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PredictFactor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.factorName);
      oprot.writeDouble(struct.factorValue);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PredictFactor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.factorName = iprot.readString();
      struct.set_factorName_isSet(true);
      struct.factorValue = iprot.readDouble();
      struct.set_factorValue_isSet(true);
    }
  }

}

