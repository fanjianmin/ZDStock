/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Prediction implements org.apache.thrift.TBase<Prediction, Prediction._Fields>, java.io.Serializable, Cloneable, Comparable<Prediction>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Prediction");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PREDICTION_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("predictionRange", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PREDICTION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("predictionPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PREDICT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predictDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PredictionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PredictionTupleSchemeFactory());
  }

  private StatusCode status; // required
  private double predictionRange; // required
  private double predictionPrice; // optional
  private String predictDate; // required
  private String msg; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(status.getValue());
    out.writeDouble(predictionRange);
    out.writeDouble(predictionPrice);
    out.writeString(predictDate);
    out.writeString(msg);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Prediction(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.status = StatusCode.findByValue(in.readInt());
    this.predictionRange = in.readDouble();
    this.predictionPrice = in.readDouble();
    this.predictDate= in.readString();
    this.msg= in.readString();
  }

  public static final android.os.Parcelable.Creator<Prediction> CREATOR = new android.os.Parcelable.Creator<Prediction>() {
    @Override
    public Prediction[] newArray(int size) {
      return new Prediction[size];
    }

    @Override
    public Prediction createFromParcel(android.os.Parcel in) {
      return new Prediction(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatusCode
     */
    STATUS((short)1, "status"),
    PREDICTION_RANGE((short)2, "predictionRange"),
    PREDICTION_PRICE((short)3, "predictionPrice"),
    PREDICT_DATE((short)4, "predictDate"),
    MSG((short)5, "msg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // PREDICTION_RANGE
          return PREDICTION_RANGE;
        case 3: // PREDICTION_PRICE
          return PREDICTION_PRICE;
        case 4: // PREDICT_DATE
          return PREDICT_DATE;
        case 5: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREDICTIONRANGE_ISSET_ID = 0;
  private static final int __PREDICTIONPRICE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PREDICTION_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusCode.class)));
    tmpMap.put(_Fields.PREDICTION_RANGE, new org.apache.thrift.meta_data.FieldMetaData("predictionRange", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREDICTION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("predictionPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREDICT_DATE, new org.apache.thrift.meta_data.FieldMetaData("predictDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Prediction.class, metaDataMap);
  }

  public Prediction() {
  }

  public Prediction(
    StatusCode status,
    double predictionRange,
    String predictDate,
    String msg)
  {
    this();
    this.status = status;
    this.predictionRange = predictionRange;
    set_predictionRange_isSet(true);
    this.predictDate = predictDate;
    this.msg = msg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Prediction(Prediction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_status()) {
      this.status = other.status;
    }
    this.predictionRange = other.predictionRange;
    this.predictionPrice = other.predictionPrice;
    if (other.is_set_predictDate()) {
      this.predictDate = other.predictDate;
    }
    if (other.is_set_msg()) {
      this.msg = other.msg;
    }
  }

  public Prediction deepCopy() {
    return new Prediction(this);
  }

  public void clear() {
    this.status = null;
    set_predictionRange_isSet(false);
    this.predictionRange = 0.0;
    set_predictionPrice_isSet(false);
    this.predictionPrice = 0.0;
    this.predictDate = null;
    this.msg = null;
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode get_status() {
    return this.status;
  }

  /**
   * 
   * @see StatusCode
   */
  public void set_status(StatusCode status) {
    this.status = status;
  }

  public void unset_status() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean is_set_status() {
    return this.status != null;
  }

  public void set_status_isSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public double get_predictionRange() {
    return this.predictionRange;
  }

  public void set_predictionRange(double predictionRange) {
    this.predictionRange = predictionRange;
    set_predictionRange_isSet(true);
  }

  public void unset_predictionRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDICTIONRANGE_ISSET_ID);
  }

  /** Returns true if field predictionRange is set (has been assigned a value) and false otherwise */
  public boolean is_set_predictionRange() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDICTIONRANGE_ISSET_ID);
  }

  public void set_predictionRange_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDICTIONRANGE_ISSET_ID, value);
  }

  public double get_predictionPrice() {
    return this.predictionPrice;
  }

  public void set_predictionPrice(double predictionPrice) {
    this.predictionPrice = predictionPrice;
    set_predictionPrice_isSet(true);
  }

  public void unset_predictionPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDICTIONPRICE_ISSET_ID);
  }

  /** Returns true if field predictionPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_predictionPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDICTIONPRICE_ISSET_ID);
  }

  public void set_predictionPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDICTIONPRICE_ISSET_ID, value);
  }

  public String get_predictDate() {
    return this.predictDate;
  }

  public void set_predictDate(String predictDate) {
    this.predictDate = predictDate;
  }

  public void unset_predictDate() {
    this.predictDate = null;
  }

  /** Returns true if field predictDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_predictDate() {
    return this.predictDate != null;
  }

  public void set_predictDate_isSet(boolean value) {
    if (!value) {
      this.predictDate = null;
    }
  }

  public String get_msg() {
    return this.msg;
  }

  public void set_msg(String msg) {
    this.msg = msg;
  }

  public void unset_msg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean is_set_msg() {
    return this.msg != null;
  }

  public void set_msg_isSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unset_status();
      } else {
        set_status((StatusCode)value);
      }
      break;

    case PREDICTION_RANGE:
      if (value == null) {
        unset_predictionRange();
      } else {
        set_predictionRange((Double)value);
      }
      break;

    case PREDICTION_PRICE:
      if (value == null) {
        unset_predictionPrice();
      } else {
        set_predictionPrice((Double)value);
      }
      break;

    case PREDICT_DATE:
      if (value == null) {
        unset_predictDate();
      } else {
        set_predictDate((String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unset_msg();
      } else {
        set_msg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return get_status();

    case PREDICTION_RANGE:
      return get_predictionRange();

    case PREDICTION_PRICE:
      return get_predictionPrice();

    case PREDICT_DATE:
      return get_predictDate();

    case MSG:
      return get_msg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return is_set_status();
    case PREDICTION_RANGE:
      return is_set_predictionRange();
    case PREDICTION_PRICE:
      return is_set_predictionPrice();
    case PREDICT_DATE:
      return is_set_predictDate();
    case MSG:
      return is_set_msg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Prediction)
      return this.equals((Prediction)that);
    return false;
  }

  public boolean equals(Prediction that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.is_set_status();
    boolean that_present_status = true && that.is_set_status();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_predictionRange = true;
    boolean that_present_predictionRange = true;
    if (this_present_predictionRange || that_present_predictionRange) {
      if (!(this_present_predictionRange && that_present_predictionRange))
        return false;
      if (this.predictionRange != that.predictionRange)
        return false;
    }

    boolean this_present_predictionPrice = true && this.is_set_predictionPrice();
    boolean that_present_predictionPrice = true && that.is_set_predictionPrice();
    if (this_present_predictionPrice || that_present_predictionPrice) {
      if (!(this_present_predictionPrice && that_present_predictionPrice))
        return false;
      if (this.predictionPrice != that.predictionPrice)
        return false;
    }

    boolean this_present_predictDate = true && this.is_set_predictDate();
    boolean that_present_predictDate = true && that.is_set_predictDate();
    if (this_present_predictDate || that_present_predictDate) {
      if (!(this_present_predictDate && that_present_predictDate))
        return false;
      if (!this.predictDate.equals(that.predictDate))
        return false;
    }

    boolean this_present_msg = true && this.is_set_msg();
    boolean that_present_msg = true && that.is_set_msg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (is_set_status());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_predictionRange = true;
    list.add(present_predictionRange);
    if (present_predictionRange)
      list.add(predictionRange);

    boolean present_predictionPrice = true && (is_set_predictionPrice());
    list.add(present_predictionPrice);
    if (present_predictionPrice)
      list.add(predictionPrice);

    boolean present_predictDate = true && (is_set_predictDate());
    list.add(present_predictDate);
    if (present_predictDate)
      list.add(predictDate);

    boolean present_msg = true && (is_set_msg());
    list.add(present_msg);
    if (present_msg)
      list.add(msg);

    return list.hashCode();
  }

  @Override
  public int compareTo(Prediction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_status()).compareTo(other.is_set_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_predictionRange()).compareTo(other.is_set_predictionRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_predictionRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictionRange, other.predictionRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_predictionPrice()).compareTo(other.is_set_predictionPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_predictionPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictionPrice, other.predictionPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_predictDate()).compareTo(other.is_set_predictDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_predictDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictDate, other.predictDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_msg()).compareTo(other.is_set_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Prediction(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictionRange:");
    sb.append(this.predictionRange);
    first = false;
    if (is_set_predictionPrice()) {
      if (!first) sb.append(", ");
      sb.append("predictionPrice:");
      sb.append(this.predictionPrice);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("predictDate:");
    if (this.predictDate == null) {
      sb.append("null");
    } else {
      sb.append(this.predictDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_status()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    if (!is_set_predictionRange()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'predictionRange' is unset! Struct:" + toString());
    }

    if (!is_set_predictDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'predictDate' is unset! Struct:" + toString());
    }

    if (!is_set_msg()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PredictionStandardSchemeFactory implements SchemeFactory {
    public PredictionStandardScheme getScheme() {
      return new PredictionStandardScheme();
    }
  }

  private static class PredictionStandardScheme extends StandardScheme<Prediction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Prediction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.rjzd.aistock.api.StatusCode.findByValue(iprot.readI32());
              struct.set_status_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREDICTION_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.predictionRange = iprot.readDouble();
              struct.set_predictionRange_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PREDICTION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.predictionPrice = iprot.readDouble();
              struct.set_predictionPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREDICT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.predictDate = iprot.readString();
              struct.set_predictDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.set_msg_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Prediction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PREDICTION_RANGE_FIELD_DESC);
      oprot.writeDouble(struct.predictionRange);
      oprot.writeFieldEnd();
      if (struct.is_set_predictionPrice()) {
        oprot.writeFieldBegin(PREDICTION_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.predictionPrice);
        oprot.writeFieldEnd();
      }
      if (struct.predictDate != null) {
        oprot.writeFieldBegin(PREDICT_DATE_FIELD_DESC);
        oprot.writeString(struct.predictDate);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PredictionTupleSchemeFactory implements SchemeFactory {
    public PredictionTupleScheme getScheme() {
      return new PredictionTupleScheme();
    }
  }

  private static class PredictionTupleScheme extends TupleScheme<Prediction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Prediction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      oprot.writeDouble(struct.predictionRange);
      oprot.writeString(struct.predictDate);
      oprot.writeString(struct.msg);
      BitSet optionals = new BitSet();
      if (struct.is_set_predictionPrice()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_predictionPrice()) {
        oprot.writeDouble(struct.predictionPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Prediction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = com.rjzd.aistock.api.StatusCode.findByValue(iprot.readI32());
      struct.set_status_isSet(true);
      struct.predictionRange = iprot.readDouble();
      struct.set_predictionRange_isSet(true);
      struct.predictDate = iprot.readString();
      struct.set_predictDate_isSet(true);
      struct.msg = iprot.readString();
      struct.set_msg_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.predictionPrice = iprot.readDouble();
        struct.set_predictionPrice_isSet(true);
      }
    }
  }

}

