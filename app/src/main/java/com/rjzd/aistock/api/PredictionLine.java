/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class PredictionLine implements org.apache.thrift.TBase<PredictionLine, PredictionLine._Fields>, java.io.Serializable, Cloneable, Comparable<PredictionLine>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PredictionLine");

  private static final org.apache.thrift.protocol.TField START_TIEM_FIELD_DESC = new org.apache.thrift.protocol.TField("startTiem", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("priceList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PredictionLineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PredictionLineTupleSchemeFactory());
  }

  private String startTiem; // required
  private String endTime; // required
  private List<Double> priceList; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeString(startTiem);
    out.writeString(endTime);
    out.writeList(priceList);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public PredictionLine(android.os.Parcel in) {
    this.startTiem= in.readString();
    this.endTime= in.readString();
    this.priceList = new ArrayList<Double>();
    in.readList(this.priceList, PredictionLine.class.getClassLoader());
  }

  public static final android.os.Parcelable.Creator<PredictionLine> CREATOR = new android.os.Parcelable.Creator<PredictionLine>() {
    @Override
    public PredictionLine[] newArray(int size) {
      return new PredictionLine[size];
    }

    @Override
    public PredictionLine createFromParcel(android.os.Parcel in) {
      return new PredictionLine(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_TIEM((short)1, "startTiem"),
    END_TIME((short)2, "endTime"),
    PRICE_LIST((short)3, "priceList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_TIEM
          return START_TIEM;
        case 2: // END_TIME
          return END_TIME;
        case 3: // PRICE_LIST
          return PRICE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_TIEM, new org.apache.thrift.meta_data.FieldMetaData("startTiem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_LIST, new org.apache.thrift.meta_data.FieldMetaData("priceList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PredictionLine.class, metaDataMap);
  }

  public PredictionLine() {
  }

  public PredictionLine(
    String startTiem,
    String endTime,
    List<Double> priceList)
  {
    this();
    this.startTiem = startTiem;
    this.endTime = endTime;
    this.priceList = priceList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PredictionLine(PredictionLine other) {
    if (other.is_set_startTiem()) {
      this.startTiem = other.startTiem;
    }
    if (other.is_set_endTime()) {
      this.endTime = other.endTime;
    }
    if (other.is_set_priceList()) {
      List<Double> __this__priceList = new ArrayList<Double>(other.priceList);
      this.priceList = __this__priceList;
    }
  }

  public PredictionLine deepCopy() {
    return new PredictionLine(this);
  }

  public void clear() {
    this.startTiem = null;
    this.endTime = null;
    if (this.priceList != null) {
      this.priceList.clear();
    }
  }

  public String get_startTiem() {
    return this.startTiem;
  }

  public void set_startTiem(String startTiem) {
    this.startTiem = startTiem;
  }

  public void unset_startTiem() {
    this.startTiem = null;
  }

  /** Returns true if field startTiem is set (has been assigned a value) and false otherwise */
  public boolean is_set_startTiem() {
    return this.startTiem != null;
  }

  public void set_startTiem_isSet(boolean value) {
    if (!value) {
      this.startTiem = null;
    }
  }

  public String get_endTime() {
    return this.endTime;
  }

  public void set_endTime(String endTime) {
    this.endTime = endTime;
  }

  public void unset_endTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean is_set_endTime() {
    return this.endTime != null;
  }

  public void set_endTime_isSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int get_priceList_size() {
    return (this.priceList == null) ? 0 : this.priceList.size();
  }

  public java.util.Iterator<Double> get_priceList_iterator() {
    return (this.priceList == null) ? null : this.priceList.iterator();
  }

  public void add_to_priceList(double elem) {
    if (this.priceList == null) {
      this.priceList = new ArrayList<Double>();
    }
    this.priceList.add(elem);
  }

  public List<Double> get_priceList() {
    return this.priceList;
  }

  public void set_priceList(List<Double> priceList) {
    this.priceList = priceList;
  }

  public void unset_priceList() {
    this.priceList = null;
  }

  /** Returns true if field priceList is set (has been assigned a value) and false otherwise */
  public boolean is_set_priceList() {
    return this.priceList != null;
  }

  public void set_priceList_isSet(boolean value) {
    if (!value) {
      this.priceList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_TIEM:
      if (value == null) {
        unset_startTiem();
      } else {
        set_startTiem((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unset_endTime();
      } else {
        set_endTime((String)value);
      }
      break;

    case PRICE_LIST:
      if (value == null) {
        unset_priceList();
      } else {
        set_priceList((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_TIEM:
      return get_startTiem();

    case END_TIME:
      return get_endTime();

    case PRICE_LIST:
      return get_priceList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_TIEM:
      return is_set_startTiem();
    case END_TIME:
      return is_set_endTime();
    case PRICE_LIST:
      return is_set_priceList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PredictionLine)
      return this.equals((PredictionLine)that);
    return false;
  }

  public boolean equals(PredictionLine that) {
    if (that == null)
      return false;

    boolean this_present_startTiem = true && this.is_set_startTiem();
    boolean that_present_startTiem = true && that.is_set_startTiem();
    if (this_present_startTiem || that_present_startTiem) {
      if (!(this_present_startTiem && that_present_startTiem))
        return false;
      if (!this.startTiem.equals(that.startTiem))
        return false;
    }

    boolean this_present_endTime = true && this.is_set_endTime();
    boolean that_present_endTime = true && that.is_set_endTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_priceList = true && this.is_set_priceList();
    boolean that_present_priceList = true && that.is_set_priceList();
    if (this_present_priceList || that_present_priceList) {
      if (!(this_present_priceList && that_present_priceList))
        return false;
      if (!this.priceList.equals(that.priceList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startTiem = true && (is_set_startTiem());
    list.add(present_startTiem);
    if (present_startTiem)
      list.add(startTiem);

    boolean present_endTime = true && (is_set_endTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_priceList = true && (is_set_priceList());
    list.add(present_priceList);
    if (present_priceList)
      list.add(priceList);

    return list.hashCode();
  }

  @Override
  public int compareTo(PredictionLine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_startTiem()).compareTo(other.is_set_startTiem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_startTiem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTiem, other.startTiem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_endTime()).compareTo(other.is_set_endTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_endTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_priceList()).compareTo(other.is_set_priceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_priceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceList, other.priceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PredictionLine(");
    boolean first = true;

    sb.append("startTiem:");
    if (this.startTiem == null) {
      sb.append("null");
    } else {
      sb.append(this.startTiem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceList:");
    if (this.priceList == null) {
      sb.append("null");
    } else {
      sb.append(this.priceList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_startTiem()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTiem' is unset! Struct:" + toString());
    }

    if (!is_set_endTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' is unset! Struct:" + toString());
    }

    if (!is_set_priceList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priceList' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PredictionLineStandardSchemeFactory implements SchemeFactory {
    public PredictionLineStandardScheme getScheme() {
      return new PredictionLineStandardScheme();
    }
  }

  private static class PredictionLineStandardScheme extends StandardScheme<PredictionLine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PredictionLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_TIEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTiem = iprot.readString();
              struct.set_startTiem_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.set_endTime_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                if (struct.priceList == null) {
                  struct.priceList = new ArrayList<Double>(_list168.size);
                }
                double _elem169 = (double)0;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = iprot.readDouble();
                  struct.priceList.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.set_priceList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PredictionLine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.startTiem != null) {
        oprot.writeFieldBegin(START_TIEM_FIELD_DESC);
        oprot.writeString(struct.startTiem);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.priceList != null) {
        oprot.writeFieldBegin(PRICE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.priceList.size()));
          for (double _iter171 : struct.priceList)
          {
            oprot.writeDouble(_iter171);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PredictionLineTupleSchemeFactory implements SchemeFactory {
    public PredictionLineTupleScheme getScheme() {
      return new PredictionLineTupleScheme();
    }
  }

  private static class PredictionLineTupleScheme extends TupleScheme<PredictionLine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PredictionLine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.startTiem);
      oprot.writeString(struct.endTime);
      {
        oprot.writeI32(struct.priceList.size());
        for (double _iter172 : struct.priceList)
        {
          oprot.writeDouble(_iter172);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PredictionLine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startTiem = iprot.readString();
      struct.set_startTiem_isSet(true);
      struct.endTime = iprot.readString();
      struct.set_endTime_isSet(true);
      {
        org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.priceList == null) {
          struct.priceList = new ArrayList<Double>(_list173.size);
        }
        double _elem174 = (double)0;
        for (int _i175 = 0; _i175 < _list173.size; ++_i175)
        {
          _elem174 = iprot.readDouble();
          struct.priceList.add(_elem174);
        }
      }
      struct.set_priceList_isSet(true);
    }
  }

}

