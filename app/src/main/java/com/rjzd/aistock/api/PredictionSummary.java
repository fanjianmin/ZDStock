/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股票预测
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class PredictionSummary implements org.apache.thrift.TBase<PredictionSummary, PredictionSummary._Fields>, java.io.Serializable, Cloneable, Comparable<PredictionSummary>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PredictionSummary");

  private static final org.apache.thrift.protocol.TField P_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("pResult", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField P_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("pClose", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField P_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("pRange", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PredictionSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PredictionSummaryTupleSchemeFactory());
  }

  private RiseOrFallPrediction pResult; // required
  private double pClose; // required
  private double pRange; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(pResult.getValue());
    out.writeDouble(pClose);
    out.writeDouble(pRange);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public PredictionSummary(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.pResult = RiseOrFallPrediction.findByValue(in.readInt());
    this.pClose = in.readDouble();
    this.pRange = in.readDouble();
  }

  public static final android.os.Parcelable.Creator<PredictionSummary> CREATOR = new android.os.Parcelable.Creator<PredictionSummary>() {
    @Override
    public PredictionSummary[] newArray(int size) {
      return new PredictionSummary[size];
    }

    @Override
    public PredictionSummary createFromParcel(android.os.Parcel in) {
      return new PredictionSummary(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RiseOrFallPrediction
     */
    P_RESULT((short)1, "pResult"),
    P_CLOSE((short)2, "pClose"),
    P_RANGE((short)3, "pRange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_RESULT
          return P_RESULT;
        case 2: // P_CLOSE
          return P_CLOSE;
        case 3: // P_RANGE
          return P_RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PCLOSE_ISSET_ID = 0;
  private static final int __PRANGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_RESULT, new org.apache.thrift.meta_data.FieldMetaData("pResult", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RiseOrFallPrediction.class)));
    tmpMap.put(_Fields.P_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("pClose", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P_RANGE, new org.apache.thrift.meta_data.FieldMetaData("pRange", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PredictionSummary.class, metaDataMap);
  }

  public PredictionSummary() {
  }

  public PredictionSummary(
    RiseOrFallPrediction pResult,
    double pClose,
    double pRange)
  {
    this();
    this.pResult = pResult;
    this.pClose = pClose;
    set_pClose_isSet(true);
    this.pRange = pRange;
    set_pRange_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PredictionSummary(PredictionSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_pResult()) {
      this.pResult = other.pResult;
    }
    this.pClose = other.pClose;
    this.pRange = other.pRange;
  }

  public PredictionSummary deepCopy() {
    return new PredictionSummary(this);
  }

  public void clear() {
    this.pResult = null;
    set_pClose_isSet(false);
    this.pClose = 0.0;
    set_pRange_isSet(false);
    this.pRange = 0.0;
  }

  /**
   * 
   * @see RiseOrFallPrediction
   */
  public RiseOrFallPrediction get_pResult() {
    return this.pResult;
  }

  /**
   * 
   * @see RiseOrFallPrediction
   */
  public void set_pResult(RiseOrFallPrediction pResult) {
    this.pResult = pResult;
  }

  public void unset_pResult() {
    this.pResult = null;
  }

  /** Returns true if field pResult is set (has been assigned a value) and false otherwise */
  public boolean is_set_pResult() {
    return this.pResult != null;
  }

  public void set_pResult_isSet(boolean value) {
    if (!value) {
      this.pResult = null;
    }
  }

  public double get_pClose() {
    return this.pClose;
  }

  public void set_pClose(double pClose) {
    this.pClose = pClose;
    set_pClose_isSet(true);
  }

  public void unset_pClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PCLOSE_ISSET_ID);
  }

  /** Returns true if field pClose is set (has been assigned a value) and false otherwise */
  public boolean is_set_pClose() {
    return EncodingUtils.testBit(__isset_bitfield, __PCLOSE_ISSET_ID);
  }

  public void set_pClose_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PCLOSE_ISSET_ID, value);
  }

  public double get_pRange() {
    return this.pRange;
  }

  public void set_pRange(double pRange) {
    this.pRange = pRange;
    set_pRange_isSet(true);
  }

  public void unset_pRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRANGE_ISSET_ID);
  }

  /** Returns true if field pRange is set (has been assigned a value) and false otherwise */
  public boolean is_set_pRange() {
    return EncodingUtils.testBit(__isset_bitfield, __PRANGE_ISSET_ID);
  }

  public void set_pRange_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRANGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_RESULT:
      if (value == null) {
        unset_pResult();
      } else {
        set_pResult((RiseOrFallPrediction)value);
      }
      break;

    case P_CLOSE:
      if (value == null) {
        unset_pClose();
      } else {
        set_pClose((Double)value);
      }
      break;

    case P_RANGE:
      if (value == null) {
        unset_pRange();
      } else {
        set_pRange((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_RESULT:
      return get_pResult();

    case P_CLOSE:
      return get_pClose();

    case P_RANGE:
      return get_pRange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_RESULT:
      return is_set_pResult();
    case P_CLOSE:
      return is_set_pClose();
    case P_RANGE:
      return is_set_pRange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PredictionSummary)
      return this.equals((PredictionSummary)that);
    return false;
  }

  public boolean equals(PredictionSummary that) {
    if (that == null)
      return false;

    boolean this_present_pResult = true && this.is_set_pResult();
    boolean that_present_pResult = true && that.is_set_pResult();
    if (this_present_pResult || that_present_pResult) {
      if (!(this_present_pResult && that_present_pResult))
        return false;
      if (!this.pResult.equals(that.pResult))
        return false;
    }

    boolean this_present_pClose = true;
    boolean that_present_pClose = true;
    if (this_present_pClose || that_present_pClose) {
      if (!(this_present_pClose && that_present_pClose))
        return false;
      if (this.pClose != that.pClose)
        return false;
    }

    boolean this_present_pRange = true;
    boolean that_present_pRange = true;
    if (this_present_pRange || that_present_pRange) {
      if (!(this_present_pRange && that_present_pRange))
        return false;
      if (this.pRange != that.pRange)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pResult = true && (is_set_pResult());
    list.add(present_pResult);
    if (present_pResult)
      list.add(pResult.getValue());

    boolean present_pClose = true;
    list.add(present_pClose);
    if (present_pClose)
      list.add(pClose);

    boolean present_pRange = true;
    list.add(present_pRange);
    if (present_pRange)
      list.add(pRange);

    return list.hashCode();
  }

  @Override
  public int compareTo(PredictionSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_pResult()).compareTo(other.is_set_pResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pResult, other.pResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_pClose()).compareTo(other.is_set_pClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pClose, other.pClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_pRange()).compareTo(other.is_set_pRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pRange, other.pRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PredictionSummary(");
    boolean first = true;

    sb.append("pResult:");
    if (this.pResult == null) {
      sb.append("null");
    } else {
      sb.append(this.pResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pClose:");
    sb.append(this.pClose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pRange:");
    sb.append(this.pRange);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_pResult()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pResult' is unset! Struct:" + toString());
    }

    if (!is_set_pClose()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pClose' is unset! Struct:" + toString());
    }

    if (!is_set_pRange()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pRange' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PredictionSummaryStandardSchemeFactory implements SchemeFactory {
    public PredictionSummaryStandardScheme getScheme() {
      return new PredictionSummaryStandardScheme();
    }
  }

  private static class PredictionSummaryStandardScheme extends StandardScheme<PredictionSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PredictionSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pResult = com.rjzd.aistock.api.RiseOrFallPrediction.findByValue(iprot.readI32());
              struct.set_pResult_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pClose = iprot.readDouble();
              struct.set_pClose_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // P_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pRange = iprot.readDouble();
              struct.set_pRange_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PredictionSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pResult != null) {
        oprot.writeFieldBegin(P_RESULT_FIELD_DESC);
        oprot.writeI32(struct.pResult.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(P_CLOSE_FIELD_DESC);
      oprot.writeDouble(struct.pClose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P_RANGE_FIELD_DESC);
      oprot.writeDouble(struct.pRange);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PredictionSummaryTupleSchemeFactory implements SchemeFactory {
    public PredictionSummaryTupleScheme getScheme() {
      return new PredictionSummaryTupleScheme();
    }
  }

  private static class PredictionSummaryTupleScheme extends TupleScheme<PredictionSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PredictionSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.pResult.getValue());
      oprot.writeDouble(struct.pClose);
      oprot.writeDouble(struct.pRange);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PredictionSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pResult = com.rjzd.aistock.api.RiseOrFallPrediction.findByValue(iprot.readI32());
      struct.set_pResult_isSet(true);
      struct.pClose = iprot.readDouble();
      struct.set_pClose_isSet(true);
      struct.pRange = iprot.readDouble();
      struct.set_pRange_isSet(true);
    }
  }

}

