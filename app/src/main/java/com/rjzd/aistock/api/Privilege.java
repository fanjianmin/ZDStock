/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 积分特权
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Privilege implements org.apache.thrift.TBase<Privilege, Privilege._Fields>, java.io.Serializable, Cloneable, Comparable<Privilege>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Privilege");

  private static final org.apache.thrift.protocol.TField PRIVILEGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("privilegeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COST_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("costPoints", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UNLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("unlock", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrivilegeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrivilegeTupleSchemeFactory());
  }

  private String privilegeId; // required
  private int costPoints; // required
  private int unlock; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(privilegeId);
    out.writeInt(costPoints);
    out.writeInt(unlock);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Privilege(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.privilegeId= in.readString();
    this.costPoints = in.readInt();
    this.unlock = in.readInt();
  }

  public static final android.os.Parcelable.Creator<Privilege> CREATOR = new android.os.Parcelable.Creator<Privilege>() {
    @Override
    public Privilege[] newArray(int size) {
      return new Privilege[size];
    }

    @Override
    public Privilege createFromParcel(android.os.Parcel in) {
      return new Privilege(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIVILEGE_ID((short)1, "privilegeId"),
    COST_POINTS((short)2, "costPoints"),
    UNLOCK((short)3, "unlock");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIVILEGE_ID
          return PRIVILEGE_ID;
        case 2: // COST_POINTS
          return COST_POINTS;
        case 3: // UNLOCK
          return UNLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COSTPOINTS_ISSET_ID = 0;
  private static final int __UNLOCK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIVILEGE_ID, new org.apache.thrift.meta_data.FieldMetaData("privilegeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_POINTS, new org.apache.thrift.meta_data.FieldMetaData("costPoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLOCK, new org.apache.thrift.meta_data.FieldMetaData("unlock", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Privilege.class, metaDataMap);
  }

  public Privilege() {
  }

  public Privilege(
    String privilegeId,
    int costPoints,
    int unlock)
  {
    this();
    this.privilegeId = privilegeId;
    this.costPoints = costPoints;
    set_costPoints_isSet(true);
    this.unlock = unlock;
    set_unlock_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Privilege(Privilege other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_privilegeId()) {
      this.privilegeId = other.privilegeId;
    }
    this.costPoints = other.costPoints;
    this.unlock = other.unlock;
  }

  public Privilege deepCopy() {
    return new Privilege(this);
  }

  public void clear() {
    this.privilegeId = null;
    set_costPoints_isSet(false);
    this.costPoints = 0;
    set_unlock_isSet(false);
    this.unlock = 0;
  }

  public String get_privilegeId() {
    return this.privilegeId;
  }

  public void set_privilegeId(String privilegeId) {
    this.privilegeId = privilegeId;
  }

  public void unset_privilegeId() {
    this.privilegeId = null;
  }

  /** Returns true if field privilegeId is set (has been assigned a value) and false otherwise */
  public boolean is_set_privilegeId() {
    return this.privilegeId != null;
  }

  public void set_privilegeId_isSet(boolean value) {
    if (!value) {
      this.privilegeId = null;
    }
  }

  public int get_costPoints() {
    return this.costPoints;
  }

  public void set_costPoints(int costPoints) {
    this.costPoints = costPoints;
    set_costPoints_isSet(true);
  }

  public void unset_costPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COSTPOINTS_ISSET_ID);
  }

  /** Returns true if field costPoints is set (has been assigned a value) and false otherwise */
  public boolean is_set_costPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __COSTPOINTS_ISSET_ID);
  }

  public void set_costPoints_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COSTPOINTS_ISSET_ID, value);
  }

  public int get_unlock() {
    return this.unlock;
  }

  public void set_unlock(int unlock) {
    this.unlock = unlock;
    set_unlock_isSet(true);
  }

  public void unset_unlock() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLOCK_ISSET_ID);
  }

  /** Returns true if field unlock is set (has been assigned a value) and false otherwise */
  public boolean is_set_unlock() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLOCK_ISSET_ID);
  }

  public void set_unlock_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLOCK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRIVILEGE_ID:
      if (value == null) {
        unset_privilegeId();
      } else {
        set_privilegeId((String)value);
      }
      break;

    case COST_POINTS:
      if (value == null) {
        unset_costPoints();
      } else {
        set_costPoints((Integer)value);
      }
      break;

    case UNLOCK:
      if (value == null) {
        unset_unlock();
      } else {
        set_unlock((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIVILEGE_ID:
      return get_privilegeId();

    case COST_POINTS:
      return get_costPoints();

    case UNLOCK:
      return get_unlock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRIVILEGE_ID:
      return is_set_privilegeId();
    case COST_POINTS:
      return is_set_costPoints();
    case UNLOCK:
      return is_set_unlock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Privilege)
      return this.equals((Privilege)that);
    return false;
  }

  public boolean equals(Privilege that) {
    if (that == null)
      return false;

    boolean this_present_privilegeId = true && this.is_set_privilegeId();
    boolean that_present_privilegeId = true && that.is_set_privilegeId();
    if (this_present_privilegeId || that_present_privilegeId) {
      if (!(this_present_privilegeId && that_present_privilegeId))
        return false;
      if (!this.privilegeId.equals(that.privilegeId))
        return false;
    }

    boolean this_present_costPoints = true;
    boolean that_present_costPoints = true;
    if (this_present_costPoints || that_present_costPoints) {
      if (!(this_present_costPoints && that_present_costPoints))
        return false;
      if (this.costPoints != that.costPoints)
        return false;
    }

    boolean this_present_unlock = true;
    boolean that_present_unlock = true;
    if (this_present_unlock || that_present_unlock) {
      if (!(this_present_unlock && that_present_unlock))
        return false;
      if (this.unlock != that.unlock)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_privilegeId = true && (is_set_privilegeId());
    list.add(present_privilegeId);
    if (present_privilegeId)
      list.add(privilegeId);

    boolean present_costPoints = true;
    list.add(present_costPoints);
    if (present_costPoints)
      list.add(costPoints);

    boolean present_unlock = true;
    list.add(present_unlock);
    if (present_unlock)
      list.add(unlock);

    return list.hashCode();
  }

  @Override
  public int compareTo(Privilege other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_privilegeId()).compareTo(other.is_set_privilegeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_privilegeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilegeId, other.privilegeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_costPoints()).compareTo(other.is_set_costPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_costPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costPoints, other.costPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_unlock()).compareTo(other.is_set_unlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_unlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlock, other.unlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Privilege(");
    boolean first = true;

    sb.append("privilegeId:");
    if (this.privilegeId == null) {
      sb.append("null");
    } else {
      sb.append(this.privilegeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costPoints:");
    sb.append(this.costPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlock:");
    sb.append(this.unlock);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_privilegeId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privilegeId' is unset! Struct:" + toString());
    }

    if (!is_set_costPoints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'costPoints' is unset! Struct:" + toString());
    }

    if (!is_set_unlock()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unlock' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class PrivilegeStandardSchemeFactory implements SchemeFactory {
    public PrivilegeStandardScheme getScheme() {
      return new PrivilegeStandardScheme();
    }
  }

  private static class PrivilegeStandardScheme extends StandardScheme<Privilege> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Privilege struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIVILEGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privilegeId = iprot.readString();
              struct.set_privilegeId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COST_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.costPoints = iprot.readI32();
              struct.set_costPoints_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlock = iprot.readI32();
              struct.set_unlock_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Privilege struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.privilegeId != null) {
        oprot.writeFieldBegin(PRIVILEGE_ID_FIELD_DESC);
        oprot.writeString(struct.privilegeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_POINTS_FIELD_DESC);
      oprot.writeI32(struct.costPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLOCK_FIELD_DESC);
      oprot.writeI32(struct.unlock);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrivilegeTupleSchemeFactory implements SchemeFactory {
    public PrivilegeTupleScheme getScheme() {
      return new PrivilegeTupleScheme();
    }
  }

  private static class PrivilegeTupleScheme extends TupleScheme<Privilege> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Privilege struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.privilegeId);
      oprot.writeI32(struct.costPoints);
      oprot.writeI32(struct.unlock);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Privilege struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.privilegeId = iprot.readString();
      struct.set_privilegeId_isSet(true);
      struct.costPoints = iprot.readI32();
      struct.set_costPoints_isSet(true);
      struct.unlock = iprot.readI32();
      struct.set_unlock_isSet(true);
    }
  }

}

