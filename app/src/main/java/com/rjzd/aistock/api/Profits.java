/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Profits implements org.apache.thrift.TBase<Profits, Profits._Fields>, java.io.Serializable, Cloneable, Comparable<Profits>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Profits");

  private static final org.apache.thrift.protocol.TField NET_PROFITS_FIELD_DESC = new org.apache.thrift.protocol.TField("netProfits", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PROFITS_YOY_FIELD_DESC = new org.apache.thrift.protocol.TField("profitsYoy", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProfitsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProfitsTupleSchemeFactory());
  }

  private double netProfits; // required
  private double profitsYoy; // required
  private String unit; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeDouble(netProfits);
    out.writeDouble(profitsYoy);
    out.writeString(unit);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Profits(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.netProfits = in.readDouble();
    this.profitsYoy = in.readDouble();
    this.unit= in.readString();
  }

  public static final android.os.Parcelable.Creator<Profits> CREATOR = new android.os.Parcelable.Creator<Profits>() {
    @Override
    public Profits[] newArray(int size) {
      return new Profits[size];
    }

    @Override
    public Profits createFromParcel(android.os.Parcel in) {
      return new Profits(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NET_PROFITS((short)1, "netProfits"),
    PROFITS_YOY((short)2, "profitsYoy"),
    UNIT((short)3, "unit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NET_PROFITS
          return NET_PROFITS;
        case 2: // PROFITS_YOY
          return PROFITS_YOY;
        case 3: // UNIT
          return UNIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NETPROFITS_ISSET_ID = 0;
  private static final int __PROFITSYOY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NET_PROFITS, new org.apache.thrift.meta_data.FieldMetaData("netProfits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROFITS_YOY, new org.apache.thrift.meta_data.FieldMetaData("profitsYoy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Profits.class, metaDataMap);
  }

  public Profits() {
  }

  public Profits(
    double netProfits,
    double profitsYoy,
    String unit)
  {
    this();
    this.netProfits = netProfits;
    set_netProfits_isSet(true);
    this.profitsYoy = profitsYoy;
    set_profitsYoy_isSet(true);
    this.unit = unit;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Profits(Profits other) {
    __isset_bitfield = other.__isset_bitfield;
    this.netProfits = other.netProfits;
    this.profitsYoy = other.profitsYoy;
    if (other.is_set_unit()) {
      this.unit = other.unit;
    }
  }

  public Profits deepCopy() {
    return new Profits(this);
  }

  public void clear() {
    set_netProfits_isSet(false);
    this.netProfits = 0.0;
    set_profitsYoy_isSet(false);
    this.profitsYoy = 0.0;
    this.unit = null;
  }

  public double get_netProfits() {
    return this.netProfits;
  }

  public void set_netProfits(double netProfits) {
    this.netProfits = netProfits;
    set_netProfits_isSet(true);
  }

  public void unset_netProfits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETPROFITS_ISSET_ID);
  }

  /** Returns true if field netProfits is set (has been assigned a value) and false otherwise */
  public boolean is_set_netProfits() {
    return EncodingUtils.testBit(__isset_bitfield, __NETPROFITS_ISSET_ID);
  }

  public void set_netProfits_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETPROFITS_ISSET_ID, value);
  }

  public double get_profitsYoy() {
    return this.profitsYoy;
  }

  public void set_profitsYoy(double profitsYoy) {
    this.profitsYoy = profitsYoy;
    set_profitsYoy_isSet(true);
  }

  public void unset_profitsYoy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFITSYOY_ISSET_ID);
  }

  /** Returns true if field profitsYoy is set (has been assigned a value) and false otherwise */
  public boolean is_set_profitsYoy() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFITSYOY_ISSET_ID);
  }

  public void set_profitsYoy_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFITSYOY_ISSET_ID, value);
  }

  public String get_unit() {
    return this.unit;
  }

  public void set_unit(String unit) {
    this.unit = unit;
  }

  public void unset_unit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean is_set_unit() {
    return this.unit != null;
  }

  public void set_unit_isSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NET_PROFITS:
      if (value == null) {
        unset_netProfits();
      } else {
        set_netProfits((Double)value);
      }
      break;

    case PROFITS_YOY:
      if (value == null) {
        unset_profitsYoy();
      } else {
        set_profitsYoy((Double)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unset_unit();
      } else {
        set_unit((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NET_PROFITS:
      return get_netProfits();

    case PROFITS_YOY:
      return get_profitsYoy();

    case UNIT:
      return get_unit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NET_PROFITS:
      return is_set_netProfits();
    case PROFITS_YOY:
      return is_set_profitsYoy();
    case UNIT:
      return is_set_unit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Profits)
      return this.equals((Profits)that);
    return false;
  }

  public boolean equals(Profits that) {
    if (that == null)
      return false;

    boolean this_present_netProfits = true;
    boolean that_present_netProfits = true;
    if (this_present_netProfits || that_present_netProfits) {
      if (!(this_present_netProfits && that_present_netProfits))
        return false;
      if (this.netProfits != that.netProfits)
        return false;
    }

    boolean this_present_profitsYoy = true;
    boolean that_present_profitsYoy = true;
    if (this_present_profitsYoy || that_present_profitsYoy) {
      if (!(this_present_profitsYoy && that_present_profitsYoy))
        return false;
      if (this.profitsYoy != that.profitsYoy)
        return false;
    }

    boolean this_present_unit = true && this.is_set_unit();
    boolean that_present_unit = true && that.is_set_unit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_netProfits = true;
    list.add(present_netProfits);
    if (present_netProfits)
      list.add(netProfits);

    boolean present_profitsYoy = true;
    list.add(present_profitsYoy);
    if (present_profitsYoy)
      list.add(profitsYoy);

    boolean present_unit = true && (is_set_unit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    return list.hashCode();
  }

  @Override
  public int compareTo(Profits other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_netProfits()).compareTo(other.is_set_netProfits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_netProfits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netProfits, other.netProfits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profitsYoy()).compareTo(other.is_set_profitsYoy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profitsYoy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitsYoy, other.profitsYoy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_unit()).compareTo(other.is_set_unit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_unit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Profits(");
    boolean first = true;

    sb.append("netProfits:");
    sb.append(this.netProfits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profitsYoy:");
    sb.append(this.profitsYoy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_netProfits()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'netProfits' is unset! Struct:" + toString());
    }

    if (!is_set_profitsYoy()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profitsYoy' is unset! Struct:" + toString());
    }

    if (!is_set_unit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unit' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class ProfitsStandardSchemeFactory implements SchemeFactory {
    public ProfitsStandardScheme getScheme() {
      return new ProfitsStandardScheme();
    }
  }

  private static class ProfitsStandardScheme extends StandardScheme<Profits> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Profits struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NET_PROFITS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.netProfits = iprot.readDouble();
              struct.set_netProfits_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFITS_YOY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.profitsYoy = iprot.readDouble();
              struct.set_profitsYoy_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.set_unit_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Profits struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NET_PROFITS_FIELD_DESC);
      oprot.writeDouble(struct.netProfits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFITS_YOY_FIELD_DESC);
      oprot.writeDouble(struct.profitsYoy);
      oprot.writeFieldEnd();
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfitsTupleSchemeFactory implements SchemeFactory {
    public ProfitsTupleScheme getScheme() {
      return new ProfitsTupleScheme();
    }
  }

  private static class ProfitsTupleScheme extends TupleScheme<Profits> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Profits struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.netProfits);
      oprot.writeDouble(struct.profitsYoy);
      oprot.writeString(struct.unit);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Profits struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.netProfits = iprot.readDouble();
      struct.set_netProfits_isSet(true);
      struct.profitsYoy = iprot.readDouble();
      struct.set_profitsYoy_isSet(true);
      struct.unit = iprot.readString();
      struct.set_unit_isSet(true);
    }
  }

}

