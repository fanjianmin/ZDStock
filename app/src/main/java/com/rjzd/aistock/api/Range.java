/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 变化区间
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class Range implements org.apache.thrift.TBase<Range, Range._Fields>, java.io.Serializable, Cloneable, Comparable<Range>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Range");

  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField IS_MIN_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isMinValid", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_MAX_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isMaxValid", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RangeTupleSchemeFactory());
  }

  private double min; // required
  private double max; // required
  private boolean isMinValid; // required
  private boolean isMaxValid; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeDouble(min);
    out.writeDouble(max);
    out.writeInt(isMinValid ? 1 : 0);
    out.writeInt(isMaxValid ? 1 : 0);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Range(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.min = in.readDouble();
    this.max = in.readDouble();
    this.isMinValid = (in.readInt()==1);
    this.isMaxValid = (in.readInt()==1);
  }

  public static final android.os.Parcelable.Creator<Range> CREATOR = new android.os.Parcelable.Creator<Range>() {
    @Override
    public Range[] newArray(int size) {
      return new Range[size];
    }

    @Override
    public Range createFromParcel(android.os.Parcel in) {
      return new Range(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN((short)1, "min"),
    MAX((short)2, "max"),
    IS_MIN_VALID((short)3, "isMinValid"),
    IS_MAX_VALID((short)4, "isMaxValid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIN
          return MIN;
        case 2: // MAX
          return MAX;
        case 3: // IS_MIN_VALID
          return IS_MIN_VALID;
        case 4: // IS_MAX_VALID
          return IS_MAX_VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_ISSET_ID = 0;
  private static final int __MAX_ISSET_ID = 1;
  private static final int __ISMINVALID_ISSET_ID = 2;
  private static final int __ISMAXVALID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_MIN_VALID, new org.apache.thrift.meta_data.FieldMetaData("isMinValid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MAX_VALID, new org.apache.thrift.meta_data.FieldMetaData("isMaxValid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Range.class, metaDataMap);
  }

  public Range() {
  }

  public Range(
    double min,
    double max,
    boolean isMinValid,
    boolean isMaxValid)
  {
    this();
    this.min = min;
    set_min_isSet(true);
    this.max = max;
    set_max_isSet(true);
    this.isMinValid = isMinValid;
    set_isMinValid_isSet(true);
    this.isMaxValid = isMaxValid;
    set_isMaxValid_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Range(Range other) {
    __isset_bitfield = other.__isset_bitfield;
    this.min = other.min;
    this.max = other.max;
    this.isMinValid = other.isMinValid;
    this.isMaxValid = other.isMaxValid;
  }

  public Range deepCopy() {
    return new Range(this);
  }

  public void clear() {
    set_min_isSet(false);
    this.min = 0.0;
    set_max_isSet(false);
    this.max = 0.0;
    set_isMinValid_isSet(false);
    this.isMinValid = false;
    set_isMaxValid_isSet(false);
    this.isMaxValid = false;
  }

  public double get_min() {
    return this.min;
  }

  public void set_min(double min) {
    this.min = min;
    set_min_isSet(true);
  }

  public void unset_min() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean is_set_min() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void set_min_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public double get_max() {
    return this.max;
  }

  public void set_max(double max) {
    this.max = max;
    set_max_isSet(true);
  }

  public void unset_max() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean is_set_max() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void set_max_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public boolean is_isMinValid() {
    return this.isMinValid;
  }

  public void set_isMinValid(boolean isMinValid) {
    this.isMinValid = isMinValid;
    set_isMinValid_isSet(true);
  }

  public void unset_isMinValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMINVALID_ISSET_ID);
  }

  /** Returns true if field isMinValid is set (has been assigned a value) and false otherwise */
  public boolean is_set_isMinValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMINVALID_ISSET_ID);
  }

  public void set_isMinValid_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMINVALID_ISSET_ID, value);
  }

  public boolean is_isMaxValid() {
    return this.isMaxValid;
  }

  public void set_isMaxValid(boolean isMaxValid) {
    this.isMaxValid = isMaxValid;
    set_isMaxValid_isSet(true);
  }

  public void unset_isMaxValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMAXVALID_ISSET_ID);
  }

  /** Returns true if field isMaxValid is set (has been assigned a value) and false otherwise */
  public boolean is_set_isMaxValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMAXVALID_ISSET_ID);
  }

  public void set_isMaxValid_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMAXVALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN:
      if (value == null) {
        unset_min();
      } else {
        set_min((Double)value);
      }
      break;

    case MAX:
      if (value == null) {
        unset_max();
      } else {
        set_max((Double)value);
      }
      break;

    case IS_MIN_VALID:
      if (value == null) {
        unset_isMinValid();
      } else {
        set_isMinValid((Boolean)value);
      }
      break;

    case IS_MAX_VALID:
      if (value == null) {
        unset_isMaxValid();
      } else {
        set_isMaxValid((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN:
      return get_min();

    case MAX:
      return get_max();

    case IS_MIN_VALID:
      return is_isMinValid();

    case IS_MAX_VALID:
      return is_isMaxValid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN:
      return is_set_min();
    case MAX:
      return is_set_max();
    case IS_MIN_VALID:
      return is_set_isMinValid();
    case IS_MAX_VALID:
      return is_set_isMaxValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Range)
      return this.equals((Range)that);
    return false;
  }

  public boolean equals(Range that) {
    if (that == null)
      return false;

    boolean this_present_min = true;
    boolean that_present_min = true;
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    boolean this_present_isMinValid = true;
    boolean that_present_isMinValid = true;
    if (this_present_isMinValid || that_present_isMinValid) {
      if (!(this_present_isMinValid && that_present_isMinValid))
        return false;
      if (this.isMinValid != that.isMinValid)
        return false;
    }

    boolean this_present_isMaxValid = true;
    boolean that_present_isMaxValid = true;
    if (this_present_isMaxValid || that_present_isMaxValid) {
      if (!(this_present_isMaxValid && that_present_isMaxValid))
        return false;
      if (this.isMaxValid != that.isMaxValid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_min = true;
    list.add(present_min);
    if (present_min)
      list.add(min);

    boolean present_max = true;
    list.add(present_max);
    if (present_max)
      list.add(max);

    boolean present_isMinValid = true;
    list.add(present_isMinValid);
    if (present_isMinValid)
      list.add(isMinValid);

    boolean present_isMaxValid = true;
    list.add(present_isMaxValid);
    if (present_isMaxValid)
      list.add(isMaxValid);

    return list.hashCode();
  }

  @Override
  public int compareTo(Range other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_min()).compareTo(other.is_set_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_max()).compareTo(other.is_set_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isMinValid()).compareTo(other.is_set_isMinValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isMinValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMinValid, other.isMinValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isMaxValid()).compareTo(other.is_set_isMaxValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isMaxValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMaxValid, other.isMaxValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Range(");
    boolean first = true;

    sb.append("min:");
    sb.append(this.min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMinValid:");
    sb.append(this.isMinValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMaxValid:");
    sb.append(this.isMaxValid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_min()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min' is unset! Struct:" + toString());
    }

    if (!is_set_max()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max' is unset! Struct:" + toString());
    }

    if (!is_set_isMinValid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isMinValid' is unset! Struct:" + toString());
    }

    if (!is_set_isMaxValid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isMaxValid' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class RangeStandardSchemeFactory implements SchemeFactory {
    public RangeStandardScheme getScheme() {
      return new RangeStandardScheme();
    }
  }

  private static class RangeStandardScheme extends StandardScheme<Range> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Range struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min = iprot.readDouble();
              struct.set_min_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max = iprot.readDouble();
              struct.set_max_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_MIN_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMinValid = iprot.readBool();
              struct.set_isMinValid_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_MAX_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMaxValid = iprot.readBool();
              struct.set_isMaxValid_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Range struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeDouble(struct.min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeDouble(struct.max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MIN_VALID_FIELD_DESC);
      oprot.writeBool(struct.isMinValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MAX_VALID_FIELD_DESC);
      oprot.writeBool(struct.isMaxValid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RangeTupleSchemeFactory implements SchemeFactory {
    public RangeTupleScheme getScheme() {
      return new RangeTupleScheme();
    }
  }

  private static class RangeTupleScheme extends TupleScheme<Range> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Range struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.min);
      oprot.writeDouble(struct.max);
      oprot.writeBool(struct.isMinValid);
      oprot.writeBool(struct.isMaxValid);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Range struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.min = iprot.readDouble();
      struct.set_min_isSet(true);
      struct.max = iprot.readDouble();
      struct.set_max_isSet(true);
      struct.isMinValid = iprot.readBool();
      struct.set_isMinValid_isSet(true);
      struct.isMaxValid = iprot.readBool();
      struct.set_isMaxValid_isSet(true);
    }
  }

}

