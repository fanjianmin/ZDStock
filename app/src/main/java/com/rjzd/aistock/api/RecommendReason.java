/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 推荐理由
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class RecommendReason implements org.apache.thrift.TBase<RecommendReason, RecommendReason._Fields>, java.io.Serializable, Cloneable, Comparable<RecommendReason>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecommendReason");

  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecommendReasonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecommendReasonTupleSchemeFactory());
  }

  private String unit; // required
  private List<Double> data; // required
  private String title; // required
  private String summary; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeString(unit);
    out.writeList(data);
    out.writeString(title);
    out.writeString(summary);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public RecommendReason(android.os.Parcel in) {
    this.unit= in.readString();
    this.data = new ArrayList<Double>();
    in.readList(this.data, RecommendReason.class.getClassLoader());
    this.title= in.readString();
    this.summary= in.readString();
  }

  public static final android.os.Parcelable.Creator<RecommendReason> CREATOR = new android.os.Parcelable.Creator<RecommendReason>() {
    @Override
    public RecommendReason[] newArray(int size) {
      return new RecommendReason[size];
    }

    @Override
    public RecommendReason createFromParcel(android.os.Parcel in) {
      return new RecommendReason(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIT((short)1, "unit"),
    DATA((short)2, "data"),
    TITLE((short)3, "title"),
    SUMMARY((short)4, "summary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIT
          return UNIT;
        case 2: // DATA
          return DATA;
        case 3: // TITLE
          return TITLE;
        case 4: // SUMMARY
          return SUMMARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecommendReason.class, metaDataMap);
  }

  public RecommendReason() {
  }

  public RecommendReason(
    String unit,
    List<Double> data,
    String title,
    String summary)
  {
    this();
    this.unit = unit;
    this.data = data;
    this.title = title;
    this.summary = summary;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecommendReason(RecommendReason other) {
    if (other.is_set_unit()) {
      this.unit = other.unit;
    }
    if (other.is_set_data()) {
      List<Double> __this__data = new ArrayList<Double>(other.data);
      this.data = __this__data;
    }
    if (other.is_set_title()) {
      this.title = other.title;
    }
    if (other.is_set_summary()) {
      this.summary = other.summary;
    }
  }

  public RecommendReason deepCopy() {
    return new RecommendReason(this);
  }

  public void clear() {
    this.unit = null;
    if (this.data != null) {
      this.data.clear();
    }
    this.title = null;
    this.summary = null;
  }

  public String get_unit() {
    return this.unit;
  }

  public void set_unit(String unit) {
    this.unit = unit;
  }

  public void unset_unit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean is_set_unit() {
    return this.unit != null;
  }

  public void set_unit_isSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public int get_data_size() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<Double> get_data_iterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void add_to_data(double elem) {
    if (this.data == null) {
      this.data = new ArrayList<Double>();
    }
    this.data.add(elem);
  }

  public List<Double> get_data() {
    return this.data;
  }

  public void set_data(List<Double> data) {
    this.data = data;
  }

  public void unset_data() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean is_set_data() {
    return this.data != null;
  }

  public void set_data_isSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public String get_title() {
    return this.title;
  }

  public void set_title(String title) {
    this.title = title;
  }

  public void unset_title() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean is_set_title() {
    return this.title != null;
  }

  public void set_title_isSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String get_summary() {
    return this.summary;
  }

  public void set_summary(String summary) {
    this.summary = summary;
  }

  public void unset_summary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean is_set_summary() {
    return this.summary != null;
  }

  public void set_summary_isSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIT:
      if (value == null) {
        unset_unit();
      } else {
        set_unit((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unset_data();
      } else {
        set_data((List<Double>)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unset_title();
      } else {
        set_title((String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unset_summary();
      } else {
        set_summary((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIT:
      return get_unit();

    case DATA:
      return get_data();

    case TITLE:
      return get_title();

    case SUMMARY:
      return get_summary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIT:
      return is_set_unit();
    case DATA:
      return is_set_data();
    case TITLE:
      return is_set_title();
    case SUMMARY:
      return is_set_summary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecommendReason)
      return this.equals((RecommendReason)that);
    return false;
  }

  public boolean equals(RecommendReason that) {
    if (that == null)
      return false;

    boolean this_present_unit = true && this.is_set_unit();
    boolean that_present_unit = true && that.is_set_unit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_data = true && this.is_set_data();
    boolean that_present_data = true && that.is_set_data();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_title = true && this.is_set_title();
    boolean that_present_title = true && that.is_set_title();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_summary = true && this.is_set_summary();
    boolean that_present_summary = true && that.is_set_summary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_unit = true && (is_set_unit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    boolean present_data = true && (is_set_data());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_title = true && (is_set_title());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_summary = true && (is_set_summary());
    list.add(present_summary);
    if (present_summary)
      list.add(summary);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecommendReason other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_unit()).compareTo(other.is_set_unit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_unit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_data()).compareTo(other.is_set_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_title()).compareTo(other.is_set_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_summary()).compareTo(other.is_set_summary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_summary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecommendReason(");
    boolean first = true;

    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_unit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unit' is unset! Struct:" + toString());
    }

    if (!is_set_data()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' is unset! Struct:" + toString());
    }

    if (!is_set_title()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' is unset! Struct:" + toString());
    }

    if (!is_set_summary()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'summary' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class RecommendReasonStandardSchemeFactory implements SchemeFactory {
    public RecommendReasonStandardScheme getScheme() {
      return new RecommendReasonStandardScheme();
    }
  }

  private static class RecommendReasonStandardScheme extends StandardScheme<RecommendReason> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecommendReason struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.set_unit_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list474 = iprot.readListBegin();
                if (struct.data == null) {
                  struct.data = new ArrayList<Double>(_list474.size);
                }
                double _elem475 = (double)0;
                for (int _i476 = 0; _i476 < _list474.size; ++_i476)
                {
                  _elem475 = iprot.readDouble();
                  struct.data.add(_elem475);
                }
                iprot.readListEnd();
              }
              struct.set_data_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.set_title_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.set_summary_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecommendReason struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.data.size()));
          for (double _iter477 : struct.data)
          {
            oprot.writeDouble(_iter477);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecommendReasonTupleSchemeFactory implements SchemeFactory {
    public RecommendReasonTupleScheme getScheme() {
      return new RecommendReasonTupleScheme();
    }
  }

  private static class RecommendReasonTupleScheme extends TupleScheme<RecommendReason> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecommendReason struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.unit);
      {
        oprot.writeI32(struct.data.size());
        for (double _iter478 : struct.data)
        {
          oprot.writeDouble(_iter478);
        }
      }
      oprot.writeString(struct.title);
      oprot.writeString(struct.summary);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecommendReason struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.unit = iprot.readString();
      struct.set_unit_isSet(true);
      {
        org.apache.thrift.protocol.TList _list479 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.data == null) {
          struct.data = new ArrayList<Double>(_list479.size);
        }
        double _elem480 = (double)0;
        for (int _i481 = 0; _i481 < _list479.size; ++_i481)
        {
          _elem480 = iprot.readDouble();
          struct.data.add(_elem480);
        }
      }
      struct.set_data_isSet(true);
      struct.title = iprot.readString();
      struct.set_title_isSet(true);
      struct.summary = iprot.readString();
      struct.set_summary_isSet(true);
    }
  }

}

