/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class RecommendService {

  /**
   * 推荐类服务
   * 
   */
  public interface Iface {

    public PlateRecommendationData getPlateRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException;

    public StockRecommendationData getStockRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPlateRecommendation(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStockRecommendation(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PlateRecommendationData getPlateRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      sendGetPlateRecommendation(pageNo, pageSize);
      return recvGetPlateRecommendation();
    }

    public void sendGetPlateRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      getPlateRecommendation_args args = new getPlateRecommendation_args();
      args.set_pageNo(pageNo);
      args.set_pageSize(pageSize);
      sendBase("getPlateRecommendation", args);
    }

    public PlateRecommendationData recvGetPlateRecommendation() throws org.apache.thrift.TException
    {
      getPlateRecommendation_result result = new getPlateRecommendation_result();
      receiveBase(result, "getPlateRecommendation");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlateRecommendation failed: unknown result");
    }

    public StockRecommendationData getStockRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      sendGetStockRecommendation(pageNo, pageSize);
      return recvGetStockRecommendation();
    }

    public void sendGetStockRecommendation(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      getStockRecommendation_args args = new getStockRecommendation_args();
      args.set_pageNo(pageNo);
      args.set_pageSize(pageSize);
      sendBase("getStockRecommendation", args);
    }

    public StockRecommendationData recvGetStockRecommendation() throws org.apache.thrift.TException
    {
      getStockRecommendation_result result = new getStockRecommendation_result();
      receiveBase(result, "getStockRecommendation");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStockRecommendation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPlateRecommendation(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlateRecommendation_call method_call = new getPlateRecommendation_call(pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlateRecommendation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNo;
      private int pageSize;
      public getPlateRecommendation_call(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlateRecommendation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlateRecommendation_args args = new getPlateRecommendation_args();
        args.set_pageNo(pageNo);
        args.set_pageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PlateRecommendationData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetPlateRecommendation();
      }
    }

    public void getStockRecommendation(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStockRecommendation_call method_call = new getStockRecommendation_call(pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStockRecommendation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNo;
      private int pageSize;
      public getStockRecommendation_call(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStockRecommendation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStockRecommendation_args args = new getStockRecommendation_args();
        args.set_pageNo(pageNo);
        args.set_pageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockRecommendationData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetStockRecommendation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPlateRecommendation", new getPlateRecommendation());
      processMap.put("getStockRecommendation", new getStockRecommendation());
      return processMap;
    }

    public static class getPlateRecommendation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlateRecommendation_args> {
      public getPlateRecommendation() {
        super("getPlateRecommendation");
      }

      public getPlateRecommendation_args getEmptyArgsInstance() {
        return new getPlateRecommendation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlateRecommendation_result getResult(I iface, getPlateRecommendation_args args) throws org.apache.thrift.TException {
        getPlateRecommendation_result result = new getPlateRecommendation_result();
        result.success = iface.getPlateRecommendation(args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class getStockRecommendation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStockRecommendation_args> {
      public getStockRecommendation() {
        super("getStockRecommendation");
      }

      public getStockRecommendation_args getEmptyArgsInstance() {
        return new getStockRecommendation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStockRecommendation_result getResult(I iface, getStockRecommendation_args args) throws org.apache.thrift.TException {
        getStockRecommendation_result result = new getStockRecommendation_result();
        result.success = iface.getStockRecommendation(args.pageNo, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPlateRecommendation", new getPlateRecommendation());
      processMap.put("getStockRecommendation", new getStockRecommendation());
      return processMap;
    }

    public static class getPlateRecommendation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlateRecommendation_args, PlateRecommendationData> {
      public getPlateRecommendation() {
        super("getPlateRecommendation");
      }

      public getPlateRecommendation_args getEmptyArgsInstance() {
        return new getPlateRecommendation_args();
      }

      public AsyncMethodCallback<PlateRecommendationData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PlateRecommendationData>() { 
          public void onComplete(PlateRecommendationData o) {
            getPlateRecommendation_result result = new getPlateRecommendation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlateRecommendation_result result = new getPlateRecommendation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlateRecommendation_args args, org.apache.thrift.async.AsyncMethodCallback<PlateRecommendationData> resultHandler) throws TException {
        iface.getPlateRecommendation(args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class getStockRecommendation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStockRecommendation_args, StockRecommendationData> {
      public getStockRecommendation() {
        super("getStockRecommendation");
      }

      public getStockRecommendation_args getEmptyArgsInstance() {
        return new getStockRecommendation_args();
      }

      public AsyncMethodCallback<StockRecommendationData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StockRecommendationData>() { 
          public void onComplete(StockRecommendationData o) {
            getStockRecommendation_result result = new getStockRecommendation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStockRecommendation_result result = new getStockRecommendation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStockRecommendation_args args, org.apache.thrift.async.AsyncMethodCallback<StockRecommendationData> resultHandler) throws TException {
        iface.getStockRecommendation(args.pageNo, args.pageSize,resultHandler);
      }
    }

  }

  public static class getPlateRecommendation_args implements org.apache.thrift.TBase<getPlateRecommendation_args, getPlateRecommendation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlateRecommendation_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlateRecommendation_args");

    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlateRecommendation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlateRecommendation_argsTupleSchemeFactory());
    }

    private int pageNo; // required
    private int pageSize; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(pageNo);
      out.writeInt(pageSize);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPlateRecommendation_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.pageNo = in.readInt();
      this.pageSize = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getPlateRecommendation_args> CREATOR = new android.os.Parcelable.Creator<getPlateRecommendation_args>() {
      @Override
      public getPlateRecommendation_args[] newArray(int size) {
        return new getPlateRecommendation_args[size];
      }

      @Override
      public getPlateRecommendation_args createFromParcel(android.os.Parcel in) {
        return new getPlateRecommendation_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NO((short)1, "pageNo"),
      PAGE_SIZE((short)2, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NO
            return PAGE_NO;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlateRecommendation_args.class, metaDataMap);
    }

    public getPlateRecommendation_args() {
    }

    public getPlateRecommendation_args(
      int pageNo,
      int pageSize)
    {
      this();
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlateRecommendation_args(getPlateRecommendation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public getPlateRecommendation_args deepCopy() {
      return new getPlateRecommendation_args(this);
    }

    public void clear() {
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_pageSize_isSet(false);
      this.pageSize = 0;
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_pageSize() {
      return this.pageSize;
    }

    public void set_pageSize(int pageSize) {
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    public void unset_pageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void set_pageSize_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unset_pageSize();
        } else {
          set_pageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NO:
        return get_pageNo();

      case PAGE_SIZE:
        return get_pageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NO:
        return is_set_pageNo();
      case PAGE_SIZE:
        return is_set_pageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlateRecommendation_args)
        return this.equals((getPlateRecommendation_args)that);
      return false;
    }

    public boolean equals(getPlateRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlateRecommendation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageSize()).compareTo(other.is_set_pageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlateRecommendation_args(");
      boolean first = true;

      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPlateRecommendation_argsStandardSchemeFactory implements SchemeFactory {
      public getPlateRecommendation_argsStandardScheme getScheme() {
        return new getPlateRecommendation_argsStandardScheme();
      }
    }

    private static class getPlateRecommendation_argsStandardScheme extends StandardScheme<getPlateRecommendation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlateRecommendation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.set_pageSize_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlateRecommendation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlateRecommendation_argsTupleSchemeFactory implements SchemeFactory {
      public getPlateRecommendation_argsTupleScheme getScheme() {
        return new getPlateRecommendation_argsTupleScheme();
      }
    }

    private static class getPlateRecommendation_argsTupleScheme extends TupleScheme<getPlateRecommendation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlateRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_pageNo()) {
          optionals.set(0);
        }
        if (struct.is_set_pageSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_pageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlateRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.set_pageSize_isSet(true);
        }
      }
    }

  }

  public static class getPlateRecommendation_result implements org.apache.thrift.TBase<getPlateRecommendation_result, getPlateRecommendation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlateRecommendation_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlateRecommendation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlateRecommendation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlateRecommendation_resultTupleSchemeFactory());
    }

    private PlateRecommendationData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPlateRecommendation_result(android.os.Parcel in) {
      this.success= in.readParcelable(getPlateRecommendation_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPlateRecommendation_result> CREATOR = new android.os.Parcelable.Creator<getPlateRecommendation_result>() {
      @Override
      public getPlateRecommendation_result[] newArray(int size) {
        return new getPlateRecommendation_result[size];
      }

      @Override
      public getPlateRecommendation_result createFromParcel(android.os.Parcel in) {
        return new getPlateRecommendation_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlateRecommendationData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlateRecommendation_result.class, metaDataMap);
    }

    public getPlateRecommendation_result() {
    }

    public getPlateRecommendation_result(
      PlateRecommendationData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlateRecommendation_result(getPlateRecommendation_result other) {
      if (other.is_set_success()) {
        this.success = new PlateRecommendationData(other.success);
      }
    }

    public getPlateRecommendation_result deepCopy() {
      return new getPlateRecommendation_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public PlateRecommendationData get_success() {
      return this.success;
    }

    public void set_success(PlateRecommendationData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((PlateRecommendationData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlateRecommendation_result)
        return this.equals((getPlateRecommendation_result)that);
      return false;
    }

    public boolean equals(getPlateRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlateRecommendation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlateRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPlateRecommendation_resultStandardSchemeFactory implements SchemeFactory {
      public getPlateRecommendation_resultStandardScheme getScheme() {
        return new getPlateRecommendation_resultStandardScheme();
      }
    }

    private static class getPlateRecommendation_resultStandardScheme extends StandardScheme<getPlateRecommendation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlateRecommendation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new PlateRecommendationData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlateRecommendation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlateRecommendation_resultTupleSchemeFactory implements SchemeFactory {
      public getPlateRecommendation_resultTupleScheme getScheme() {
        return new getPlateRecommendation_resultTupleScheme();
      }
    }

    private static class getPlateRecommendation_resultTupleScheme extends TupleScheme<getPlateRecommendation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlateRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlateRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new PlateRecommendationData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getStockRecommendation_args implements org.apache.thrift.TBase<getStockRecommendation_args, getStockRecommendation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStockRecommendation_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockRecommendation_args");

    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockRecommendation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockRecommendation_argsTupleSchemeFactory());
    }

    private int pageNo; // required
    private int pageSize; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(pageNo);
      out.writeInt(pageSize);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStockRecommendation_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.pageNo = in.readInt();
      this.pageSize = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getStockRecommendation_args> CREATOR = new android.os.Parcelable.Creator<getStockRecommendation_args>() {
      @Override
      public getStockRecommendation_args[] newArray(int size) {
        return new getStockRecommendation_args[size];
      }

      @Override
      public getStockRecommendation_args createFromParcel(android.os.Parcel in) {
        return new getStockRecommendation_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NO((short)1, "pageNo"),
      PAGE_SIZE((short)2, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NO
            return PAGE_NO;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockRecommendation_args.class, metaDataMap);
    }

    public getStockRecommendation_args() {
    }

    public getStockRecommendation_args(
      int pageNo,
      int pageSize)
    {
      this();
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockRecommendation_args(getStockRecommendation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public getStockRecommendation_args deepCopy() {
      return new getStockRecommendation_args(this);
    }

    public void clear() {
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_pageSize_isSet(false);
      this.pageSize = 0;
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_pageSize() {
      return this.pageSize;
    }

    public void set_pageSize(int pageSize) {
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    public void unset_pageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void set_pageSize_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unset_pageSize();
        } else {
          set_pageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NO:
        return get_pageNo();

      case PAGE_SIZE:
        return get_pageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NO:
        return is_set_pageNo();
      case PAGE_SIZE:
        return is_set_pageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockRecommendation_args)
        return this.equals((getStockRecommendation_args)that);
      return false;
    }

    public boolean equals(getStockRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStockRecommendation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageSize()).compareTo(other.is_set_pageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockRecommendation_args(");
      boolean first = true;

      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStockRecommendation_argsStandardSchemeFactory implements SchemeFactory {
      public getStockRecommendation_argsStandardScheme getScheme() {
        return new getStockRecommendation_argsStandardScheme();
      }
    }

    private static class getStockRecommendation_argsStandardScheme extends StandardScheme<getStockRecommendation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockRecommendation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.set_pageSize_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockRecommendation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockRecommendation_argsTupleSchemeFactory implements SchemeFactory {
      public getStockRecommendation_argsTupleScheme getScheme() {
        return new getStockRecommendation_argsTupleScheme();
      }
    }

    private static class getStockRecommendation_argsTupleScheme extends TupleScheme<getStockRecommendation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_pageNo()) {
          optionals.set(0);
        }
        if (struct.is_set_pageSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_pageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.set_pageSize_isSet(true);
        }
      }
    }

  }

  public static class getStockRecommendation_result implements org.apache.thrift.TBase<getStockRecommendation_result, getStockRecommendation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStockRecommendation_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockRecommendation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockRecommendation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockRecommendation_resultTupleSchemeFactory());
    }

    private StockRecommendationData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStockRecommendation_result(android.os.Parcel in) {
      this.success= in.readParcelable(getStockRecommendation_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getStockRecommendation_result> CREATOR = new android.os.Parcelable.Creator<getStockRecommendation_result>() {
      @Override
      public getStockRecommendation_result[] newArray(int size) {
        return new getStockRecommendation_result[size];
      }

      @Override
      public getStockRecommendation_result createFromParcel(android.os.Parcel in) {
        return new getStockRecommendation_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockRecommendationData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockRecommendation_result.class, metaDataMap);
    }

    public getStockRecommendation_result() {
    }

    public getStockRecommendation_result(
      StockRecommendationData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockRecommendation_result(getStockRecommendation_result other) {
      if (other.is_set_success()) {
        this.success = new StockRecommendationData(other.success);
      }
    }

    public getStockRecommendation_result deepCopy() {
      return new getStockRecommendation_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public StockRecommendationData get_success() {
      return this.success;
    }

    public void set_success(StockRecommendationData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((StockRecommendationData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockRecommendation_result)
        return this.equals((getStockRecommendation_result)that);
      return false;
    }

    public boolean equals(getStockRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStockRecommendation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStockRecommendation_resultStandardSchemeFactory implements SchemeFactory {
      public getStockRecommendation_resultStandardScheme getScheme() {
        return new getStockRecommendation_resultStandardScheme();
      }
    }

    private static class getStockRecommendation_resultStandardScheme extends StandardScheme<getStockRecommendation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockRecommendation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new StockRecommendationData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockRecommendation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockRecommendation_resultTupleSchemeFactory implements SchemeFactory {
      public getStockRecommendation_resultTupleScheme getScheme() {
        return new getStockRecommendation_resultTupleScheme();
      }
    }

    private static class getStockRecommendation_resultTupleScheme extends TupleScheme<getStockRecommendation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new StockRecommendationData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

}
