/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股东信息
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class ShareholderInfo implements org.apache.thrift.TBase<ShareholderInfo, ShareholderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ShareholderInfo>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShareholderInfo");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CAPITAL_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("capitalStructure", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CIRCULATION_SHAREHOLDER_OF10_FIELD_DESC = new org.apache.thrift.protocol.TField("circulationShareholderOf10", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CIRCULATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("circulationDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_SHAREHOLDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationShareholders", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShareholderInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShareholderInfoTupleSchemeFactory());
  }

  private StatusCode status; // required
  private List<NameValuePairs> capitalStructure; // required
  private List<Shareholder> circulationShareholderOf10; // required
  private String circulationDate; // required
  private List<Shareholder> organizationShareholders; // required
  private String organizationDate; // required
  private String msg; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeInt(status.getValue());
    out.writeTypedList(capitalStructure);
    out.writeTypedList(circulationShareholderOf10);
    out.writeString(circulationDate);
    out.writeTypedList(organizationShareholders);
    out.writeString(organizationDate);
    out.writeString(msg);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public ShareholderInfo(android.os.Parcel in) {
    this.status = StatusCode.findByValue(in.readInt());
    this.capitalStructure = new ArrayList<NameValuePairs>();
    in.readTypedList(this.capitalStructure, NameValuePairs.CREATOR);
    this.circulationShareholderOf10 = new ArrayList<Shareholder>();
    in.readTypedList(this.circulationShareholderOf10, Shareholder.CREATOR);
    this.circulationDate= in.readString();
    this.organizationShareholders = new ArrayList<Shareholder>();
    in.readTypedList(this.organizationShareholders, Shareholder.CREATOR);
    this.organizationDate= in.readString();
    this.msg= in.readString();
  }

  public static final android.os.Parcelable.Creator<ShareholderInfo> CREATOR = new android.os.Parcelable.Creator<ShareholderInfo>() {
    @Override
    public ShareholderInfo[] newArray(int size) {
      return new ShareholderInfo[size];
    }

    @Override
    public ShareholderInfo createFromParcel(android.os.Parcel in) {
      return new ShareholderInfo(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatusCode
     */
    STATUS((short)1, "status"),
    CAPITAL_STRUCTURE((short)2, "capitalStructure"),
    CIRCULATION_SHAREHOLDER_OF10((short)3, "circulationShareholderOf10"),
    CIRCULATION_DATE((short)4, "circulationDate"),
    ORGANIZATION_SHAREHOLDERS((short)5, "organizationShareholders"),
    ORGANIZATION_DATE((short)6, "organizationDate"),
    MSG((short)7, "msg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // CAPITAL_STRUCTURE
          return CAPITAL_STRUCTURE;
        case 3: // CIRCULATION_SHAREHOLDER_OF10
          return CIRCULATION_SHAREHOLDER_OF10;
        case 4: // CIRCULATION_DATE
          return CIRCULATION_DATE;
        case 5: // ORGANIZATION_SHAREHOLDERS
          return ORGANIZATION_SHAREHOLDERS;
        case 6: // ORGANIZATION_DATE
          return ORGANIZATION_DATE;
        case 7: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusCode.class)));
    tmpMap.put(_Fields.CAPITAL_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("capitalStructure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NameValuePairs.class))));
    tmpMap.put(_Fields.CIRCULATION_SHAREHOLDER_OF10, new org.apache.thrift.meta_data.FieldMetaData("circulationShareholderOf10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shareholder.class))));
    tmpMap.put(_Fields.CIRCULATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("circulationDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION_SHAREHOLDERS, new org.apache.thrift.meta_data.FieldMetaData("organizationShareholders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shareholder.class))));
    tmpMap.put(_Fields.ORGANIZATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("organizationDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShareholderInfo.class, metaDataMap);
  }

  public ShareholderInfo() {
  }

  public ShareholderInfo(
    StatusCode status,
    List<NameValuePairs> capitalStructure,
    List<Shareholder> circulationShareholderOf10,
    String circulationDate,
    List<Shareholder> organizationShareholders,
    String organizationDate,
    String msg)
  {
    this();
    this.status = status;
    this.capitalStructure = capitalStructure;
    this.circulationShareholderOf10 = circulationShareholderOf10;
    this.circulationDate = circulationDate;
    this.organizationShareholders = organizationShareholders;
    this.organizationDate = organizationDate;
    this.msg = msg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShareholderInfo(ShareholderInfo other) {
    if (other.is_set_status()) {
      this.status = other.status;
    }
    if (other.is_set_capitalStructure()) {
      List<NameValuePairs> __this__capitalStructure = new ArrayList<NameValuePairs>(other.capitalStructure.size());
      for (NameValuePairs other_element : other.capitalStructure) {
        __this__capitalStructure.add(new NameValuePairs(other_element));
      }
      this.capitalStructure = __this__capitalStructure;
    }
    if (other.is_set_circulationShareholderOf10()) {
      List<Shareholder> __this__circulationShareholderOf10 = new ArrayList<Shareholder>(other.circulationShareholderOf10.size());
      for (Shareholder other_element : other.circulationShareholderOf10) {
        __this__circulationShareholderOf10.add(new Shareholder(other_element));
      }
      this.circulationShareholderOf10 = __this__circulationShareholderOf10;
    }
    if (other.is_set_circulationDate()) {
      this.circulationDate = other.circulationDate;
    }
    if (other.is_set_organizationShareholders()) {
      List<Shareholder> __this__organizationShareholders = new ArrayList<Shareholder>(other.organizationShareholders.size());
      for (Shareholder other_element : other.organizationShareholders) {
        __this__organizationShareholders.add(new Shareholder(other_element));
      }
      this.organizationShareholders = __this__organizationShareholders;
    }
    if (other.is_set_organizationDate()) {
      this.organizationDate = other.organizationDate;
    }
    if (other.is_set_msg()) {
      this.msg = other.msg;
    }
  }

  public ShareholderInfo deepCopy() {
    return new ShareholderInfo(this);
  }

  public void clear() {
    this.status = null;
    if (this.capitalStructure != null) {
      this.capitalStructure.clear();
    }
    if (this.circulationShareholderOf10 != null) {
      this.circulationShareholderOf10.clear();
    }
    this.circulationDate = null;
    if (this.organizationShareholders != null) {
      this.organizationShareholders.clear();
    }
    this.organizationDate = null;
    this.msg = null;
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode get_status() {
    return this.status;
  }

  /**
   * 
   * @see StatusCode
   */
  public void set_status(StatusCode status) {
    this.status = status;
  }

  public void unset_status() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean is_set_status() {
    return this.status != null;
  }

  public void set_status_isSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int get_capitalStructure_size() {
    return (this.capitalStructure == null) ? 0 : this.capitalStructure.size();
  }

  public java.util.Iterator<NameValuePairs> get_capitalStructure_iterator() {
    return (this.capitalStructure == null) ? null : this.capitalStructure.iterator();
  }

  public void add_to_capitalStructure(NameValuePairs elem) {
    if (this.capitalStructure == null) {
      this.capitalStructure = new ArrayList<NameValuePairs>();
    }
    this.capitalStructure.add(elem);
  }

  public List<NameValuePairs> get_capitalStructure() {
    return this.capitalStructure;
  }

  public void set_capitalStructure(List<NameValuePairs> capitalStructure) {
    this.capitalStructure = capitalStructure;
  }

  public void unset_capitalStructure() {
    this.capitalStructure = null;
  }

  /** Returns true if field capitalStructure is set (has been assigned a value) and false otherwise */
  public boolean is_set_capitalStructure() {
    return this.capitalStructure != null;
  }

  public void set_capitalStructure_isSet(boolean value) {
    if (!value) {
      this.capitalStructure = null;
    }
  }

  public int get_circulationShareholderOf10_size() {
    return (this.circulationShareholderOf10 == null) ? 0 : this.circulationShareholderOf10.size();
  }

  public java.util.Iterator<Shareholder> get_circulationShareholderOf10_iterator() {
    return (this.circulationShareholderOf10 == null) ? null : this.circulationShareholderOf10.iterator();
  }

  public void add_to_circulationShareholderOf10(Shareholder elem) {
    if (this.circulationShareholderOf10 == null) {
      this.circulationShareholderOf10 = new ArrayList<Shareholder>();
    }
    this.circulationShareholderOf10.add(elem);
  }

  public List<Shareholder> get_circulationShareholderOf10() {
    return this.circulationShareholderOf10;
  }

  public void set_circulationShareholderOf10(List<Shareholder> circulationShareholderOf10) {
    this.circulationShareholderOf10 = circulationShareholderOf10;
  }

  public void unset_circulationShareholderOf10() {
    this.circulationShareholderOf10 = null;
  }

  /** Returns true if field circulationShareholderOf10 is set (has been assigned a value) and false otherwise */
  public boolean is_set_circulationShareholderOf10() {
    return this.circulationShareholderOf10 != null;
  }

  public void set_circulationShareholderOf10_isSet(boolean value) {
    if (!value) {
      this.circulationShareholderOf10 = null;
    }
  }

  public String get_circulationDate() {
    return this.circulationDate;
  }

  public void set_circulationDate(String circulationDate) {
    this.circulationDate = circulationDate;
  }

  public void unset_circulationDate() {
    this.circulationDate = null;
  }

  /** Returns true if field circulationDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_circulationDate() {
    return this.circulationDate != null;
  }

  public void set_circulationDate_isSet(boolean value) {
    if (!value) {
      this.circulationDate = null;
    }
  }

  public int get_organizationShareholders_size() {
    return (this.organizationShareholders == null) ? 0 : this.organizationShareholders.size();
  }

  public java.util.Iterator<Shareholder> get_organizationShareholders_iterator() {
    return (this.organizationShareholders == null) ? null : this.organizationShareholders.iterator();
  }

  public void add_to_organizationShareholders(Shareholder elem) {
    if (this.organizationShareholders == null) {
      this.organizationShareholders = new ArrayList<Shareholder>();
    }
    this.organizationShareholders.add(elem);
  }

  public List<Shareholder> get_organizationShareholders() {
    return this.organizationShareholders;
  }

  public void set_organizationShareholders(List<Shareholder> organizationShareholders) {
    this.organizationShareholders = organizationShareholders;
  }

  public void unset_organizationShareholders() {
    this.organizationShareholders = null;
  }

  /** Returns true if field organizationShareholders is set (has been assigned a value) and false otherwise */
  public boolean is_set_organizationShareholders() {
    return this.organizationShareholders != null;
  }

  public void set_organizationShareholders_isSet(boolean value) {
    if (!value) {
      this.organizationShareholders = null;
    }
  }

  public String get_organizationDate() {
    return this.organizationDate;
  }

  public void set_organizationDate(String organizationDate) {
    this.organizationDate = organizationDate;
  }

  public void unset_organizationDate() {
    this.organizationDate = null;
  }

  /** Returns true if field organizationDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_organizationDate() {
    return this.organizationDate != null;
  }

  public void set_organizationDate_isSet(boolean value) {
    if (!value) {
      this.organizationDate = null;
    }
  }

  public String get_msg() {
    return this.msg;
  }

  public void set_msg(String msg) {
    this.msg = msg;
  }

  public void unset_msg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean is_set_msg() {
    return this.msg != null;
  }

  public void set_msg_isSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unset_status();
      } else {
        set_status((StatusCode)value);
      }
      break;

    case CAPITAL_STRUCTURE:
      if (value == null) {
        unset_capitalStructure();
      } else {
        set_capitalStructure((List<NameValuePairs>)value);
      }
      break;

    case CIRCULATION_SHAREHOLDER_OF10:
      if (value == null) {
        unset_circulationShareholderOf10();
      } else {
        set_circulationShareholderOf10((List<Shareholder>)value);
      }
      break;

    case CIRCULATION_DATE:
      if (value == null) {
        unset_circulationDate();
      } else {
        set_circulationDate((String)value);
      }
      break;

    case ORGANIZATION_SHAREHOLDERS:
      if (value == null) {
        unset_organizationShareholders();
      } else {
        set_organizationShareholders((List<Shareholder>)value);
      }
      break;

    case ORGANIZATION_DATE:
      if (value == null) {
        unset_organizationDate();
      } else {
        set_organizationDate((String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unset_msg();
      } else {
        set_msg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return get_status();

    case CAPITAL_STRUCTURE:
      return get_capitalStructure();

    case CIRCULATION_SHAREHOLDER_OF10:
      return get_circulationShareholderOf10();

    case CIRCULATION_DATE:
      return get_circulationDate();

    case ORGANIZATION_SHAREHOLDERS:
      return get_organizationShareholders();

    case ORGANIZATION_DATE:
      return get_organizationDate();

    case MSG:
      return get_msg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return is_set_status();
    case CAPITAL_STRUCTURE:
      return is_set_capitalStructure();
    case CIRCULATION_SHAREHOLDER_OF10:
      return is_set_circulationShareholderOf10();
    case CIRCULATION_DATE:
      return is_set_circulationDate();
    case ORGANIZATION_SHAREHOLDERS:
      return is_set_organizationShareholders();
    case ORGANIZATION_DATE:
      return is_set_organizationDate();
    case MSG:
      return is_set_msg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShareholderInfo)
      return this.equals((ShareholderInfo)that);
    return false;
  }

  public boolean equals(ShareholderInfo that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.is_set_status();
    boolean that_present_status = true && that.is_set_status();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_capitalStructure = true && this.is_set_capitalStructure();
    boolean that_present_capitalStructure = true && that.is_set_capitalStructure();
    if (this_present_capitalStructure || that_present_capitalStructure) {
      if (!(this_present_capitalStructure && that_present_capitalStructure))
        return false;
      if (!this.capitalStructure.equals(that.capitalStructure))
        return false;
    }

    boolean this_present_circulationShareholderOf10 = true && this.is_set_circulationShareholderOf10();
    boolean that_present_circulationShareholderOf10 = true && that.is_set_circulationShareholderOf10();
    if (this_present_circulationShareholderOf10 || that_present_circulationShareholderOf10) {
      if (!(this_present_circulationShareholderOf10 && that_present_circulationShareholderOf10))
        return false;
      if (!this.circulationShareholderOf10.equals(that.circulationShareholderOf10))
        return false;
    }

    boolean this_present_circulationDate = true && this.is_set_circulationDate();
    boolean that_present_circulationDate = true && that.is_set_circulationDate();
    if (this_present_circulationDate || that_present_circulationDate) {
      if (!(this_present_circulationDate && that_present_circulationDate))
        return false;
      if (!this.circulationDate.equals(that.circulationDate))
        return false;
    }

    boolean this_present_organizationShareholders = true && this.is_set_organizationShareholders();
    boolean that_present_organizationShareholders = true && that.is_set_organizationShareholders();
    if (this_present_organizationShareholders || that_present_organizationShareholders) {
      if (!(this_present_organizationShareholders && that_present_organizationShareholders))
        return false;
      if (!this.organizationShareholders.equals(that.organizationShareholders))
        return false;
    }

    boolean this_present_organizationDate = true && this.is_set_organizationDate();
    boolean that_present_organizationDate = true && that.is_set_organizationDate();
    if (this_present_organizationDate || that_present_organizationDate) {
      if (!(this_present_organizationDate && that_present_organizationDate))
        return false;
      if (!this.organizationDate.equals(that.organizationDate))
        return false;
    }

    boolean this_present_msg = true && this.is_set_msg();
    boolean that_present_msg = true && that.is_set_msg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (is_set_status());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_capitalStructure = true && (is_set_capitalStructure());
    list.add(present_capitalStructure);
    if (present_capitalStructure)
      list.add(capitalStructure);

    boolean present_circulationShareholderOf10 = true && (is_set_circulationShareholderOf10());
    list.add(present_circulationShareholderOf10);
    if (present_circulationShareholderOf10)
      list.add(circulationShareholderOf10);

    boolean present_circulationDate = true && (is_set_circulationDate());
    list.add(present_circulationDate);
    if (present_circulationDate)
      list.add(circulationDate);

    boolean present_organizationShareholders = true && (is_set_organizationShareholders());
    list.add(present_organizationShareholders);
    if (present_organizationShareholders)
      list.add(organizationShareholders);

    boolean present_organizationDate = true && (is_set_organizationDate());
    list.add(present_organizationDate);
    if (present_organizationDate)
      list.add(organizationDate);

    boolean present_msg = true && (is_set_msg());
    list.add(present_msg);
    if (present_msg)
      list.add(msg);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShareholderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_status()).compareTo(other.is_set_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_capitalStructure()).compareTo(other.is_set_capitalStructure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_capitalStructure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capitalStructure, other.capitalStructure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_circulationShareholderOf10()).compareTo(other.is_set_circulationShareholderOf10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_circulationShareholderOf10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circulationShareholderOf10, other.circulationShareholderOf10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_circulationDate()).compareTo(other.is_set_circulationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_circulationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circulationDate, other.circulationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_organizationShareholders()).compareTo(other.is_set_organizationShareholders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_organizationShareholders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationShareholders, other.organizationShareholders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_organizationDate()).compareTo(other.is_set_organizationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_organizationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationDate, other.organizationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_msg()).compareTo(other.is_set_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShareholderInfo(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capitalStructure:");
    if (this.capitalStructure == null) {
      sb.append("null");
    } else {
      sb.append(this.capitalStructure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circulationShareholderOf10:");
    if (this.circulationShareholderOf10 == null) {
      sb.append("null");
    } else {
      sb.append(this.circulationShareholderOf10);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circulationDate:");
    if (this.circulationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.circulationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationShareholders:");
    if (this.organizationShareholders == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationShareholders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationDate:");
    if (this.organizationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_status()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    if (!is_set_capitalStructure()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'capitalStructure' is unset! Struct:" + toString());
    }

    if (!is_set_circulationShareholderOf10()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'circulationShareholderOf10' is unset! Struct:" + toString());
    }

    if (!is_set_circulationDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'circulationDate' is unset! Struct:" + toString());
    }

    if (!is_set_organizationShareholders()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizationShareholders' is unset! Struct:" + toString());
    }

    if (!is_set_organizationDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizationDate' is unset! Struct:" + toString());
    }

    if (!is_set_msg()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class ShareholderInfoStandardSchemeFactory implements SchemeFactory {
    public ShareholderInfoStandardScheme getScheme() {
      return new ShareholderInfoStandardScheme();
    }
  }

  private static class ShareholderInfoStandardScheme extends StandardScheme<ShareholderInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShareholderInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.rjzd.aistock.api.StatusCode.findByValue(iprot.readI32());
              struct.set_status_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAPITAL_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                if (struct.capitalStructure == null) {
                  struct.capitalStructure = new ArrayList<NameValuePairs>(_list88.size);
                }
                NameValuePairs _elem89 = new NameValuePairs();
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  if (_elem89 == null) {
                    _elem89 = new NameValuePairs();
                  }
                  _elem89.read(iprot);
                  struct.capitalStructure.add(_elem89);
                  _elem89 = null;
                }
                iprot.readListEnd();
              }
              struct.set_capitalStructure_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CIRCULATION_SHAREHOLDER_OF10
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                if (struct.circulationShareholderOf10 == null) {
                  struct.circulationShareholderOf10 = new ArrayList<Shareholder>(_list91.size);
                }
                Shareholder _elem92 = new Shareholder();
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  if (_elem92 == null) {
                    _elem92 = new Shareholder();
                  }
                  _elem92.read(iprot);
                  struct.circulationShareholderOf10.add(_elem92);
                  _elem92 = null;
                }
                iprot.readListEnd();
              }
              struct.set_circulationShareholderOf10_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CIRCULATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.circulationDate = iprot.readString();
              struct.set_circulationDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORGANIZATION_SHAREHOLDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                if (struct.organizationShareholders == null) {
                  struct.organizationShareholders = new ArrayList<Shareholder>(_list94.size);
                }
                Shareholder _elem95 = new Shareholder();
                for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                {
                  if (_elem95 == null) {
                    _elem95 = new Shareholder();
                  }
                  _elem95.read(iprot);
                  struct.organizationShareholders.add(_elem95);
                  _elem95 = null;
                }
                iprot.readListEnd();
              }
              struct.set_organizationShareholders_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORGANIZATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationDate = iprot.readString();
              struct.set_organizationDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.set_msg_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShareholderInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.capitalStructure != null) {
        oprot.writeFieldBegin(CAPITAL_STRUCTURE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.capitalStructure.size()));
          for (NameValuePairs _iter97 : struct.capitalStructure)
          {
            _iter97.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.circulationShareholderOf10 != null) {
        oprot.writeFieldBegin(CIRCULATION_SHAREHOLDER_OF10_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.circulationShareholderOf10.size()));
          for (Shareholder _iter98 : struct.circulationShareholderOf10)
          {
            _iter98.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.circulationDate != null) {
        oprot.writeFieldBegin(CIRCULATION_DATE_FIELD_DESC);
        oprot.writeString(struct.circulationDate);
        oprot.writeFieldEnd();
      }
      if (struct.organizationShareholders != null) {
        oprot.writeFieldBegin(ORGANIZATION_SHAREHOLDERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.organizationShareholders.size()));
          for (Shareholder _iter99 : struct.organizationShareholders)
          {
            _iter99.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.organizationDate != null) {
        oprot.writeFieldBegin(ORGANIZATION_DATE_FIELD_DESC);
        oprot.writeString(struct.organizationDate);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShareholderInfoTupleSchemeFactory implements SchemeFactory {
    public ShareholderInfoTupleScheme getScheme() {
      return new ShareholderInfoTupleScheme();
    }
  }

  private static class ShareholderInfoTupleScheme extends TupleScheme<ShareholderInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShareholderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      {
        oprot.writeI32(struct.capitalStructure.size());
        for (NameValuePairs _iter100 : struct.capitalStructure)
        {
          _iter100.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.circulationShareholderOf10.size());
        for (Shareholder _iter101 : struct.circulationShareholderOf10)
        {
          _iter101.write(oprot);
        }
      }
      oprot.writeString(struct.circulationDate);
      {
        oprot.writeI32(struct.organizationShareholders.size());
        for (Shareholder _iter102 : struct.organizationShareholders)
        {
          _iter102.write(oprot);
        }
      }
      oprot.writeString(struct.organizationDate);
      oprot.writeString(struct.msg);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShareholderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = com.rjzd.aistock.api.StatusCode.findByValue(iprot.readI32());
      struct.set_status_isSet(true);
      {
        org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.capitalStructure == null) {
          struct.capitalStructure = new ArrayList<NameValuePairs>(_list103.size);
        }
        NameValuePairs _elem104 = new NameValuePairs();
        for (int _i105 = 0; _i105 < _list103.size; ++_i105)
        {
          if (_elem104 == null) {
            _elem104 = new NameValuePairs();
          }
          _elem104.read(iprot);
          struct.capitalStructure.add(_elem104);
          _elem104 = null;
        }
      }
      struct.set_capitalStructure_isSet(true);
      {
        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.circulationShareholderOf10 == null) {
          struct.circulationShareholderOf10 = new ArrayList<Shareholder>(_list106.size);
        }
        Shareholder _elem107 = new Shareholder();
        for (int _i108 = 0; _i108 < _list106.size; ++_i108)
        {
          if (_elem107 == null) {
            _elem107 = new Shareholder();
          }
          _elem107.read(iprot);
          struct.circulationShareholderOf10.add(_elem107);
          _elem107 = null;
        }
      }
      struct.set_circulationShareholderOf10_isSet(true);
      struct.circulationDate = iprot.readString();
      struct.set_circulationDate_isSet(true);
      {
        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.organizationShareholders == null) {
          struct.organizationShareholders = new ArrayList<Shareholder>(_list109.size);
        }
        Shareholder _elem110 = new Shareholder();
        for (int _i111 = 0; _i111 < _list109.size; ++_i111)
        {
          if (_elem110 == null) {
            _elem110 = new Shareholder();
          }
          _elem110.read(iprot);
          struct.organizationShareholders.add(_elem110);
          _elem110 = null;
        }
      }
      struct.set_organizationShareholders_isSet(true);
      struct.organizationDate = iprot.readString();
      struct.set_organizationDate_isSet(true);
      struct.msg = iprot.readString();
      struct.set_msg_isSet(true);
    }
  }

}

