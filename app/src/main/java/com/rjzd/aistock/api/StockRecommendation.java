/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股票推荐
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-22")
public class StockRecommendation implements org.apache.thrift.TBase<StockRecommendation, StockRecommendation._Fields>, java.io.Serializable, Cloneable, Comparable<StockRecommendation>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockRecommendation");

  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stockName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECOMMEND_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendIndex", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RANGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField REASON_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("reasonList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField RANGE_OF_RECOMMEND_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeOfRecommendDay", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StockRecommendationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StockRecommendationTupleSchemeFactory());
  }

  private String stockCode; // required
  private String stockName; // required
  private int recommendIndex; // required
  private List<Double> rangeList; // required
  private List<RecommendReason> reasonList; // required
  private double rangeOfRecommendDay; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(stockCode);
    out.writeString(stockName);
    out.writeInt(recommendIndex);
    out.writeList(rangeList);
    out.writeTypedList(reasonList);
    out.writeDouble(rangeOfRecommendDay);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public StockRecommendation(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.stockCode= in.readString();
    this.stockName= in.readString();
    this.recommendIndex = in.readInt();
    this.rangeList = new ArrayList<Double>();
    in.readList(this.rangeList, StockRecommendation.class.getClassLoader());
    this.reasonList = new ArrayList<RecommendReason>();
    in.readTypedList(this.reasonList, RecommendReason.CREATOR);
    this.rangeOfRecommendDay = in.readDouble();
  }

  public static final android.os.Parcelable.Creator<StockRecommendation> CREATOR = new android.os.Parcelable.Creator<StockRecommendation>() {
    @Override
    public StockRecommendation[] newArray(int size) {
      return new StockRecommendation[size];
    }

    @Override
    public StockRecommendation createFromParcel(android.os.Parcel in) {
      return new StockRecommendation(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOCK_CODE((short)1, "stockCode"),
    STOCK_NAME((short)2, "stockName"),
    RECOMMEND_INDEX((short)3, "recommendIndex"),
    RANGE_LIST((short)4, "rangeList"),
    REASON_LIST((short)5, "reasonList"),
    RANGE_OF_RECOMMEND_DAY((short)6, "rangeOfRecommendDay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOCK_CODE
          return STOCK_CODE;
        case 2: // STOCK_NAME
          return STOCK_NAME;
        case 3: // RECOMMEND_INDEX
          return RECOMMEND_INDEX;
        case 4: // RANGE_LIST
          return RANGE_LIST;
        case 5: // REASON_LIST
          return REASON_LIST;
        case 6: // RANGE_OF_RECOMMEND_DAY
          return RANGE_OF_RECOMMEND_DAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECOMMENDINDEX_ISSET_ID = 0;
  private static final int __RANGEOFRECOMMENDDAY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stockName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMEND_INDEX, new org.apache.thrift.meta_data.FieldMetaData("recommendIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("rangeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.REASON_LIST, new org.apache.thrift.meta_data.FieldMetaData("reasonList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendReason.class))));
    tmpMap.put(_Fields.RANGE_OF_RECOMMEND_DAY, new org.apache.thrift.meta_data.FieldMetaData("rangeOfRecommendDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockRecommendation.class, metaDataMap);
  }

  public StockRecommendation() {
  }

  public StockRecommendation(
    String stockCode,
    String stockName,
    int recommendIndex,
    List<Double> rangeList,
    List<RecommendReason> reasonList,
    double rangeOfRecommendDay)
  {
    this();
    this.stockCode = stockCode;
    this.stockName = stockName;
    this.recommendIndex = recommendIndex;
    set_recommendIndex_isSet(true);
    this.rangeList = rangeList;
    this.reasonList = reasonList;
    this.rangeOfRecommendDay = rangeOfRecommendDay;
    set_rangeOfRecommendDay_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockRecommendation(StockRecommendation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_stockCode()) {
      this.stockCode = other.stockCode;
    }
    if (other.is_set_stockName()) {
      this.stockName = other.stockName;
    }
    this.recommendIndex = other.recommendIndex;
    if (other.is_set_rangeList()) {
      List<Double> __this__rangeList = new ArrayList<Double>(other.rangeList);
      this.rangeList = __this__rangeList;
    }
    if (other.is_set_reasonList()) {
      List<RecommendReason> __this__reasonList = new ArrayList<RecommendReason>(other.reasonList.size());
      for (RecommendReason other_element : other.reasonList) {
        __this__reasonList.add(new RecommendReason(other_element));
      }
      this.reasonList = __this__reasonList;
    }
    this.rangeOfRecommendDay = other.rangeOfRecommendDay;
  }

  public StockRecommendation deepCopy() {
    return new StockRecommendation(this);
  }

  public void clear() {
    this.stockCode = null;
    this.stockName = null;
    set_recommendIndex_isSet(false);
    this.recommendIndex = 0;
    if (this.rangeList != null) {
      this.rangeList.clear();
    }
    if (this.reasonList != null) {
      this.reasonList.clear();
    }
    set_rangeOfRecommendDay_isSet(false);
    this.rangeOfRecommendDay = 0.0;
  }

  public String get_stockCode() {
    return this.stockCode;
  }

  public void set_stockCode(String stockCode) {
    this.stockCode = stockCode;
  }

  public void unset_stockCode() {
    this.stockCode = null;
  }

  /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockCode() {
    return this.stockCode != null;
  }

  public void set_stockCode_isSet(boolean value) {
    if (!value) {
      this.stockCode = null;
    }
  }

  public String get_stockName() {
    return this.stockName;
  }

  public void set_stockName(String stockName) {
    this.stockName = stockName;
  }

  public void unset_stockName() {
    this.stockName = null;
  }

  /** Returns true if field stockName is set (has been assigned a value) and false otherwise */
  public boolean is_set_stockName() {
    return this.stockName != null;
  }

  public void set_stockName_isSet(boolean value) {
    if (!value) {
      this.stockName = null;
    }
  }

  public int get_recommendIndex() {
    return this.recommendIndex;
  }

  public void set_recommendIndex(int recommendIndex) {
    this.recommendIndex = recommendIndex;
    set_recommendIndex_isSet(true);
  }

  public void unset_recommendIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDINDEX_ISSET_ID);
  }

  /** Returns true if field recommendIndex is set (has been assigned a value) and false otherwise */
  public boolean is_set_recommendIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDINDEX_ISSET_ID);
  }

  public void set_recommendIndex_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDINDEX_ISSET_ID, value);
  }

  public int get_rangeList_size() {
    return (this.rangeList == null) ? 0 : this.rangeList.size();
  }

  public java.util.Iterator<Double> get_rangeList_iterator() {
    return (this.rangeList == null) ? null : this.rangeList.iterator();
  }

  public void add_to_rangeList(double elem) {
    if (this.rangeList == null) {
      this.rangeList = new ArrayList<Double>();
    }
    this.rangeList.add(elem);
  }

  public List<Double> get_rangeList() {
    return this.rangeList;
  }

  public void set_rangeList(List<Double> rangeList) {
    this.rangeList = rangeList;
  }

  public void unset_rangeList() {
    this.rangeList = null;
  }

  /** Returns true if field rangeList is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeList() {
    return this.rangeList != null;
  }

  public void set_rangeList_isSet(boolean value) {
    if (!value) {
      this.rangeList = null;
    }
  }

  public int get_reasonList_size() {
    return (this.reasonList == null) ? 0 : this.reasonList.size();
  }

  public java.util.Iterator<RecommendReason> get_reasonList_iterator() {
    return (this.reasonList == null) ? null : this.reasonList.iterator();
  }

  public void add_to_reasonList(RecommendReason elem) {
    if (this.reasonList == null) {
      this.reasonList = new ArrayList<RecommendReason>();
    }
    this.reasonList.add(elem);
  }

  public List<RecommendReason> get_reasonList() {
    return this.reasonList;
  }

  public void set_reasonList(List<RecommendReason> reasonList) {
    this.reasonList = reasonList;
  }

  public void unset_reasonList() {
    this.reasonList = null;
  }

  /** Returns true if field reasonList is set (has been assigned a value) and false otherwise */
  public boolean is_set_reasonList() {
    return this.reasonList != null;
  }

  public void set_reasonList_isSet(boolean value) {
    if (!value) {
      this.reasonList = null;
    }
  }

  public double get_rangeOfRecommendDay() {
    return this.rangeOfRecommendDay;
  }

  public void set_rangeOfRecommendDay(double rangeOfRecommendDay) {
    this.rangeOfRecommendDay = rangeOfRecommendDay;
    set_rangeOfRecommendDay_isSet(true);
  }

  public void unset_rangeOfRecommendDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEOFRECOMMENDDAY_ISSET_ID);
  }

  /** Returns true if field rangeOfRecommendDay is set (has been assigned a value) and false otherwise */
  public boolean is_set_rangeOfRecommendDay() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEOFRECOMMENDDAY_ISSET_ID);
  }

  public void set_rangeOfRecommendDay_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEOFRECOMMENDDAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOCK_CODE:
      if (value == null) {
        unset_stockCode();
      } else {
        set_stockCode((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unset_stockName();
      } else {
        set_stockName((String)value);
      }
      break;

    case RECOMMEND_INDEX:
      if (value == null) {
        unset_recommendIndex();
      } else {
        set_recommendIndex((Integer)value);
      }
      break;

    case RANGE_LIST:
      if (value == null) {
        unset_rangeList();
      } else {
        set_rangeList((List<Double>)value);
      }
      break;

    case REASON_LIST:
      if (value == null) {
        unset_reasonList();
      } else {
        set_reasonList((List<RecommendReason>)value);
      }
      break;

    case RANGE_OF_RECOMMEND_DAY:
      if (value == null) {
        unset_rangeOfRecommendDay();
      } else {
        set_rangeOfRecommendDay((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOCK_CODE:
      return get_stockCode();

    case STOCK_NAME:
      return get_stockName();

    case RECOMMEND_INDEX:
      return get_recommendIndex();

    case RANGE_LIST:
      return get_rangeList();

    case REASON_LIST:
      return get_reasonList();

    case RANGE_OF_RECOMMEND_DAY:
      return get_rangeOfRecommendDay();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOCK_CODE:
      return is_set_stockCode();
    case STOCK_NAME:
      return is_set_stockName();
    case RECOMMEND_INDEX:
      return is_set_recommendIndex();
    case RANGE_LIST:
      return is_set_rangeList();
    case REASON_LIST:
      return is_set_reasonList();
    case RANGE_OF_RECOMMEND_DAY:
      return is_set_rangeOfRecommendDay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StockRecommendation)
      return this.equals((StockRecommendation)that);
    return false;
  }

  public boolean equals(StockRecommendation that) {
    if (that == null)
      return false;

    boolean this_present_stockCode = true && this.is_set_stockCode();
    boolean that_present_stockCode = true && that.is_set_stockCode();
    if (this_present_stockCode || that_present_stockCode) {
      if (!(this_present_stockCode && that_present_stockCode))
        return false;
      if (!this.stockCode.equals(that.stockCode))
        return false;
    }

    boolean this_present_stockName = true && this.is_set_stockName();
    boolean that_present_stockName = true && that.is_set_stockName();
    if (this_present_stockName || that_present_stockName) {
      if (!(this_present_stockName && that_present_stockName))
        return false;
      if (!this.stockName.equals(that.stockName))
        return false;
    }

    boolean this_present_recommendIndex = true;
    boolean that_present_recommendIndex = true;
    if (this_present_recommendIndex || that_present_recommendIndex) {
      if (!(this_present_recommendIndex && that_present_recommendIndex))
        return false;
      if (this.recommendIndex != that.recommendIndex)
        return false;
    }

    boolean this_present_rangeList = true && this.is_set_rangeList();
    boolean that_present_rangeList = true && that.is_set_rangeList();
    if (this_present_rangeList || that_present_rangeList) {
      if (!(this_present_rangeList && that_present_rangeList))
        return false;
      if (!this.rangeList.equals(that.rangeList))
        return false;
    }

    boolean this_present_reasonList = true && this.is_set_reasonList();
    boolean that_present_reasonList = true && that.is_set_reasonList();
    if (this_present_reasonList || that_present_reasonList) {
      if (!(this_present_reasonList && that_present_reasonList))
        return false;
      if (!this.reasonList.equals(that.reasonList))
        return false;
    }

    boolean this_present_rangeOfRecommendDay = true;
    boolean that_present_rangeOfRecommendDay = true;
    if (this_present_rangeOfRecommendDay || that_present_rangeOfRecommendDay) {
      if (!(this_present_rangeOfRecommendDay && that_present_rangeOfRecommendDay))
        return false;
      if (this.rangeOfRecommendDay != that.rangeOfRecommendDay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stockCode = true && (is_set_stockCode());
    list.add(present_stockCode);
    if (present_stockCode)
      list.add(stockCode);

    boolean present_stockName = true && (is_set_stockName());
    list.add(present_stockName);
    if (present_stockName)
      list.add(stockName);

    boolean present_recommendIndex = true;
    list.add(present_recommendIndex);
    if (present_recommendIndex)
      list.add(recommendIndex);

    boolean present_rangeList = true && (is_set_rangeList());
    list.add(present_rangeList);
    if (present_rangeList)
      list.add(rangeList);

    boolean present_reasonList = true && (is_set_reasonList());
    list.add(present_reasonList);
    if (present_reasonList)
      list.add(reasonList);

    boolean present_rangeOfRecommendDay = true;
    list.add(present_rangeOfRecommendDay);
    if (present_rangeOfRecommendDay)
      list.add(rangeOfRecommendDay);

    return list.hashCode();
  }

  @Override
  public int compareTo(StockRecommendation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_stockCode()).compareTo(other.is_set_stockCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stockName()).compareTo(other.is_set_stockName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stockName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockName, other.stockName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_recommendIndex()).compareTo(other.is_set_recommendIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_recommendIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendIndex, other.recommendIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeList()).compareTo(other.is_set_rangeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeList, other.rangeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_reasonList()).compareTo(other.is_set_reasonList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_reasonList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasonList, other.reasonList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_rangeOfRecommendDay()).compareTo(other.is_set_rangeOfRecommendDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_rangeOfRecommendDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeOfRecommendDay, other.rangeOfRecommendDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StockRecommendation(");
    boolean first = true;

    sb.append("stockCode:");
    if (this.stockCode == null) {
      sb.append("null");
    } else {
      sb.append(this.stockCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockName:");
    if (this.stockName == null) {
      sb.append("null");
    } else {
      sb.append(this.stockName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendIndex:");
    sb.append(this.recommendIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeList:");
    if (this.rangeList == null) {
      sb.append("null");
    } else {
      sb.append(this.rangeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reasonList:");
    if (this.reasonList == null) {
      sb.append("null");
    } else {
      sb.append(this.reasonList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeOfRecommendDay:");
    sb.append(this.rangeOfRecommendDay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_stockCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockCode' is unset! Struct:" + toString());
    }

    if (!is_set_stockName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockName' is unset! Struct:" + toString());
    }

    if (!is_set_recommendIndex()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recommendIndex' is unset! Struct:" + toString());
    }

    if (!is_set_rangeList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rangeList' is unset! Struct:" + toString());
    }

    if (!is_set_reasonList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reasonList' is unset! Struct:" + toString());
    }

    if (!is_set_rangeOfRecommendDay()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rangeOfRecommendDay' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class StockRecommendationStandardSchemeFactory implements SchemeFactory {
    public StockRecommendationStandardScheme getScheme() {
      return new StockRecommendationStandardScheme();
    }
  }

  private static class StockRecommendationStandardScheme extends StandardScheme<StockRecommendation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockRecommendation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockCode = iprot.readString();
              struct.set_stockCode_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockName = iprot.readString();
              struct.set_stockName_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECOMMEND_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommendIndex = iprot.readI32();
              struct.set_recommendIndex_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list514 = iprot.readListBegin();
                if (struct.rangeList == null) {
                  struct.rangeList = new ArrayList<Double>(_list514.size);
                }
                double _elem515 = (double)0;
                for (int _i516 = 0; _i516 < _list514.size; ++_i516)
                {
                  _elem515 = iprot.readDouble();
                  struct.rangeList.add(_elem515);
                }
                iprot.readListEnd();
              }
              struct.set_rangeList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REASON_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list517 = iprot.readListBegin();
                if (struct.reasonList == null) {
                  struct.reasonList = new ArrayList<RecommendReason>(_list517.size);
                }
                RecommendReason _elem518 = new RecommendReason();
                for (int _i519 = 0; _i519 < _list517.size; ++_i519)
                {
                  if (_elem518 == null) {
                    _elem518 = new RecommendReason();
                  }
                  _elem518.read(iprot);
                  struct.reasonList.add(_elem518);
                  _elem518 = null;
                }
                iprot.readListEnd();
              }
              struct.set_reasonList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RANGE_OF_RECOMMEND_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeOfRecommendDay = iprot.readDouble();
              struct.set_rangeOfRecommendDay_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockRecommendation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stockCode != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stockCode);
        oprot.writeFieldEnd();
      }
      if (struct.stockName != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stockName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECOMMEND_INDEX_FIELD_DESC);
      oprot.writeI32(struct.recommendIndex);
      oprot.writeFieldEnd();
      if (struct.rangeList != null) {
        oprot.writeFieldBegin(RANGE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.rangeList.size()));
          for (double _iter520 : struct.rangeList)
          {
            oprot.writeDouble(_iter520);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.reasonList != null) {
        oprot.writeFieldBegin(REASON_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.reasonList.size()));
          for (RecommendReason _iter521 : struct.reasonList)
          {
            _iter521.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANGE_OF_RECOMMEND_DAY_FIELD_DESC);
      oprot.writeDouble(struct.rangeOfRecommendDay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockRecommendationTupleSchemeFactory implements SchemeFactory {
    public StockRecommendationTupleScheme getScheme() {
      return new StockRecommendationTupleScheme();
    }
  }

  private static class StockRecommendationTupleScheme extends TupleScheme<StockRecommendation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockRecommendation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.stockCode);
      oprot.writeString(struct.stockName);
      oprot.writeI32(struct.recommendIndex);
      {
        oprot.writeI32(struct.rangeList.size());
        for (double _iter522 : struct.rangeList)
        {
          oprot.writeDouble(_iter522);
        }
      }
      {
        oprot.writeI32(struct.reasonList.size());
        for (RecommendReason _iter523 : struct.reasonList)
        {
          _iter523.write(oprot);
        }
      }
      oprot.writeDouble(struct.rangeOfRecommendDay);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockRecommendation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.stockCode = iprot.readString();
      struct.set_stockCode_isSet(true);
      struct.stockName = iprot.readString();
      struct.set_stockName_isSet(true);
      struct.recommendIndex = iprot.readI32();
      struct.set_recommendIndex_isSet(true);
      {
        org.apache.thrift.protocol.TList _list524 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        if (struct.rangeList == null) {
          struct.rangeList = new ArrayList<Double>(_list524.size);
        }
        double _elem525 = (double)0;
        for (int _i526 = 0; _i526 < _list524.size; ++_i526)
        {
          _elem525 = iprot.readDouble();
          struct.rangeList.add(_elem525);
        }
      }
      struct.set_rangeList_isSet(true);
      {
        org.apache.thrift.protocol.TList _list527 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        if (struct.reasonList == null) {
          struct.reasonList = new ArrayList<RecommendReason>(_list527.size);
        }
        RecommendReason _elem528 = new RecommendReason();
        for (int _i529 = 0; _i529 < _list527.size; ++_i529)
        {
          if (_elem528 == null) {
            _elem528 = new RecommendReason();
          }
          _elem528.read(iprot);
          struct.reasonList.add(_elem528);
          _elem528 = null;
        }
      }
      struct.set_reasonList_isSet(true);
      struct.rangeOfRecommendDay = iprot.readDouble();
      struct.set_rangeOfRecommendDay_isSet(true);
    }
  }

}

