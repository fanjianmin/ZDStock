/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class StockService {

  /**
   * 股票信息类
   */
  public interface Iface {

    public boolean isTradeDate() throws org.apache.thrift.TException;

    public StockList getStock(String selection) throws org.apache.thrift.TException;

    public StockData refreshStocks(List<String> codeList) throws org.apache.thrift.TException;

    public KData getStockKData(String code, KType type, String startMinute) throws org.apache.thrift.TException;

    public FilterStockList getOptionalStocks(Condition conditions) throws org.apache.thrift.TException;

    public NewsList getNews(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType) throws org.apache.thrift.TException;

    public boolean storeNews(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type) throws org.apache.thrift.TException;

    public NewsList getNewsList(String startDate, String newsType, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public NewsList getNewsById(String newsId) throws org.apache.thrift.TException;

    public MarketData getMarket(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public MarketData getLeaders(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public MarketData getRelationStocks(RangeFlag rf, PlateFlag pf, String code, long total) throws org.apache.thrift.TException;

    public CompanyProfile getCompanyProfile(String code) throws org.apache.thrift.TException;

    public ShareholderInfo getShareholder(String code) throws org.apache.thrift.TException;

    public FundsData getFunds(String code) throws org.apache.thrift.TException;

    public MarginTrading getMarginTrading(String code) throws org.apache.thrift.TException;

    public FinancePerformance getFinancePerformance(String code) throws org.apache.thrift.TException;

    public FinanceAnalysisData getFinanceAnalysis(String code, int year, int quarterly) throws org.apache.thrift.TException;

    public BasicStockList getComponentStock(String code, RangeFlag rf, int count) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void isTradeDate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStock(String selection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void refreshStocks(List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStockKData(String code, KType type, String startMinute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOptionalStocks(Condition conditions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNews(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeNews(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewsList(String startDate, String newsType, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewsById(String newsId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMarket(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLeaders(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRelationStocks(RangeFlag rf, PlateFlag pf, String code, long total, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCompanyProfile(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getShareholder(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFunds(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMarginTrading(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinancePerformance(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceAnalysis(String code, int year, int quarterly, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getComponentStock(String code, RangeFlag rf, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean isTradeDate() throws org.apache.thrift.TException
    {
      sendIsTradeDate();
      return recvIsTradeDate();
    }

    public void sendIsTradeDate() throws org.apache.thrift.TException
    {
      isTradeDate_args args = new isTradeDate_args();
      sendBase("isTradeDate", args);
    }

    public boolean recvIsTradeDate() throws org.apache.thrift.TException
    {
      isTradeDate_result result = new isTradeDate_result();
      receiveBase(result, "isTradeDate");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isTradeDate failed: unknown result");
    }

    public StockList getStock(String selection) throws org.apache.thrift.TException
    {
      sendGetStock(selection);
      return recvGetStock();
    }

    public void sendGetStock(String selection) throws org.apache.thrift.TException
    {
      getStock_args args = new getStock_args();
      args.set_selection(selection);
      sendBase("getStock", args);
    }

    public StockList recvGetStock() throws org.apache.thrift.TException
    {
      getStock_result result = new getStock_result();
      receiveBase(result, "getStock");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStock failed: unknown result");
    }

    public StockData refreshStocks(List<String> codeList) throws org.apache.thrift.TException
    {
      sendRefreshStocks(codeList);
      return recvRefreshStocks();
    }

    public void sendRefreshStocks(List<String> codeList) throws org.apache.thrift.TException
    {
      refreshStocks_args args = new refreshStocks_args();
      args.set_codeList(codeList);
      sendBase("refreshStocks", args);
    }

    public StockData recvRefreshStocks() throws org.apache.thrift.TException
    {
      refreshStocks_result result = new refreshStocks_result();
      receiveBase(result, "refreshStocks");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refreshStocks failed: unknown result");
    }

    public KData getStockKData(String code, KType type, String startMinute) throws org.apache.thrift.TException
    {
      sendGetStockKData(code, type, startMinute);
      return recvGetStockKData();
    }

    public void sendGetStockKData(String code, KType type, String startMinute) throws org.apache.thrift.TException
    {
      getStockKData_args args = new getStockKData_args();
      args.set_code(code);
      args.set_type(type);
      args.set_startMinute(startMinute);
      sendBase("getStockKData", args);
    }

    public KData recvGetStockKData() throws org.apache.thrift.TException
    {
      getStockKData_result result = new getStockKData_result();
      receiveBase(result, "getStockKData");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStockKData failed: unknown result");
    }

    public FilterStockList getOptionalStocks(Condition conditions) throws org.apache.thrift.TException
    {
      sendGetOptionalStocks(conditions);
      return recvGetOptionalStocks();
    }

    public void sendGetOptionalStocks(Condition conditions) throws org.apache.thrift.TException
    {
      getOptionalStocks_args args = new getOptionalStocks_args();
      args.set_conditions(conditions);
      sendBase("getOptionalStocks", args);
    }

    public FilterStockList recvGetOptionalStocks() throws org.apache.thrift.TException
    {
      getOptionalStocks_result result = new getOptionalStocks_result();
      receiveBase(result, "getOptionalStocks");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOptionalStocks failed: unknown result");
    }

    public NewsList getNews(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType) throws org.apache.thrift.TException
    {
      sendGetNews(code, pageNum, newsCountPerpage, tp, codeType);
      return recvGetNews();
    }

    public void sendGetNews(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType) throws org.apache.thrift.TException
    {
      getNews_args args = new getNews_args();
      args.set_code(code);
      args.set_pageNum(pageNum);
      args.set_newsCountPerpage(newsCountPerpage);
      args.set_tp(tp);
      args.set_codeType(codeType);
      sendBase("getNews", args);
    }

    public NewsList recvGetNews() throws org.apache.thrift.TException
    {
      getNews_result result = new getNews_result();
      receiveBase(result, "getNews");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNews failed: unknown result");
    }

    public boolean storeNews(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type) throws org.apache.thrift.TException
    {
      sendStoreNews(title, newsDetail, publicDate, origin, isHeadline, url, summary, imageUrl, type);
      return recvStoreNews();
    }

    public void sendStoreNews(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type) throws org.apache.thrift.TException
    {
      storeNews_args args = new storeNews_args();
      args.set_title(title);
      args.set_newsDetail(newsDetail);
      args.set_publicDate(publicDate);
      args.set_origin(origin);
      args.set_isHeadline(isHeadline);
      args.set_url(url);
      args.set_summary(summary);
      args.set_imageUrl(imageUrl);
      args.set_type(type);
      sendBase("storeNews", args);
    }

    public boolean recvStoreNews() throws org.apache.thrift.TException
    {
      storeNews_result result = new storeNews_result();
      receiveBase(result, "storeNews");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeNews failed: unknown result");
    }

    public NewsList getNewsList(String startDate, String newsType, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      sendGetNewsList(startDate, newsType, pageNo, pageSize);
      return recvGetNewsList();
    }

    public void sendGetNewsList(String startDate, String newsType, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      getNewsList_args args = new getNewsList_args();
      args.set_startDate(startDate);
      args.set_newsType(newsType);
      args.set_pageNo(pageNo);
      args.set_pageSize(pageSize);
      sendBase("getNewsList", args);
    }

    public NewsList recvGetNewsList() throws org.apache.thrift.TException
    {
      getNewsList_result result = new getNewsList_result();
      receiveBase(result, "getNewsList");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewsList failed: unknown result");
    }

    public NewsList getNewsById(String newsId) throws org.apache.thrift.TException
    {
      sendGetNewsById(newsId);
      return recvGetNewsById();
    }

    public void sendGetNewsById(String newsId) throws org.apache.thrift.TException
    {
      getNewsById_args args = new getNewsById_args();
      args.set_newsId(newsId);
      sendBase("getNewsById", args);
    }

    public NewsList recvGetNewsById() throws org.apache.thrift.TException
    {
      getNewsById_result result = new getNewsById_result();
      receiveBase(result, "getNewsById");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewsById failed: unknown result");
    }

    public MarketData getMarket(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      sendGetMarket(rf, pf, pageNo, pageSize);
      return recvGetMarket();
    }

    public void sendGetMarket(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      getMarket_args args = new getMarket_args();
      args.set_rf(rf);
      args.set_pf(pf);
      args.set_pageNo(pageNo);
      args.set_pageSize(pageSize);
      sendBase("getMarket", args);
    }

    public MarketData recvGetMarket() throws org.apache.thrift.TException
    {
      getMarket_result result = new getMarket_result();
      receiveBase(result, "getMarket");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarket failed: unknown result");
    }

    public MarketData getLeaders(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      sendGetLeaders(rf, pf, label, pageNo, pageSize);
      return recvGetLeaders();
    }

    public void sendGetLeaders(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      getLeaders_args args = new getLeaders_args();
      args.set_rf(rf);
      args.set_pf(pf);
      args.set_label(label);
      args.set_pageNo(pageNo);
      args.set_pageSize(pageSize);
      sendBase("getLeaders", args);
    }

    public MarketData recvGetLeaders() throws org.apache.thrift.TException
    {
      getLeaders_result result = new getLeaders_result();
      receiveBase(result, "getLeaders");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLeaders failed: unknown result");
    }

    public MarketData getRelationStocks(RangeFlag rf, PlateFlag pf, String code, long total) throws org.apache.thrift.TException
    {
      sendGetRelationStocks(rf, pf, code, total);
      return recvGetRelationStocks();
    }

    public void sendGetRelationStocks(RangeFlag rf, PlateFlag pf, String code, long total) throws org.apache.thrift.TException
    {
      getRelationStocks_args args = new getRelationStocks_args();
      args.set_rf(rf);
      args.set_pf(pf);
      args.set_code(code);
      args.set_total(total);
      sendBase("getRelationStocks", args);
    }

    public MarketData recvGetRelationStocks() throws org.apache.thrift.TException
    {
      getRelationStocks_result result = new getRelationStocks_result();
      receiveBase(result, "getRelationStocks");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRelationStocks failed: unknown result");
    }

    public CompanyProfile getCompanyProfile(String code) throws org.apache.thrift.TException
    {
      sendGetCompanyProfile(code);
      return recvGetCompanyProfile();
    }

    public void sendGetCompanyProfile(String code) throws org.apache.thrift.TException
    {
      getCompanyProfile_args args = new getCompanyProfile_args();
      args.set_code(code);
      sendBase("getCompanyProfile", args);
    }

    public CompanyProfile recvGetCompanyProfile() throws org.apache.thrift.TException
    {
      getCompanyProfile_result result = new getCompanyProfile_result();
      receiveBase(result, "getCompanyProfile");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyProfile failed: unknown result");
    }

    public ShareholderInfo getShareholder(String code) throws org.apache.thrift.TException
    {
      sendGetShareholder(code);
      return recvGetShareholder();
    }

    public void sendGetShareholder(String code) throws org.apache.thrift.TException
    {
      getShareholder_args args = new getShareholder_args();
      args.set_code(code);
      sendBase("getShareholder", args);
    }

    public ShareholderInfo recvGetShareholder() throws org.apache.thrift.TException
    {
      getShareholder_result result = new getShareholder_result();
      receiveBase(result, "getShareholder");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShareholder failed: unknown result");
    }

    public FundsData getFunds(String code) throws org.apache.thrift.TException
    {
      sendGetFunds(code);
      return recvGetFunds();
    }

    public void sendGetFunds(String code) throws org.apache.thrift.TException
    {
      getFunds_args args = new getFunds_args();
      args.set_code(code);
      sendBase("getFunds", args);
    }

    public FundsData recvGetFunds() throws org.apache.thrift.TException
    {
      getFunds_result result = new getFunds_result();
      receiveBase(result, "getFunds");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFunds failed: unknown result");
    }

    public MarginTrading getMarginTrading(String code) throws org.apache.thrift.TException
    {
      sendGetMarginTrading(code);
      return recvGetMarginTrading();
    }

    public void sendGetMarginTrading(String code) throws org.apache.thrift.TException
    {
      getMarginTrading_args args = new getMarginTrading_args();
      args.set_code(code);
      sendBase("getMarginTrading", args);
    }

    public MarginTrading recvGetMarginTrading() throws org.apache.thrift.TException
    {
      getMarginTrading_result result = new getMarginTrading_result();
      receiveBase(result, "getMarginTrading");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginTrading failed: unknown result");
    }

    public FinancePerformance getFinancePerformance(String code) throws org.apache.thrift.TException
    {
      sendGetFinancePerformance(code);
      return recvGetFinancePerformance();
    }

    public void sendGetFinancePerformance(String code) throws org.apache.thrift.TException
    {
      getFinancePerformance_args args = new getFinancePerformance_args();
      args.set_code(code);
      sendBase("getFinancePerformance", args);
    }

    public FinancePerformance recvGetFinancePerformance() throws org.apache.thrift.TException
    {
      getFinancePerformance_result result = new getFinancePerformance_result();
      receiveBase(result, "getFinancePerformance");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinancePerformance failed: unknown result");
    }

    public FinanceAnalysisData getFinanceAnalysis(String code, int year, int quarterly) throws org.apache.thrift.TException
    {
      sendGetFinanceAnalysis(code, year, quarterly);
      return recvGetFinanceAnalysis();
    }

    public void sendGetFinanceAnalysis(String code, int year, int quarterly) throws org.apache.thrift.TException
    {
      getFinanceAnalysis_args args = new getFinanceAnalysis_args();
      args.set_code(code);
      args.set_year(year);
      args.set_quarterly(quarterly);
      sendBase("getFinanceAnalysis", args);
    }

    public FinanceAnalysisData recvGetFinanceAnalysis() throws org.apache.thrift.TException
    {
      getFinanceAnalysis_result result = new getFinanceAnalysis_result();
      receiveBase(result, "getFinanceAnalysis");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceAnalysis failed: unknown result");
    }

    public BasicStockList getComponentStock(String code, RangeFlag rf, int count) throws org.apache.thrift.TException
    {
      sendGetComponentStock(code, rf, count);
      return recvGetComponentStock();
    }

    public void sendGetComponentStock(String code, RangeFlag rf, int count) throws org.apache.thrift.TException
    {
      getComponentStock_args args = new getComponentStock_args();
      args.set_code(code);
      args.set_rf(rf);
      args.set_count(count);
      sendBase("getComponentStock", args);
    }

    public BasicStockList recvGetComponentStock() throws org.apache.thrift.TException
    {
      getComponentStock_result result = new getComponentStock_result();
      receiveBase(result, "getComponentStock");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComponentStock failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void isTradeDate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isTradeDate_call method_call = new isTradeDate_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isTradeDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      public isTradeDate_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isTradeDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isTradeDate_args args = new isTradeDate_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvIsTradeDate();
      }
    }

    public void getStock(String selection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStock_call method_call = new getStock_call(selection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String selection;
      public getStock_call(String selection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.selection = selection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStock_args args = new getStock_args();
        args.set_selection(selection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetStock();
      }
    }

    public void refreshStocks(List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refreshStocks_call method_call = new refreshStocks_call(codeList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refreshStocks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> codeList;
      public refreshStocks_call(List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.codeList = codeList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refreshStocks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refreshStocks_args args = new refreshStocks_args();
        args.set_codeList(codeList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvRefreshStocks();
      }
    }

    public void getStockKData(String code, KType type, String startMinute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStockKData_call method_call = new getStockKData_call(code, type, startMinute, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStockKData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private KType type;
      private String startMinute;
      public getStockKData_call(String code, KType type, String startMinute, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.type = type;
        this.startMinute = startMinute;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStockKData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStockKData_args args = new getStockKData_args();
        args.set_code(code);
        args.set_type(type);
        args.set_startMinute(startMinute);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public KData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetStockKData();
      }
    }

    public void getOptionalStocks(Condition conditions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOptionalStocks_call method_call = new getOptionalStocks_call(conditions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOptionalStocks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Condition conditions;
      public getOptionalStocks_call(Condition conditions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.conditions = conditions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOptionalStocks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOptionalStocks_args args = new getOptionalStocks_args();
        args.set_conditions(conditions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FilterStockList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetOptionalStocks();
      }
    }

    public void getNews(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNews_call method_call = new getNews_call(code, pageNum, newsCountPerpage, tp, codeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int pageNum;
      private int newsCountPerpage;
      private NewsType tp;
      private CodeType codeType;
      public getNews_call(String code, int pageNum, int newsCountPerpage, NewsType tp, CodeType codeType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.pageNum = pageNum;
        this.newsCountPerpage = newsCountPerpage;
        this.tp = tp;
        this.codeType = codeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNews_args args = new getNews_args();
        args.set_code(code);
        args.set_pageNum(pageNum);
        args.set_newsCountPerpage(newsCountPerpage);
        args.set_tp(tp);
        args.set_codeType(codeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NewsList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetNews();
      }
    }

    public void storeNews(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeNews_call method_call = new storeNews_call(title, newsDetail, publicDate, origin, isHeadline, url, summary, imageUrl, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeNews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String title;
      private String newsDetail;
      private String publicDate;
      private String origin;
      private boolean isHeadline;
      private String url;
      private String summary;
      private String imageUrl;
      private String type;
      public storeNews_call(String title, String newsDetail, String publicDate, String origin, boolean isHeadline, String url, String summary, String imageUrl, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.title = title;
        this.newsDetail = newsDetail;
        this.publicDate = publicDate;
        this.origin = origin;
        this.isHeadline = isHeadline;
        this.url = url;
        this.summary = summary;
        this.imageUrl = imageUrl;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeNews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeNews_args args = new storeNews_args();
        args.set_title(title);
        args.set_newsDetail(newsDetail);
        args.set_publicDate(publicDate);
        args.set_origin(origin);
        args.set_isHeadline(isHeadline);
        args.set_url(url);
        args.set_summary(summary);
        args.set_imageUrl(imageUrl);
        args.set_type(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvStoreNews();
      }
    }

    public void getNewsList(String startDate, String newsType, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewsList_call method_call = new getNewsList_call(startDate, newsType, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startDate;
      private String newsType;
      private int pageNo;
      private int pageSize;
      public getNewsList_call(String startDate, String newsType, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startDate = startDate;
        this.newsType = newsType;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewsList_args args = new getNewsList_args();
        args.set_startDate(startDate);
        args.set_newsType(newsType);
        args.set_pageNo(pageNo);
        args.set_pageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NewsList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetNewsList();
      }
    }

    public void getNewsById(String newsId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewsById_call method_call = new getNewsById_call(newsId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String newsId;
      public getNewsById_call(String newsId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newsId = newsId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewsById_args args = new getNewsById_args();
        args.set_newsId(newsId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NewsList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetNewsById();
      }
    }

    public void getMarket(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarket_call method_call = new getMarket_call(rf, pf, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RangeFlag rf;
      private PlateFlag pf;
      private int pageNo;
      private int pageSize;
      public getMarket_call(RangeFlag rf, PlateFlag pf, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rf = rf;
        this.pf = pf;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarket_args args = new getMarket_args();
        args.set_rf(rf);
        args.set_pf(pf);
        args.set_pageNo(pageNo);
        args.set_pageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MarketData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetMarket();
      }
    }

    public void getLeaders(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLeaders_call method_call = new getLeaders_call(rf, pf, label, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLeaders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RangeFlag rf;
      private PlateFlag pf;
      private String label;
      private int pageNo;
      private int pageSize;
      public getLeaders_call(RangeFlag rf, PlateFlag pf, String label, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rf = rf;
        this.pf = pf;
        this.label = label;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLeaders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLeaders_args args = new getLeaders_args();
        args.set_rf(rf);
        args.set_pf(pf);
        args.set_label(label);
        args.set_pageNo(pageNo);
        args.set_pageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MarketData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetLeaders();
      }
    }

    public void getRelationStocks(RangeFlag rf, PlateFlag pf, String code, long total, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRelationStocks_call method_call = new getRelationStocks_call(rf, pf, code, total, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRelationStocks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RangeFlag rf;
      private PlateFlag pf;
      private String code;
      private long total;
      public getRelationStocks_call(RangeFlag rf, PlateFlag pf, String code, long total, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rf = rf;
        this.pf = pf;
        this.code = code;
        this.total = total;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRelationStocks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRelationStocks_args args = new getRelationStocks_args();
        args.set_rf(rf);
        args.set_pf(pf);
        args.set_code(code);
        args.set_total(total);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MarketData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetRelationStocks();
      }
    }

    public void getCompanyProfile(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyProfile_call method_call = new getCompanyProfile_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getCompanyProfile_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyProfile_args args = new getCompanyProfile_args();
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompanyProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetCompanyProfile();
      }
    }

    public void getShareholder(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShareholder_call method_call = new getShareholder_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShareholder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getShareholder_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShareholder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShareholder_args args = new getShareholder_args();
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ShareholderInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetShareholder();
      }
    }

    public void getFunds(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFunds_call method_call = new getFunds_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFunds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getFunds_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFunds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFunds_args args = new getFunds_args();
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FundsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetFunds();
      }
    }

    public void getMarginTrading(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginTrading_call method_call = new getMarginTrading_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginTrading_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getMarginTrading_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginTrading", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginTrading_args args = new getMarginTrading_args();
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MarginTrading getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetMarginTrading();
      }
    }

    public void getFinancePerformance(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinancePerformance_call method_call = new getFinancePerformance_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinancePerformance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getFinancePerformance_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinancePerformance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinancePerformance_args args = new getFinancePerformance_args();
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinancePerformance getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetFinancePerformance();
      }
    }

    public void getFinanceAnalysis(String code, int year, int quarterly, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceAnalysis_call method_call = new getFinanceAnalysis_call(code, year, quarterly, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceAnalysis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int year;
      private int quarterly;
      public getFinanceAnalysis_call(String code, int year, int quarterly, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.year = year;
        this.quarterly = quarterly;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceAnalysis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceAnalysis_args args = new getFinanceAnalysis_args();
        args.set_code(code);
        args.set_year(year);
        args.set_quarterly(quarterly);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceAnalysisData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetFinanceAnalysis();
      }
    }

    public void getComponentStock(String code, RangeFlag rf, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComponentStock_call method_call = new getComponentStock_call(code, rf, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComponentStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private RangeFlag rf;
      private int count;
      public getComponentStock_call(String code, RangeFlag rf, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.rf = rf;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getComponentStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComponentStock_args args = new getComponentStock_args();
        args.set_code(code);
        args.set_rf(rf);
        args.set_count(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BasicStockList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetComponentStock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("isTradeDate", new isTradeDate());
      processMap.put("getStock", new getStock());
      processMap.put("refreshStocks", new refreshStocks());
      processMap.put("getStockKData", new getStockKData());
      processMap.put("getOptionalStocks", new getOptionalStocks());
      processMap.put("getNews", new getNews());
      processMap.put("storeNews", new storeNews());
      processMap.put("getNewsList", new getNewsList());
      processMap.put("getNewsById", new getNewsById());
      processMap.put("getMarket", new getMarket());
      processMap.put("getLeaders", new getLeaders());
      processMap.put("getRelationStocks", new getRelationStocks());
      processMap.put("getCompanyProfile", new getCompanyProfile());
      processMap.put("getShareholder", new getShareholder());
      processMap.put("getFunds", new getFunds());
      processMap.put("getMarginTrading", new getMarginTrading());
      processMap.put("getFinancePerformance", new getFinancePerformance());
      processMap.put("getFinanceAnalysis", new getFinanceAnalysis());
      processMap.put("getComponentStock", new getComponentStock());
      return processMap;
    }

    public static class isTradeDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTradeDate_args> {
      public isTradeDate() {
        super("isTradeDate");
      }

      public isTradeDate_args getEmptyArgsInstance() {
        return new isTradeDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isTradeDate_result getResult(I iface, isTradeDate_args args) throws org.apache.thrift.TException {
        isTradeDate_result result = new isTradeDate_result();
        result.success = iface.isTradeDate();
        result.set_success_isSet(true);
        return result;
      }
    }

    public static class getStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStock_args> {
      public getStock() {
        super("getStock");
      }

      public getStock_args getEmptyArgsInstance() {
        return new getStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStock_result getResult(I iface, getStock_args args) throws org.apache.thrift.TException {
        getStock_result result = new getStock_result();
        result.success = iface.getStock(args.selection);
        return result;
      }
    }

    public static class refreshStocks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refreshStocks_args> {
      public refreshStocks() {
        super("refreshStocks");
      }

      public refreshStocks_args getEmptyArgsInstance() {
        return new refreshStocks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refreshStocks_result getResult(I iface, refreshStocks_args args) throws org.apache.thrift.TException {
        refreshStocks_result result = new refreshStocks_result();
        result.success = iface.refreshStocks(args.codeList);
        return result;
      }
    }

    public static class getStockKData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStockKData_args> {
      public getStockKData() {
        super("getStockKData");
      }

      public getStockKData_args getEmptyArgsInstance() {
        return new getStockKData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStockKData_result getResult(I iface, getStockKData_args args) throws org.apache.thrift.TException {
        getStockKData_result result = new getStockKData_result();
        result.success = iface.getStockKData(args.code, args.type, args.startMinute);
        return result;
      }
    }

    public static class getOptionalStocks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOptionalStocks_args> {
      public getOptionalStocks() {
        super("getOptionalStocks");
      }

      public getOptionalStocks_args getEmptyArgsInstance() {
        return new getOptionalStocks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOptionalStocks_result getResult(I iface, getOptionalStocks_args args) throws org.apache.thrift.TException {
        getOptionalStocks_result result = new getOptionalStocks_result();
        result.success = iface.getOptionalStocks(args.conditions);
        return result;
      }
    }

    public static class getNews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNews_args> {
      public getNews() {
        super("getNews");
      }

      public getNews_args getEmptyArgsInstance() {
        return new getNews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNews_result getResult(I iface, getNews_args args) throws org.apache.thrift.TException {
        getNews_result result = new getNews_result();
        result.success = iface.getNews(args.code, args.pageNum, args.newsCountPerpage, args.tp, args.codeType);
        return result;
      }
    }

    public static class storeNews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeNews_args> {
      public storeNews() {
        super("storeNews");
      }

      public storeNews_args getEmptyArgsInstance() {
        return new storeNews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeNews_result getResult(I iface, storeNews_args args) throws org.apache.thrift.TException {
        storeNews_result result = new storeNews_result();
        result.success = iface.storeNews(args.title, args.newsDetail, args.publicDate, args.origin, args.isHeadline, args.url, args.summary, args.imageUrl, args.type);
        result.set_success_isSet(true);
        return result;
      }
    }

    public static class getNewsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewsList_args> {
      public getNewsList() {
        super("getNewsList");
      }

      public getNewsList_args getEmptyArgsInstance() {
        return new getNewsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewsList_result getResult(I iface, getNewsList_args args) throws org.apache.thrift.TException {
        getNewsList_result result = new getNewsList_result();
        result.success = iface.getNewsList(args.startDate, args.newsType, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class getNewsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewsById_args> {
      public getNewsById() {
        super("getNewsById");
      }

      public getNewsById_args getEmptyArgsInstance() {
        return new getNewsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewsById_result getResult(I iface, getNewsById_args args) throws org.apache.thrift.TException {
        getNewsById_result result = new getNewsById_result();
        result.success = iface.getNewsById(args.newsId);
        return result;
      }
    }

    public static class getMarket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarket_args> {
      public getMarket() {
        super("getMarket");
      }

      public getMarket_args getEmptyArgsInstance() {
        return new getMarket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMarket_result getResult(I iface, getMarket_args args) throws org.apache.thrift.TException {
        getMarket_result result = new getMarket_result();
        result.success = iface.getMarket(args.rf, args.pf, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class getLeaders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLeaders_args> {
      public getLeaders() {
        super("getLeaders");
      }

      public getLeaders_args getEmptyArgsInstance() {
        return new getLeaders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLeaders_result getResult(I iface, getLeaders_args args) throws org.apache.thrift.TException {
        getLeaders_result result = new getLeaders_result();
        result.success = iface.getLeaders(args.rf, args.pf, args.label, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class getRelationStocks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRelationStocks_args> {
      public getRelationStocks() {
        super("getRelationStocks");
      }

      public getRelationStocks_args getEmptyArgsInstance() {
        return new getRelationStocks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRelationStocks_result getResult(I iface, getRelationStocks_args args) throws org.apache.thrift.TException {
        getRelationStocks_result result = new getRelationStocks_result();
        result.success = iface.getRelationStocks(args.rf, args.pf, args.code, args.total);
        return result;
      }
    }

    public static class getCompanyProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyProfile_args> {
      public getCompanyProfile() {
        super("getCompanyProfile");
      }

      public getCompanyProfile_args getEmptyArgsInstance() {
        return new getCompanyProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyProfile_result getResult(I iface, getCompanyProfile_args args) throws org.apache.thrift.TException {
        getCompanyProfile_result result = new getCompanyProfile_result();
        result.success = iface.getCompanyProfile(args.code);
        return result;
      }
    }

    public static class getShareholder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShareholder_args> {
      public getShareholder() {
        super("getShareholder");
      }

      public getShareholder_args getEmptyArgsInstance() {
        return new getShareholder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getShareholder_result getResult(I iface, getShareholder_args args) throws org.apache.thrift.TException {
        getShareholder_result result = new getShareholder_result();
        result.success = iface.getShareholder(args.code);
        return result;
      }
    }

    public static class getFunds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFunds_args> {
      public getFunds() {
        super("getFunds");
      }

      public getFunds_args getEmptyArgsInstance() {
        return new getFunds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFunds_result getResult(I iface, getFunds_args args) throws org.apache.thrift.TException {
        getFunds_result result = new getFunds_result();
        result.success = iface.getFunds(args.code);
        return result;
      }
    }

    public static class getMarginTrading<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginTrading_args> {
      public getMarginTrading() {
        super("getMarginTrading");
      }

      public getMarginTrading_args getEmptyArgsInstance() {
        return new getMarginTrading_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMarginTrading_result getResult(I iface, getMarginTrading_args args) throws org.apache.thrift.TException {
        getMarginTrading_result result = new getMarginTrading_result();
        result.success = iface.getMarginTrading(args.code);
        return result;
      }
    }

    public static class getFinancePerformance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinancePerformance_args> {
      public getFinancePerformance() {
        super("getFinancePerformance");
      }

      public getFinancePerformance_args getEmptyArgsInstance() {
        return new getFinancePerformance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinancePerformance_result getResult(I iface, getFinancePerformance_args args) throws org.apache.thrift.TException {
        getFinancePerformance_result result = new getFinancePerformance_result();
        result.success = iface.getFinancePerformance(args.code);
        return result;
      }
    }

    public static class getFinanceAnalysis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceAnalysis_args> {
      public getFinanceAnalysis() {
        super("getFinanceAnalysis");
      }

      public getFinanceAnalysis_args getEmptyArgsInstance() {
        return new getFinanceAnalysis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceAnalysis_result getResult(I iface, getFinanceAnalysis_args args) throws org.apache.thrift.TException {
        getFinanceAnalysis_result result = new getFinanceAnalysis_result();
        result.success = iface.getFinanceAnalysis(args.code, args.year, args.quarterly);
        return result;
      }
    }

    public static class getComponentStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComponentStock_args> {
      public getComponentStock() {
        super("getComponentStock");
      }

      public getComponentStock_args getEmptyArgsInstance() {
        return new getComponentStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComponentStock_result getResult(I iface, getComponentStock_args args) throws org.apache.thrift.TException {
        getComponentStock_result result = new getComponentStock_result();
        result.success = iface.getComponentStock(args.code, args.rf, args.count);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("isTradeDate", new isTradeDate());
      processMap.put("getStock", new getStock());
      processMap.put("refreshStocks", new refreshStocks());
      processMap.put("getStockKData", new getStockKData());
      processMap.put("getOptionalStocks", new getOptionalStocks());
      processMap.put("getNews", new getNews());
      processMap.put("storeNews", new storeNews());
      processMap.put("getNewsList", new getNewsList());
      processMap.put("getNewsById", new getNewsById());
      processMap.put("getMarket", new getMarket());
      processMap.put("getLeaders", new getLeaders());
      processMap.put("getRelationStocks", new getRelationStocks());
      processMap.put("getCompanyProfile", new getCompanyProfile());
      processMap.put("getShareholder", new getShareholder());
      processMap.put("getFunds", new getFunds());
      processMap.put("getMarginTrading", new getMarginTrading());
      processMap.put("getFinancePerformance", new getFinancePerformance());
      processMap.put("getFinanceAnalysis", new getFinanceAnalysis());
      processMap.put("getComponentStock", new getComponentStock());
      return processMap;
    }

    public static class isTradeDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isTradeDate_args, Boolean> {
      public isTradeDate() {
        super("isTradeDate");
      }

      public isTradeDate_args getEmptyArgsInstance() {
        return new isTradeDate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isTradeDate_result result = new isTradeDate_result();
            result.success = o;
            result.set_success_isSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isTradeDate_result result = new isTradeDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isTradeDate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isTradeDate(resultHandler);
      }
    }

    public static class getStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStock_args, StockList> {
      public getStock() {
        super("getStock");
      }

      public getStock_args getEmptyArgsInstance() {
        return new getStock_args();
      }

      public AsyncMethodCallback<StockList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StockList>() { 
          public void onComplete(StockList o) {
            getStock_result result = new getStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStock_result result = new getStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStock_args args, org.apache.thrift.async.AsyncMethodCallback<StockList> resultHandler) throws TException {
        iface.getStock(args.selection,resultHandler);
      }
    }

    public static class refreshStocks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refreshStocks_args, StockData> {
      public refreshStocks() {
        super("refreshStocks");
      }

      public refreshStocks_args getEmptyArgsInstance() {
        return new refreshStocks_args();
      }

      public AsyncMethodCallback<StockData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StockData>() { 
          public void onComplete(StockData o) {
            refreshStocks_result result = new refreshStocks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            refreshStocks_result result = new refreshStocks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refreshStocks_args args, org.apache.thrift.async.AsyncMethodCallback<StockData> resultHandler) throws TException {
        iface.refreshStocks(args.codeList,resultHandler);
      }
    }

    public static class getStockKData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStockKData_args, KData> {
      public getStockKData() {
        super("getStockKData");
      }

      public getStockKData_args getEmptyArgsInstance() {
        return new getStockKData_args();
      }

      public AsyncMethodCallback<KData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<KData>() { 
          public void onComplete(KData o) {
            getStockKData_result result = new getStockKData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStockKData_result result = new getStockKData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStockKData_args args, org.apache.thrift.async.AsyncMethodCallback<KData> resultHandler) throws TException {
        iface.getStockKData(args.code, args.type, args.startMinute,resultHandler);
      }
    }

    public static class getOptionalStocks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOptionalStocks_args, FilterStockList> {
      public getOptionalStocks() {
        super("getOptionalStocks");
      }

      public getOptionalStocks_args getEmptyArgsInstance() {
        return new getOptionalStocks_args();
      }

      public AsyncMethodCallback<FilterStockList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FilterStockList>() { 
          public void onComplete(FilterStockList o) {
            getOptionalStocks_result result = new getOptionalStocks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOptionalStocks_result result = new getOptionalStocks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOptionalStocks_args args, org.apache.thrift.async.AsyncMethodCallback<FilterStockList> resultHandler) throws TException {
        iface.getOptionalStocks(args.conditions,resultHandler);
      }
    }

    public static class getNews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNews_args, NewsList> {
      public getNews() {
        super("getNews");
      }

      public getNews_args getEmptyArgsInstance() {
        return new getNews_args();
      }

      public AsyncMethodCallback<NewsList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NewsList>() { 
          public void onComplete(NewsList o) {
            getNews_result result = new getNews_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNews_result result = new getNews_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNews_args args, org.apache.thrift.async.AsyncMethodCallback<NewsList> resultHandler) throws TException {
        iface.getNews(args.code, args.pageNum, args.newsCountPerpage, args.tp, args.codeType,resultHandler);
      }
    }

    public static class storeNews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeNews_args, Boolean> {
      public storeNews() {
        super("storeNews");
      }

      public storeNews_args getEmptyArgsInstance() {
        return new storeNews_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            storeNews_result result = new storeNews_result();
            result.success = o;
            result.set_success_isSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeNews_result result = new storeNews_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeNews_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.storeNews(args.title, args.newsDetail, args.publicDate, args.origin, args.isHeadline, args.url, args.summary, args.imageUrl, args.type,resultHandler);
      }
    }

    public static class getNewsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewsList_args, NewsList> {
      public getNewsList() {
        super("getNewsList");
      }

      public getNewsList_args getEmptyArgsInstance() {
        return new getNewsList_args();
      }

      public AsyncMethodCallback<NewsList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NewsList>() { 
          public void onComplete(NewsList o) {
            getNewsList_result result = new getNewsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewsList_result result = new getNewsList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewsList_args args, org.apache.thrift.async.AsyncMethodCallback<NewsList> resultHandler) throws TException {
        iface.getNewsList(args.startDate, args.newsType, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class getNewsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewsById_args, NewsList> {
      public getNewsById() {
        super("getNewsById");
      }

      public getNewsById_args getEmptyArgsInstance() {
        return new getNewsById_args();
      }

      public AsyncMethodCallback<NewsList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NewsList>() { 
          public void onComplete(NewsList o) {
            getNewsById_result result = new getNewsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewsById_result result = new getNewsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewsById_args args, org.apache.thrift.async.AsyncMethodCallback<NewsList> resultHandler) throws TException {
        iface.getNewsById(args.newsId,resultHandler);
      }
    }

    public static class getMarket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarket_args, MarketData> {
      public getMarket() {
        super("getMarket");
      }

      public getMarket_args getEmptyArgsInstance() {
        return new getMarket_args();
      }

      public AsyncMethodCallback<MarketData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MarketData>() { 
          public void onComplete(MarketData o) {
            getMarket_result result = new getMarket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMarket_result result = new getMarket_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarket_args args, org.apache.thrift.async.AsyncMethodCallback<MarketData> resultHandler) throws TException {
        iface.getMarket(args.rf, args.pf, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class getLeaders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLeaders_args, MarketData> {
      public getLeaders() {
        super("getLeaders");
      }

      public getLeaders_args getEmptyArgsInstance() {
        return new getLeaders_args();
      }

      public AsyncMethodCallback<MarketData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MarketData>() { 
          public void onComplete(MarketData o) {
            getLeaders_result result = new getLeaders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLeaders_result result = new getLeaders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLeaders_args args, org.apache.thrift.async.AsyncMethodCallback<MarketData> resultHandler) throws TException {
        iface.getLeaders(args.rf, args.pf, args.label, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class getRelationStocks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRelationStocks_args, MarketData> {
      public getRelationStocks() {
        super("getRelationStocks");
      }

      public getRelationStocks_args getEmptyArgsInstance() {
        return new getRelationStocks_args();
      }

      public AsyncMethodCallback<MarketData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MarketData>() { 
          public void onComplete(MarketData o) {
            getRelationStocks_result result = new getRelationStocks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRelationStocks_result result = new getRelationStocks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRelationStocks_args args, org.apache.thrift.async.AsyncMethodCallback<MarketData> resultHandler) throws TException {
        iface.getRelationStocks(args.rf, args.pf, args.code, args.total,resultHandler);
      }
    }

    public static class getCompanyProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyProfile_args, CompanyProfile> {
      public getCompanyProfile() {
        super("getCompanyProfile");
      }

      public getCompanyProfile_args getEmptyArgsInstance() {
        return new getCompanyProfile_args();
      }

      public AsyncMethodCallback<CompanyProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompanyProfile>() { 
          public void onComplete(CompanyProfile o) {
            getCompanyProfile_result result = new getCompanyProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCompanyProfile_result result = new getCompanyProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyProfile_args args, org.apache.thrift.async.AsyncMethodCallback<CompanyProfile> resultHandler) throws TException {
        iface.getCompanyProfile(args.code,resultHandler);
      }
    }

    public static class getShareholder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getShareholder_args, ShareholderInfo> {
      public getShareholder() {
        super("getShareholder");
      }

      public getShareholder_args getEmptyArgsInstance() {
        return new getShareholder_args();
      }

      public AsyncMethodCallback<ShareholderInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ShareholderInfo>() { 
          public void onComplete(ShareholderInfo o) {
            getShareholder_result result = new getShareholder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getShareholder_result result = new getShareholder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getShareholder_args args, org.apache.thrift.async.AsyncMethodCallback<ShareholderInfo> resultHandler) throws TException {
        iface.getShareholder(args.code,resultHandler);
      }
    }

    public static class getFunds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFunds_args, FundsData> {
      public getFunds() {
        super("getFunds");
      }

      public getFunds_args getEmptyArgsInstance() {
        return new getFunds_args();
      }

      public AsyncMethodCallback<FundsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FundsData>() { 
          public void onComplete(FundsData o) {
            getFunds_result result = new getFunds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFunds_result result = new getFunds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFunds_args args, org.apache.thrift.async.AsyncMethodCallback<FundsData> resultHandler) throws TException {
        iface.getFunds(args.code,resultHandler);
      }
    }

    public static class getMarginTrading<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginTrading_args, MarginTrading> {
      public getMarginTrading() {
        super("getMarginTrading");
      }

      public getMarginTrading_args getEmptyArgsInstance() {
        return new getMarginTrading_args();
      }

      public AsyncMethodCallback<MarginTrading> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MarginTrading>() { 
          public void onComplete(MarginTrading o) {
            getMarginTrading_result result = new getMarginTrading_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMarginTrading_result result = new getMarginTrading_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginTrading_args args, org.apache.thrift.async.AsyncMethodCallback<MarginTrading> resultHandler) throws TException {
        iface.getMarginTrading(args.code,resultHandler);
      }
    }

    public static class getFinancePerformance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinancePerformance_args, FinancePerformance> {
      public getFinancePerformance() {
        super("getFinancePerformance");
      }

      public getFinancePerformance_args getEmptyArgsInstance() {
        return new getFinancePerformance_args();
      }

      public AsyncMethodCallback<FinancePerformance> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinancePerformance>() { 
          public void onComplete(FinancePerformance o) {
            getFinancePerformance_result result = new getFinancePerformance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinancePerformance_result result = new getFinancePerformance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinancePerformance_args args, org.apache.thrift.async.AsyncMethodCallback<FinancePerformance> resultHandler) throws TException {
        iface.getFinancePerformance(args.code,resultHandler);
      }
    }

    public static class getFinanceAnalysis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceAnalysis_args, FinanceAnalysisData> {
      public getFinanceAnalysis() {
        super("getFinanceAnalysis");
      }

      public getFinanceAnalysis_args getEmptyArgsInstance() {
        return new getFinanceAnalysis_args();
      }

      public AsyncMethodCallback<FinanceAnalysisData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceAnalysisData>() { 
          public void onComplete(FinanceAnalysisData o) {
            getFinanceAnalysis_result result = new getFinanceAnalysis_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceAnalysis_result result = new getFinanceAnalysis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceAnalysis_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceAnalysisData> resultHandler) throws TException {
        iface.getFinanceAnalysis(args.code, args.year, args.quarterly,resultHandler);
      }
    }

    public static class getComponentStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComponentStock_args, BasicStockList> {
      public getComponentStock() {
        super("getComponentStock");
      }

      public getComponentStock_args getEmptyArgsInstance() {
        return new getComponentStock_args();
      }

      public AsyncMethodCallback<BasicStockList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BasicStockList>() { 
          public void onComplete(BasicStockList o) {
            getComponentStock_result result = new getComponentStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComponentStock_result result = new getComponentStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComponentStock_args args, org.apache.thrift.async.AsyncMethodCallback<BasicStockList> resultHandler) throws TException {
        iface.getComponentStock(args.code, args.rf, args.count,resultHandler);
      }
    }

  }

  public static class isTradeDate_args implements org.apache.thrift.TBase<isTradeDate_args, isTradeDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<isTradeDate_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTradeDate_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isTradeDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isTradeDate_argsTupleSchemeFactory());
    }


    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public isTradeDate_args(android.os.Parcel in) {
    }

    public static final android.os.Parcelable.Creator<isTradeDate_args> CREATOR = new android.os.Parcelable.Creator<isTradeDate_args>() {
      @Override
      public isTradeDate_args[] newArray(int size) {
        return new isTradeDate_args[size];
      }

      @Override
      public isTradeDate_args createFromParcel(android.os.Parcel in) {
        return new isTradeDate_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTradeDate_args.class, metaDataMap);
    }

    public isTradeDate_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isTradeDate_args(isTradeDate_args other) {
    }

    public isTradeDate_args deepCopy() {
      return new isTradeDate_args(this);
    }

    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isTradeDate_args)
        return this.equals((isTradeDate_args)that);
      return false;
    }

    public boolean equals(isTradeDate_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(isTradeDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isTradeDate_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class isTradeDate_argsStandardSchemeFactory implements SchemeFactory {
      public isTradeDate_argsStandardScheme getScheme() {
        return new isTradeDate_argsStandardScheme();
      }
    }

    private static class isTradeDate_argsStandardScheme extends StandardScheme<isTradeDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isTradeDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isTradeDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isTradeDate_argsTupleSchemeFactory implements SchemeFactory {
      public isTradeDate_argsTupleScheme getScheme() {
        return new isTradeDate_argsTupleScheme();
      }
    }

    private static class isTradeDate_argsTupleScheme extends TupleScheme<isTradeDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isTradeDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isTradeDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class isTradeDate_result implements org.apache.thrift.TBase<isTradeDate_result, isTradeDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<isTradeDate_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTradeDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isTradeDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isTradeDate_resultTupleSchemeFactory());
    }

    private boolean success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(success ? 1 : 0);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public isTradeDate_result(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.success = (in.readInt()==1);
    }

    public static final android.os.Parcelable.Creator<isTradeDate_result> CREATOR = new android.os.Parcelable.Creator<isTradeDate_result>() {
      @Override
      public isTradeDate_result[] newArray(int size) {
        return new isTradeDate_result[size];
      }

      @Override
      public isTradeDate_result createFromParcel(android.os.Parcel in) {
        return new isTradeDate_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTradeDate_result.class, metaDataMap);
    }

    public isTradeDate_result() {
    }

    public isTradeDate_result(
      boolean success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isTradeDate_result(isTradeDate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isTradeDate_result deepCopy() {
      return new isTradeDate_result(this);
    }

    public void clear() {
      set_success_isSet(false);
      this.success = false;
    }

    public boolean is_success() {
      return this.success;
    }

    public void set_success(boolean success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isTradeDate_result)
        return this.equals((isTradeDate_result)that);
      return false;
    }

    public boolean equals(isTradeDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isTradeDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isTradeDate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class isTradeDate_resultStandardSchemeFactory implements SchemeFactory {
      public isTradeDate_resultStandardScheme getScheme() {
        return new isTradeDate_resultStandardScheme();
      }
    }

    private static class isTradeDate_resultStandardScheme extends StandardScheme<isTradeDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isTradeDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isTradeDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.is_set_success()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isTradeDate_resultTupleSchemeFactory implements SchemeFactory {
      public isTradeDate_resultTupleScheme getScheme() {
        return new isTradeDate_resultTupleScheme();
      }
    }

    private static class isTradeDate_resultTupleScheme extends TupleScheme<isTradeDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isTradeDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isTradeDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getStock_args implements org.apache.thrift.TBase<getStock_args, getStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStock_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStock_args");

    private static final org.apache.thrift.protocol.TField SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("selection", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStock_argsTupleSchemeFactory());
    }

    private String selection; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(selection);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStock_args(android.os.Parcel in) {
      this.selection= in.readString();
    }

    public static final android.os.Parcelable.Creator<getStock_args> CREATOR = new android.os.Parcelable.Creator<getStock_args>() {
      @Override
      public getStock_args[] newArray(int size) {
        return new getStock_args[size];
      }

      @Override
      public getStock_args createFromParcel(android.os.Parcel in) {
        return new getStock_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECTION((short)1, "selection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECTION
            return SELECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECTION, new org.apache.thrift.meta_data.FieldMetaData("selection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStock_args.class, metaDataMap);
    }

    public getStock_args() {
    }

    public getStock_args(
      String selection)
    {
      this();
      this.selection = selection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStock_args(getStock_args other) {
      if (other.is_set_selection()) {
        this.selection = other.selection;
      }
    }

    public getStock_args deepCopy() {
      return new getStock_args(this);
    }

    public void clear() {
      this.selection = null;
    }

    public String get_selection() {
      return this.selection;
    }

    public void set_selection(String selection) {
      this.selection = selection;
    }

    public void unset_selection() {
      this.selection = null;
    }

    /** Returns true if field selection is set (has been assigned a value) and false otherwise */
    public boolean is_set_selection() {
      return this.selection != null;
    }

    public void set_selection_isSet(boolean value) {
      if (!value) {
        this.selection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECTION:
        if (value == null) {
          unset_selection();
        } else {
          set_selection((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECTION:
        return get_selection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECTION:
        return is_set_selection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStock_args)
        return this.equals((getStock_args)that);
      return false;
    }

    public boolean equals(getStock_args that) {
      if (that == null)
        return false;

      boolean this_present_selection = true && this.is_set_selection();
      boolean that_present_selection = true && that.is_set_selection();
      if (this_present_selection || that_present_selection) {
        if (!(this_present_selection && that_present_selection))
          return false;
        if (!this.selection.equals(that.selection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selection = true && (is_set_selection());
      list.add(present_selection);
      if (present_selection)
        list.add(selection);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_selection()).compareTo(other.is_set_selection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_selection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selection, other.selection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStock_args(");
      boolean first = true;

      sb.append("selection:");
      if (this.selection == null) {
        sb.append("null");
      } else {
        sb.append(this.selection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStock_argsStandardSchemeFactory implements SchemeFactory {
      public getStock_argsStandardScheme getScheme() {
        return new getStock_argsStandardScheme();
      }
    }

    private static class getStock_argsStandardScheme extends StandardScheme<getStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.selection = iprot.readString();
                struct.set_selection_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selection != null) {
          oprot.writeFieldBegin(SELECTION_FIELD_DESC);
          oprot.writeString(struct.selection);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStock_argsTupleSchemeFactory implements SchemeFactory {
      public getStock_argsTupleScheme getScheme() {
        return new getStock_argsTupleScheme();
      }
    }

    private static class getStock_argsTupleScheme extends TupleScheme<getStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_selection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_selection()) {
          oprot.writeString(struct.selection);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.selection = iprot.readString();
          struct.set_selection_isSet(true);
        }
      }
    }

  }

  public static class getStock_result implements org.apache.thrift.TBase<getStock_result, getStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStock_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStock_resultTupleSchemeFactory());
    }

    private StockList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStock_result(android.os.Parcel in) {
      this.success= in.readParcelable(getStock_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getStock_result> CREATOR = new android.os.Parcelable.Creator<getStock_result>() {
      @Override
      public getStock_result[] newArray(int size) {
        return new getStock_result[size];
      }

      @Override
      public getStock_result createFromParcel(android.os.Parcel in) {
        return new getStock_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStock_result.class, metaDataMap);
    }

    public getStock_result() {
    }

    public getStock_result(
      StockList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStock_result(getStock_result other) {
      if (other.is_set_success()) {
        this.success = new StockList(other.success);
      }
    }

    public getStock_result deepCopy() {
      return new getStock_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public StockList get_success() {
      return this.success;
    }

    public void set_success(StockList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((StockList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStock_result)
        return this.equals((getStock_result)that);
      return false;
    }

    public boolean equals(getStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStock_resultStandardSchemeFactory implements SchemeFactory {
      public getStock_resultStandardScheme getScheme() {
        return new getStock_resultStandardScheme();
      }
    }

    private static class getStock_resultStandardScheme extends StandardScheme<getStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new StockList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStock_resultTupleSchemeFactory implements SchemeFactory {
      public getStock_resultTupleScheme getScheme() {
        return new getStock_resultTupleScheme();
      }
    }

    private static class getStock_resultTupleScheme extends TupleScheme<getStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new StockList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class refreshStocks_args implements org.apache.thrift.TBase<refreshStocks_args, refreshStocks_args._Fields>, java.io.Serializable, Cloneable, Comparable<refreshStocks_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshStocks_args");

    private static final org.apache.thrift.protocol.TField CODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("codeList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshStocks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshStocks_argsTupleSchemeFactory());
    }

    private List<String> codeList; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(codeList);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public refreshStocks_args(android.os.Parcel in) {
      this.codeList = new ArrayList<String>();
      in.readList(this.codeList, refreshStocks_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<refreshStocks_args> CREATOR = new android.os.Parcelable.Creator<refreshStocks_args>() {
      @Override
      public refreshStocks_args[] newArray(int size) {
        return new refreshStocks_args[size];
      }

      @Override
      public refreshStocks_args createFromParcel(android.os.Parcel in) {
        return new refreshStocks_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE_LIST((short)1, "codeList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE_LIST
            return CODE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("codeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshStocks_args.class, metaDataMap);
    }

    public refreshStocks_args() {
    }

    public refreshStocks_args(
      List<String> codeList)
    {
      this();
      this.codeList = codeList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshStocks_args(refreshStocks_args other) {
      if (other.is_set_codeList()) {
        List<String> __this__codeList = new ArrayList<String>(other.codeList);
        this.codeList = __this__codeList;
      }
    }

    public refreshStocks_args deepCopy() {
      return new refreshStocks_args(this);
    }

    public void clear() {
      if (this.codeList != null) {
        this.codeList.clear();
      }
    }

    public int get_codeList_size() {
      return (this.codeList == null) ? 0 : this.codeList.size();
    }

    public java.util.Iterator<String> get_codeList_iterator() {
      return (this.codeList == null) ? null : this.codeList.iterator();
    }

    public void add_to_codeList(String elem) {
      if (this.codeList == null) {
        this.codeList = new ArrayList<String>();
      }
      this.codeList.add(elem);
    }

    public List<String> get_codeList() {
      return this.codeList;
    }

    public void set_codeList(List<String> codeList) {
      this.codeList = codeList;
    }

    public void unset_codeList() {
      this.codeList = null;
    }

    /** Returns true if field codeList is set (has been assigned a value) and false otherwise */
    public boolean is_set_codeList() {
      return this.codeList != null;
    }

    public void set_codeList_isSet(boolean value) {
      if (!value) {
        this.codeList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE_LIST:
        if (value == null) {
          unset_codeList();
        } else {
          set_codeList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE_LIST:
        return get_codeList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE_LIST:
        return is_set_codeList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshStocks_args)
        return this.equals((refreshStocks_args)that);
      return false;
    }

    public boolean equals(refreshStocks_args that) {
      if (that == null)
        return false;

      boolean this_present_codeList = true && this.is_set_codeList();
      boolean that_present_codeList = true && that.is_set_codeList();
      if (this_present_codeList || that_present_codeList) {
        if (!(this_present_codeList && that_present_codeList))
          return false;
        if (!this.codeList.equals(that.codeList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_codeList = true && (is_set_codeList());
      list.add(present_codeList);
      if (present_codeList)
        list.add(codeList);

      return list.hashCode();
    }

    @Override
    public int compareTo(refreshStocks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_codeList()).compareTo(other.is_set_codeList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_codeList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeList, other.codeList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshStocks_args(");
      boolean first = true;

      sb.append("codeList:");
      if (this.codeList == null) {
        sb.append("null");
      } else {
        sb.append(this.codeList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class refreshStocks_argsStandardSchemeFactory implements SchemeFactory {
      public refreshStocks_argsStandardScheme getScheme() {
        return new refreshStocks_argsStandardScheme();
      }
    }

    private static class refreshStocks_argsStandardScheme extends StandardScheme<refreshStocks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshStocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
                  if (struct.codeList == null) {
                    struct.codeList = new ArrayList<String>(_list558.size);
                  }
                  String _elem559 = null;
                  for (int _i560 = 0; _i560 < _list558.size; ++_i560)
                  {
                    _elem559 = iprot.readString();
                    struct.codeList.add(_elem559);
                  }
                  iprot.readListEnd();
                }
                struct.set_codeList_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshStocks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.codeList != null) {
          oprot.writeFieldBegin(CODE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.codeList.size()));
            for (String _iter561 : struct.codeList)
            {
              oprot.writeString(_iter561);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshStocks_argsTupleSchemeFactory implements SchemeFactory {
      public refreshStocks_argsTupleScheme getScheme() {
        return new refreshStocks_argsTupleScheme();
      }
    }

    private static class refreshStocks_argsTupleScheme extends TupleScheme<refreshStocks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_codeList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_codeList()) {
          {
            oprot.writeI32(struct.codeList.size());
            for (String _iter562 : struct.codeList)
            {
              oprot.writeString(_iter562);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.codeList == null) {
              struct.codeList = new ArrayList<String>(_list563.size);
            }
            String _elem564 = null;
            for (int _i565 = 0; _i565 < _list563.size; ++_i565)
            {
              _elem564 = iprot.readString();
              struct.codeList.add(_elem564);
            }
          }
          struct.set_codeList_isSet(true);
        }
      }
    }

  }

  public static class refreshStocks_result implements org.apache.thrift.TBase<refreshStocks_result, refreshStocks_result._Fields>, java.io.Serializable, Cloneable, Comparable<refreshStocks_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshStocks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshStocks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshStocks_resultTupleSchemeFactory());
    }

    private StockData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public refreshStocks_result(android.os.Parcel in) {
      this.success= in.readParcelable(refreshStocks_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<refreshStocks_result> CREATOR = new android.os.Parcelable.Creator<refreshStocks_result>() {
      @Override
      public refreshStocks_result[] newArray(int size) {
        return new refreshStocks_result[size];
      }

      @Override
      public refreshStocks_result createFromParcel(android.os.Parcel in) {
        return new refreshStocks_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshStocks_result.class, metaDataMap);
    }

    public refreshStocks_result() {
    }

    public refreshStocks_result(
      StockData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshStocks_result(refreshStocks_result other) {
      if (other.is_set_success()) {
        this.success = new StockData(other.success);
      }
    }

    public refreshStocks_result deepCopy() {
      return new refreshStocks_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public StockData get_success() {
      return this.success;
    }

    public void set_success(StockData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((StockData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshStocks_result)
        return this.equals((refreshStocks_result)that);
      return false;
    }

    public boolean equals(refreshStocks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(refreshStocks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshStocks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class refreshStocks_resultStandardSchemeFactory implements SchemeFactory {
      public refreshStocks_resultStandardScheme getScheme() {
        return new refreshStocks_resultStandardScheme();
      }
    }

    private static class refreshStocks_resultStandardScheme extends StandardScheme<refreshStocks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshStocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new StockData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshStocks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshStocks_resultTupleSchemeFactory implements SchemeFactory {
      public refreshStocks_resultTupleScheme getScheme() {
        return new refreshStocks_resultTupleScheme();
      }
    }

    private static class refreshStocks_resultTupleScheme extends TupleScheme<refreshStocks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new StockData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getStockKData_args implements org.apache.thrift.TBase<getStockKData_args, getStockKData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStockKData_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockKData_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("startMinute", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockKData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockKData_argsTupleSchemeFactory());
    }

    private String code; // required
    private KType type; // required
    private String startMinute; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
      out.writeInt(type.getValue());
      out.writeString(startMinute);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStockKData_args(android.os.Parcel in) {
      this.code= in.readString();
      this.type = KType.findByValue(in.readInt());
      this.startMinute= in.readString();
    }

    public static final android.os.Parcelable.Creator<getStockKData_args> CREATOR = new android.os.Parcelable.Creator<getStockKData_args>() {
      @Override
      public getStockKData_args[] newArray(int size) {
        return new getStockKData_args[size];
      }

      @Override
      public getStockKData_args createFromParcel(android.os.Parcel in) {
        return new getStockKData_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      /**
       * 
       * @see KType
       */
      TYPE((short)2, "type"),
      START_MINUTE((short)3, "startMinute");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // TYPE
            return TYPE;
          case 3: // START_MINUTE
            return START_MINUTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, KType.class)));
      tmpMap.put(_Fields.START_MINUTE, new org.apache.thrift.meta_data.FieldMetaData("startMinute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockKData_args.class, metaDataMap);
    }

    public getStockKData_args() {
    }

    public getStockKData_args(
      String code,
      KType type,
      String startMinute)
    {
      this();
      this.code = code;
      this.type = type;
      this.startMinute = startMinute;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockKData_args(getStockKData_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
      if (other.is_set_type()) {
        this.type = other.type;
      }
      if (other.is_set_startMinute()) {
        this.startMinute = other.startMinute;
      }
    }

    public getStockKData_args deepCopy() {
      return new getStockKData_args(this);
    }

    public void clear() {
      this.code = null;
      this.type = null;
      this.startMinute = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    /**
     * 
     * @see KType
     */
    public KType get_type() {
      return this.type;
    }

    /**
     * 
     * @see KType
     */
    public void set_type(KType type) {
      this.type = type;
    }

    public void unset_type() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean is_set_type() {
      return this.type != null;
    }

    public void set_type_isSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String get_startMinute() {
      return this.startMinute;
    }

    public void set_startMinute(String startMinute) {
      this.startMinute = startMinute;
    }

    public void unset_startMinute() {
      this.startMinute = null;
    }

    /** Returns true if field startMinute is set (has been assigned a value) and false otherwise */
    public boolean is_set_startMinute() {
      return this.startMinute != null;
    }

    public void set_startMinute_isSet(boolean value) {
      if (!value) {
        this.startMinute = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unset_type();
        } else {
          set_type((KType)value);
        }
        break;

      case START_MINUTE:
        if (value == null) {
          unset_startMinute();
        } else {
          set_startMinute((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      case TYPE:
        return get_type();

      case START_MINUTE:
        return get_startMinute();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      case TYPE:
        return is_set_type();
      case START_MINUTE:
        return is_set_startMinute();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockKData_args)
        return this.equals((getStockKData_args)that);
      return false;
    }

    public boolean equals(getStockKData_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_type = true && this.is_set_type();
      boolean that_present_type = true && that.is_set_type();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_startMinute = true && this.is_set_startMinute();
      boolean that_present_startMinute = true && that.is_set_startMinute();
      if (this_present_startMinute || that_present_startMinute) {
        if (!(this_present_startMinute && that_present_startMinute))
          return false;
        if (!this.startMinute.equals(that.startMinute))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_type = true && (is_set_type());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_startMinute = true && (is_set_startMinute());
      list.add(present_startMinute);
      if (present_startMinute)
        list.add(startMinute);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStockKData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_type()).compareTo(other.is_set_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_startMinute()).compareTo(other.is_set_startMinute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_startMinute()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMinute, other.startMinute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockKData_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startMinute:");
      if (this.startMinute == null) {
        sb.append("null");
      } else {
        sb.append(this.startMinute);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStockKData_argsStandardSchemeFactory implements SchemeFactory {
      public getStockKData_argsStandardScheme getScheme() {
        return new getStockKData_argsStandardScheme();
      }
    }

    private static class getStockKData_argsStandardScheme extends StandardScheme<getStockKData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockKData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.rjzd.aistock.api.KType.findByValue(iprot.readI32());
                struct.set_type_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_MINUTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startMinute = iprot.readString();
                struct.set_startMinute_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockKData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.startMinute != null) {
          oprot.writeFieldBegin(START_MINUTE_FIELD_DESC);
          oprot.writeString(struct.startMinute);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockKData_argsTupleSchemeFactory implements SchemeFactory {
      public getStockKData_argsTupleScheme getScheme() {
        return new getStockKData_argsTupleScheme();
      }
    }

    private static class getStockKData_argsTupleScheme extends TupleScheme<getStockKData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockKData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_code()) {
          optionals.set(0);
        }
        if (struct.is_set_type()) {
          optionals.set(1);
        }
        if (struct.is_set_startMinute()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
        if (struct.is_set_type()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.is_set_startMinute()) {
          oprot.writeString(struct.startMinute);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockKData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
        if (incoming.get(1)) {
          struct.type = com.rjzd.aistock.api.KType.findByValue(iprot.readI32());
          struct.set_type_isSet(true);
        }
        if (incoming.get(2)) {
          struct.startMinute = iprot.readString();
          struct.set_startMinute_isSet(true);
        }
      }
    }

  }

  public static class getStockKData_result implements org.apache.thrift.TBase<getStockKData_result, getStockKData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStockKData_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockKData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockKData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockKData_resultTupleSchemeFactory());
    }

    private KData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getStockKData_result(android.os.Parcel in) {
      this.success= in.readParcelable(getStockKData_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getStockKData_result> CREATOR = new android.os.Parcelable.Creator<getStockKData_result>() {
      @Override
      public getStockKData_result[] newArray(int size) {
        return new getStockKData_result[size];
      }

      @Override
      public getStockKData_result createFromParcel(android.os.Parcel in) {
        return new getStockKData_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockKData_result.class, metaDataMap);
    }

    public getStockKData_result() {
    }

    public getStockKData_result(
      KData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockKData_result(getStockKData_result other) {
      if (other.is_set_success()) {
        this.success = new KData(other.success);
      }
    }

    public getStockKData_result deepCopy() {
      return new getStockKData_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public KData get_success() {
      return this.success;
    }

    public void set_success(KData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((KData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockKData_result)
        return this.equals((getStockKData_result)that);
      return false;
    }

    public boolean equals(getStockKData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStockKData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockKData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getStockKData_resultStandardSchemeFactory implements SchemeFactory {
      public getStockKData_resultStandardScheme getScheme() {
        return new getStockKData_resultStandardScheme();
      }
    }

    private static class getStockKData_resultStandardScheme extends StandardScheme<getStockKData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockKData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new KData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockKData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockKData_resultTupleSchemeFactory implements SchemeFactory {
      public getStockKData_resultTupleScheme getScheme() {
        return new getStockKData_resultTupleScheme();
      }
    }

    private static class getStockKData_resultTupleScheme extends TupleScheme<getStockKData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockKData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockKData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new KData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getOptionalStocks_args implements org.apache.thrift.TBase<getOptionalStocks_args, getOptionalStocks_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOptionalStocks_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOptionalStocks_args");

    private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOptionalStocks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOptionalStocks_argsTupleSchemeFactory());
    }

    private Condition conditions; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(conditions, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOptionalStocks_args(android.os.Parcel in) {
      this.conditions= in.readParcelable(getOptionalStocks_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getOptionalStocks_args> CREATOR = new android.os.Parcelable.Creator<getOptionalStocks_args>() {
      @Override
      public getOptionalStocks_args[] newArray(int size) {
        return new getOptionalStocks_args[size];
      }

      @Override
      public getOptionalStocks_args createFromParcel(android.os.Parcel in) {
        return new getOptionalStocks_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITIONS((short)1, "conditions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITIONS
            return CONDITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Condition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOptionalStocks_args.class, metaDataMap);
    }

    public getOptionalStocks_args() {
    }

    public getOptionalStocks_args(
      Condition conditions)
    {
      this();
      this.conditions = conditions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOptionalStocks_args(getOptionalStocks_args other) {
      if (other.is_set_conditions()) {
        this.conditions = new Condition(other.conditions);
      }
    }

    public getOptionalStocks_args deepCopy() {
      return new getOptionalStocks_args(this);
    }

    public void clear() {
      if (this.conditions != null) {
        this.conditions.clear();
      }
    }

    public Condition get_conditions() {
      return this.conditions;
    }

    public void set_conditions(Condition conditions) {
      this.conditions = conditions;
    }

    public void unset_conditions() {
      this.conditions = null;
    }

    /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
    public boolean is_set_conditions() {
      return this.conditions != null;
    }

    public void set_conditions_isSet(boolean value) {
      if (!value) {
        this.conditions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITIONS:
        if (value == null) {
          unset_conditions();
        } else {
          set_conditions((Condition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITIONS:
        return get_conditions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITIONS:
        return is_set_conditions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOptionalStocks_args)
        return this.equals((getOptionalStocks_args)that);
      return false;
    }

    public boolean equals(getOptionalStocks_args that) {
      if (that == null)
        return false;

      boolean this_present_conditions = true && this.is_set_conditions();
      boolean that_present_conditions = true && that.is_set_conditions();
      if (this_present_conditions || that_present_conditions) {
        if (!(this_present_conditions && that_present_conditions))
          return false;
        if (!this.conditions.equals(that.conditions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_conditions = true && (is_set_conditions());
      list.add(present_conditions);
      if (present_conditions)
        list.add(conditions);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOptionalStocks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_conditions()).compareTo(other.is_set_conditions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_conditions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, other.conditions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOptionalStocks_args(");
      boolean first = true;

      sb.append("conditions:");
      if (this.conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.conditions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (conditions != null) {
        conditions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOptionalStocks_argsStandardSchemeFactory implements SchemeFactory {
      public getOptionalStocks_argsStandardScheme getScheme() {
        return new getOptionalStocks_argsStandardScheme();
      }
    }

    private static class getOptionalStocks_argsStandardScheme extends StandardScheme<getOptionalStocks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOptionalStocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.conditions == null) {
                  struct.conditions = new Condition();
                }
                struct.conditions.read(iprot);
                struct.set_conditions_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOptionalStocks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conditions != null) {
          oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
          struct.conditions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOptionalStocks_argsTupleSchemeFactory implements SchemeFactory {
      public getOptionalStocks_argsTupleScheme getScheme() {
        return new getOptionalStocks_argsTupleScheme();
      }
    }

    private static class getOptionalStocks_argsTupleScheme extends TupleScheme<getOptionalStocks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOptionalStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_conditions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_conditions()) {
          struct.conditions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOptionalStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.conditions == null) {
            struct.conditions = new Condition();
          }
          struct.conditions.read(iprot);
          struct.set_conditions_isSet(true);
        }
      }
    }

  }

  public static class getOptionalStocks_result implements org.apache.thrift.TBase<getOptionalStocks_result, getOptionalStocks_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOptionalStocks_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOptionalStocks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOptionalStocks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOptionalStocks_resultTupleSchemeFactory());
    }

    private FilterStockList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getOptionalStocks_result(android.os.Parcel in) {
      this.success= in.readParcelable(getOptionalStocks_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getOptionalStocks_result> CREATOR = new android.os.Parcelable.Creator<getOptionalStocks_result>() {
      @Override
      public getOptionalStocks_result[] newArray(int size) {
        return new getOptionalStocks_result[size];
      }

      @Override
      public getOptionalStocks_result createFromParcel(android.os.Parcel in) {
        return new getOptionalStocks_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterStockList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOptionalStocks_result.class, metaDataMap);
    }

    public getOptionalStocks_result() {
    }

    public getOptionalStocks_result(
      FilterStockList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOptionalStocks_result(getOptionalStocks_result other) {
      if (other.is_set_success()) {
        this.success = new FilterStockList(other.success);
      }
    }

    public getOptionalStocks_result deepCopy() {
      return new getOptionalStocks_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public FilterStockList get_success() {
      return this.success;
    }

    public void set_success(FilterStockList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((FilterStockList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOptionalStocks_result)
        return this.equals((getOptionalStocks_result)that);
      return false;
    }

    public boolean equals(getOptionalStocks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOptionalStocks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOptionalStocks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getOptionalStocks_resultStandardSchemeFactory implements SchemeFactory {
      public getOptionalStocks_resultStandardScheme getScheme() {
        return new getOptionalStocks_resultStandardScheme();
      }
    }

    private static class getOptionalStocks_resultStandardScheme extends StandardScheme<getOptionalStocks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOptionalStocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new FilterStockList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOptionalStocks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOptionalStocks_resultTupleSchemeFactory implements SchemeFactory {
      public getOptionalStocks_resultTupleScheme getScheme() {
        return new getOptionalStocks_resultTupleScheme();
      }
    }

    private static class getOptionalStocks_resultTupleScheme extends TupleScheme<getOptionalStocks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOptionalStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOptionalStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new FilterStockList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getNews_args implements org.apache.thrift.TBase<getNews_args, getNews_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNews_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNews_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NEWS_COUNT_PERPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("newsCountPerpage", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TP_FIELD_DESC = new org.apache.thrift.protocol.TField("tp", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("codeType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNews_argsTupleSchemeFactory());
    }

    private String code; // required
    private int pageNum; // required
    private int newsCountPerpage; // required
    private NewsType tp; // required
    private CodeType codeType; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(code);
      out.writeInt(pageNum);
      out.writeInt(newsCountPerpage);
      out.writeInt(tp.getValue());
      out.writeInt(codeType.getValue());
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNews_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.code= in.readString();
      this.pageNum = in.readInt();
      this.newsCountPerpage = in.readInt();
      this.tp = NewsType.findByValue(in.readInt());
      this.codeType = CodeType.findByValue(in.readInt());
    }

    public static final android.os.Parcelable.Creator<getNews_args> CREATOR = new android.os.Parcelable.Creator<getNews_args>() {
      @Override
      public getNews_args[] newArray(int size) {
        return new getNews_args[size];
      }

      @Override
      public getNews_args createFromParcel(android.os.Parcel in) {
        return new getNews_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      PAGE_NUM((short)2, "pageNum"),
      NEWS_COUNT_PERPAGE((short)3, "newsCountPerpage"),
      /**
       * 
       * @see NewsType
       */
      TP((short)4, "tp"),
      /**
       * 
       * @see CodeType
       */
      CODE_TYPE((short)5, "codeType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // NEWS_COUNT_PERPAGE
            return NEWS_COUNT_PERPAGE;
          case 4: // TP
            return TP;
          case 5: // CODE_TYPE
            return CODE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __NEWSCOUNTPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEWS_COUNT_PERPAGE, new org.apache.thrift.meta_data.FieldMetaData("newsCountPerpage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TP, new org.apache.thrift.meta_data.FieldMetaData("tp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NewsType.class)));
      tmpMap.put(_Fields.CODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("codeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CodeType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNews_args.class, metaDataMap);
    }

    public getNews_args() {
    }

    public getNews_args(
      String code,
      int pageNum,
      int newsCountPerpage,
      NewsType tp,
      CodeType codeType)
    {
      this();
      this.code = code;
      this.pageNum = pageNum;
      set_pageNum_isSet(true);
      this.newsCountPerpage = newsCountPerpage;
      set_newsCountPerpage_isSet(true);
      this.tp = tp;
      this.codeType = codeType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNews_args(getNews_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_code()) {
        this.code = other.code;
      }
      this.pageNum = other.pageNum;
      this.newsCountPerpage = other.newsCountPerpage;
      if (other.is_set_tp()) {
        this.tp = other.tp;
      }
      if (other.is_set_codeType()) {
        this.codeType = other.codeType;
      }
    }

    public getNews_args deepCopy() {
      return new getNews_args(this);
    }

    public void clear() {
      this.code = null;
      set_pageNum_isSet(false);
      this.pageNum = 0;
      set_newsCountPerpage_isSet(false);
      this.newsCountPerpage = 0;
      this.tp = null;
      this.codeType = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int get_pageNum() {
      return this.pageNum;
    }

    public void set_pageNum(int pageNum) {
      this.pageNum = pageNum;
      set_pageNum_isSet(true);
    }

    public void unset_pageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void set_pageNum_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int get_newsCountPerpage() {
      return this.newsCountPerpage;
    }

    public void set_newsCountPerpage(int newsCountPerpage) {
      this.newsCountPerpage = newsCountPerpage;
      set_newsCountPerpage_isSet(true);
    }

    public void unset_newsCountPerpage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSCOUNTPERPAGE_ISSET_ID);
    }

    /** Returns true if field newsCountPerpage is set (has been assigned a value) and false otherwise */
    public boolean is_set_newsCountPerpage() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSCOUNTPERPAGE_ISSET_ID);
    }

    public void set_newsCountPerpage_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSCOUNTPERPAGE_ISSET_ID, value);
    }

    /**
     * 
     * @see NewsType
     */
    public NewsType get_tp() {
      return this.tp;
    }

    /**
     * 
     * @see NewsType
     */
    public void set_tp(NewsType tp) {
      this.tp = tp;
    }

    public void unset_tp() {
      this.tp = null;
    }

    /** Returns true if field tp is set (has been assigned a value) and false otherwise */
    public boolean is_set_tp() {
      return this.tp != null;
    }

    public void set_tp_isSet(boolean value) {
      if (!value) {
        this.tp = null;
      }
    }

    /**
     * 
     * @see CodeType
     */
    public CodeType get_codeType() {
      return this.codeType;
    }

    /**
     * 
     * @see CodeType
     */
    public void set_codeType(CodeType codeType) {
      this.codeType = codeType;
    }

    public void unset_codeType() {
      this.codeType = null;
    }

    /** Returns true if field codeType is set (has been assigned a value) and false otherwise */
    public boolean is_set_codeType() {
      return this.codeType != null;
    }

    public void set_codeType_isSet(boolean value) {
      if (!value) {
        this.codeType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unset_pageNum();
        } else {
          set_pageNum((Integer)value);
        }
        break;

      case NEWS_COUNT_PERPAGE:
        if (value == null) {
          unset_newsCountPerpage();
        } else {
          set_newsCountPerpage((Integer)value);
        }
        break;

      case TP:
        if (value == null) {
          unset_tp();
        } else {
          set_tp((NewsType)value);
        }
        break;

      case CODE_TYPE:
        if (value == null) {
          unset_codeType();
        } else {
          set_codeType((CodeType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      case PAGE_NUM:
        return get_pageNum();

      case NEWS_COUNT_PERPAGE:
        return get_newsCountPerpage();

      case TP:
        return get_tp();

      case CODE_TYPE:
        return get_codeType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      case PAGE_NUM:
        return is_set_pageNum();
      case NEWS_COUNT_PERPAGE:
        return is_set_newsCountPerpage();
      case TP:
        return is_set_tp();
      case CODE_TYPE:
        return is_set_codeType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNews_args)
        return this.equals((getNews_args)that);
      return false;
    }

    public boolean equals(getNews_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_newsCountPerpage = true;
      boolean that_present_newsCountPerpage = true;
      if (this_present_newsCountPerpage || that_present_newsCountPerpage) {
        if (!(this_present_newsCountPerpage && that_present_newsCountPerpage))
          return false;
        if (this.newsCountPerpage != that.newsCountPerpage)
          return false;
      }

      boolean this_present_tp = true && this.is_set_tp();
      boolean that_present_tp = true && that.is_set_tp();
      if (this_present_tp || that_present_tp) {
        if (!(this_present_tp && that_present_tp))
          return false;
        if (!this.tp.equals(that.tp))
          return false;
      }

      boolean this_present_codeType = true && this.is_set_codeType();
      boolean that_present_codeType = true && that.is_set_codeType();
      if (this_present_codeType || that_present_codeType) {
        if (!(this_present_codeType && that_present_codeType))
          return false;
        if (!this.codeType.equals(that.codeType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_newsCountPerpage = true;
      list.add(present_newsCountPerpage);
      if (present_newsCountPerpage)
        list.add(newsCountPerpage);

      boolean present_tp = true && (is_set_tp());
      list.add(present_tp);
      if (present_tp)
        list.add(tp.getValue());

      boolean present_codeType = true && (is_set_codeType());
      list.add(present_codeType);
      if (present_codeType)
        list.add(codeType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getNews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNum()).compareTo(other.is_set_pageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_newsCountPerpage()).compareTo(other.is_set_newsCountPerpage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_newsCountPerpage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsCountPerpage, other.newsCountPerpage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_tp()).compareTo(other.is_set_tp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_tp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tp, other.tp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_codeType()).compareTo(other.is_set_codeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_codeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeType, other.codeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNews_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newsCountPerpage:");
      sb.append(this.newsCountPerpage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tp:");
      if (this.tp == null) {
        sb.append("null");
      } else {
        sb.append(this.tp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("codeType:");
      if (this.codeType == null) {
        sb.append("null");
      } else {
        sb.append(this.codeType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNews_argsStandardSchemeFactory implements SchemeFactory {
      public getNews_argsStandardScheme getScheme() {
        return new getNews_argsStandardScheme();
      }
    }

    private static class getNews_argsStandardScheme extends StandardScheme<getNews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.set_pageNum_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEWS_COUNT_PERPAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newsCountPerpage = iprot.readI32();
                struct.set_newsCountPerpage_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tp = com.rjzd.aistock.api.NewsType.findByValue(iprot.readI32());
                struct.set_tp_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.codeType = com.rjzd.aistock.api.CodeType.findByValue(iprot.readI32());
                struct.set_codeType_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEWS_COUNT_PERPAGE_FIELD_DESC);
        oprot.writeI32(struct.newsCountPerpage);
        oprot.writeFieldEnd();
        if (struct.tp != null) {
          oprot.writeFieldBegin(TP_FIELD_DESC);
          oprot.writeI32(struct.tp.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.codeType != null) {
          oprot.writeFieldBegin(CODE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.codeType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNews_argsTupleSchemeFactory implements SchemeFactory {
      public getNews_argsTupleScheme getScheme() {
        return new getNews_argsTupleScheme();
      }
    }

    private static class getNews_argsTupleScheme extends TupleScheme<getNews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_code()) {
          optionals.set(0);
        }
        if (struct.is_set_pageNum()) {
          optionals.set(1);
        }
        if (struct.is_set_newsCountPerpage()) {
          optionals.set(2);
        }
        if (struct.is_set_tp()) {
          optionals.set(3);
        }
        if (struct.is_set_codeType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
        if (struct.is_set_pageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.is_set_newsCountPerpage()) {
          oprot.writeI32(struct.newsCountPerpage);
        }
        if (struct.is_set_tp()) {
          oprot.writeI32(struct.tp.getValue());
        }
        if (struct.is_set_codeType()) {
          oprot.writeI32(struct.codeType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.set_pageNum_isSet(true);
        }
        if (incoming.get(2)) {
          struct.newsCountPerpage = iprot.readI32();
          struct.set_newsCountPerpage_isSet(true);
        }
        if (incoming.get(3)) {
          struct.tp = com.rjzd.aistock.api.NewsType.findByValue(iprot.readI32());
          struct.set_tp_isSet(true);
        }
        if (incoming.get(4)) {
          struct.codeType = com.rjzd.aistock.api.CodeType.findByValue(iprot.readI32());
          struct.set_codeType_isSet(true);
        }
      }
    }

  }

  public static class getNews_result implements org.apache.thrift.TBase<getNews_result, getNews_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNews_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNews_resultTupleSchemeFactory());
    }

    private NewsList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNews_result(android.os.Parcel in) {
      this.success= in.readParcelable(getNews_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getNews_result> CREATOR = new android.os.Parcelable.Creator<getNews_result>() {
      @Override
      public getNews_result[] newArray(int size) {
        return new getNews_result[size];
      }

      @Override
      public getNews_result createFromParcel(android.os.Parcel in) {
        return new getNews_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewsList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNews_result.class, metaDataMap);
    }

    public getNews_result() {
    }

    public getNews_result(
      NewsList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNews_result(getNews_result other) {
      if (other.is_set_success()) {
        this.success = new NewsList(other.success);
      }
    }

    public getNews_result deepCopy() {
      return new getNews_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public NewsList get_success() {
      return this.success;
    }

    public void set_success(NewsList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((NewsList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNews_result)
        return this.equals((getNews_result)that);
      return false;
    }

    public boolean equals(getNews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNews_resultStandardSchemeFactory implements SchemeFactory {
      public getNews_resultStandardScheme getScheme() {
        return new getNews_resultStandardScheme();
      }
    }

    private static class getNews_resultStandardScheme extends StandardScheme<getNews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new NewsList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNews_resultTupleSchemeFactory implements SchemeFactory {
      public getNews_resultTupleScheme getScheme() {
        return new getNews_resultTupleScheme();
      }
    }

    private static class getNews_resultTupleScheme extends TupleScheme<getNews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new NewsList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class storeNews_args implements org.apache.thrift.TBase<storeNews_args, storeNews_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeNews_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNews_args");

    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEWS_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("newsDetail", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PUBLIC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicDate", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField IS_HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isHeadline", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeNews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeNews_argsTupleSchemeFactory());
    }

    private String title; // required
    private String newsDetail; // required
    private String publicDate; // required
    private String origin; // required
    private boolean isHeadline; // required
    private String url; // required
    private String summary; // required
    private String imageUrl; // required
    private String type; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(title);
      out.writeString(newsDetail);
      out.writeString(publicDate);
      out.writeString(origin);
      out.writeInt(isHeadline ? 1 : 0);
      out.writeString(url);
      out.writeString(summary);
      out.writeString(imageUrl);
      out.writeString(type);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public storeNews_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.title= in.readString();
      this.newsDetail= in.readString();
      this.publicDate= in.readString();
      this.origin= in.readString();
      this.isHeadline = (in.readInt()==1);
      this.url= in.readString();
      this.summary= in.readString();
      this.imageUrl= in.readString();
      this.type= in.readString();
    }

    public static final android.os.Parcelable.Creator<storeNews_args> CREATOR = new android.os.Parcelable.Creator<storeNews_args>() {
      @Override
      public storeNews_args[] newArray(int size) {
        return new storeNews_args[size];
      }

      @Override
      public storeNews_args createFromParcel(android.os.Parcel in) {
        return new storeNews_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TITLE((short)1, "title"),
      NEWS_DETAIL((short)2, "newsDetail"),
      PUBLIC_DATE((short)3, "publicDate"),
      ORIGIN((short)4, "origin"),
      IS_HEADLINE((short)5, "isHeadline"),
      URL((short)6, "url"),
      SUMMARY((short)7, "summary"),
      IMAGE_URL((short)8, "imageUrl"),
      TYPE((short)9, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TITLE
            return TITLE;
          case 2: // NEWS_DETAIL
            return NEWS_DETAIL;
          case 3: // PUBLIC_DATE
            return PUBLIC_DATE;
          case 4: // ORIGIN
            return ORIGIN;
          case 5: // IS_HEADLINE
            return IS_HEADLINE;
          case 6: // URL
            return URL;
          case 7: // SUMMARY
            return SUMMARY;
          case 8: // IMAGE_URL
            return IMAGE_URL;
          case 9: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISHEADLINE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEWS_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("newsDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_DATE, new org.apache.thrift.meta_data.FieldMetaData("publicDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("isHeadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNews_args.class, metaDataMap);
    }

    public storeNews_args() {
    }

    public storeNews_args(
      String title,
      String newsDetail,
      String publicDate,
      String origin,
      boolean isHeadline,
      String url,
      String summary,
      String imageUrl,
      String type)
    {
      this();
      this.title = title;
      this.newsDetail = newsDetail;
      this.publicDate = publicDate;
      this.origin = origin;
      this.isHeadline = isHeadline;
      set_isHeadline_isSet(true);
      this.url = url;
      this.summary = summary;
      this.imageUrl = imageUrl;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNews_args(storeNews_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_title()) {
        this.title = other.title;
      }
      if (other.is_set_newsDetail()) {
        this.newsDetail = other.newsDetail;
      }
      if (other.is_set_publicDate()) {
        this.publicDate = other.publicDate;
      }
      if (other.is_set_origin()) {
        this.origin = other.origin;
      }
      this.isHeadline = other.isHeadline;
      if (other.is_set_url()) {
        this.url = other.url;
      }
      if (other.is_set_summary()) {
        this.summary = other.summary;
      }
      if (other.is_set_imageUrl()) {
        this.imageUrl = other.imageUrl;
      }
      if (other.is_set_type()) {
        this.type = other.type;
      }
    }

    public storeNews_args deepCopy() {
      return new storeNews_args(this);
    }

    public void clear() {
      this.title = null;
      this.newsDetail = null;
      this.publicDate = null;
      this.origin = null;
      set_isHeadline_isSet(false);
      this.isHeadline = false;
      this.url = null;
      this.summary = null;
      this.imageUrl = null;
      this.type = null;
    }

    public String get_title() {
      return this.title;
    }

    public void set_title(String title) {
      this.title = title;
    }

    public void unset_title() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean is_set_title() {
      return this.title != null;
    }

    public void set_title_isSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String get_newsDetail() {
      return this.newsDetail;
    }

    public void set_newsDetail(String newsDetail) {
      this.newsDetail = newsDetail;
    }

    public void unset_newsDetail() {
      this.newsDetail = null;
    }

    /** Returns true if field newsDetail is set (has been assigned a value) and false otherwise */
    public boolean is_set_newsDetail() {
      return this.newsDetail != null;
    }

    public void set_newsDetail_isSet(boolean value) {
      if (!value) {
        this.newsDetail = null;
      }
    }

    public String get_publicDate() {
      return this.publicDate;
    }

    public void set_publicDate(String publicDate) {
      this.publicDate = publicDate;
    }

    public void unset_publicDate() {
      this.publicDate = null;
    }

    /** Returns true if field publicDate is set (has been assigned a value) and false otherwise */
    public boolean is_set_publicDate() {
      return this.publicDate != null;
    }

    public void set_publicDate_isSet(boolean value) {
      if (!value) {
        this.publicDate = null;
      }
    }

    public String get_origin() {
      return this.origin;
    }

    public void set_origin(String origin) {
      this.origin = origin;
    }

    public void unset_origin() {
      this.origin = null;
    }

    /** Returns true if field origin is set (has been assigned a value) and false otherwise */
    public boolean is_set_origin() {
      return this.origin != null;
    }

    public void set_origin_isSet(boolean value) {
      if (!value) {
        this.origin = null;
      }
    }

    public boolean is_isHeadline() {
      return this.isHeadline;
    }

    public void set_isHeadline(boolean isHeadline) {
      this.isHeadline = isHeadline;
      set_isHeadline_isSet(true);
    }

    public void unset_isHeadline() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHEADLINE_ISSET_ID);
    }

    /** Returns true if field isHeadline is set (has been assigned a value) and false otherwise */
    public boolean is_set_isHeadline() {
      return EncodingUtils.testBit(__isset_bitfield, __ISHEADLINE_ISSET_ID);
    }

    public void set_isHeadline_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHEADLINE_ISSET_ID, value);
    }

    public String get_url() {
      return this.url;
    }

    public void set_url(String url) {
      this.url = url;
    }

    public void unset_url() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean is_set_url() {
      return this.url != null;
    }

    public void set_url_isSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public String get_summary() {
      return this.summary;
    }

    public void set_summary(String summary) {
      this.summary = summary;
    }

    public void unset_summary() {
      this.summary = null;
    }

    /** Returns true if field summary is set (has been assigned a value) and false otherwise */
    public boolean is_set_summary() {
      return this.summary != null;
    }

    public void set_summary_isSet(boolean value) {
      if (!value) {
        this.summary = null;
      }
    }

    public String get_imageUrl() {
      return this.imageUrl;
    }

    public void set_imageUrl(String imageUrl) {
      this.imageUrl = imageUrl;
    }

    public void unset_imageUrl() {
      this.imageUrl = null;
    }

    /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
    public boolean is_set_imageUrl() {
      return this.imageUrl != null;
    }

    public void set_imageUrl_isSet(boolean value) {
      if (!value) {
        this.imageUrl = null;
      }
    }

    public String get_type() {
      return this.type;
    }

    public void set_type(String type) {
      this.type = type;
    }

    public void unset_type() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean is_set_type() {
      return this.type != null;
    }

    public void set_type_isSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TITLE:
        if (value == null) {
          unset_title();
        } else {
          set_title((String)value);
        }
        break;

      case NEWS_DETAIL:
        if (value == null) {
          unset_newsDetail();
        } else {
          set_newsDetail((String)value);
        }
        break;

      case PUBLIC_DATE:
        if (value == null) {
          unset_publicDate();
        } else {
          set_publicDate((String)value);
        }
        break;

      case ORIGIN:
        if (value == null) {
          unset_origin();
        } else {
          set_origin((String)value);
        }
        break;

      case IS_HEADLINE:
        if (value == null) {
          unset_isHeadline();
        } else {
          set_isHeadline((Boolean)value);
        }
        break;

      case URL:
        if (value == null) {
          unset_url();
        } else {
          set_url((String)value);
        }
        break;

      case SUMMARY:
        if (value == null) {
          unset_summary();
        } else {
          set_summary((String)value);
        }
        break;

      case IMAGE_URL:
        if (value == null) {
          unset_imageUrl();
        } else {
          set_imageUrl((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unset_type();
        } else {
          set_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TITLE:
        return get_title();

      case NEWS_DETAIL:
        return get_newsDetail();

      case PUBLIC_DATE:
        return get_publicDate();

      case ORIGIN:
        return get_origin();

      case IS_HEADLINE:
        return is_isHeadline();

      case URL:
        return get_url();

      case SUMMARY:
        return get_summary();

      case IMAGE_URL:
        return get_imageUrl();

      case TYPE:
        return get_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TITLE:
        return is_set_title();
      case NEWS_DETAIL:
        return is_set_newsDetail();
      case PUBLIC_DATE:
        return is_set_publicDate();
      case ORIGIN:
        return is_set_origin();
      case IS_HEADLINE:
        return is_set_isHeadline();
      case URL:
        return is_set_url();
      case SUMMARY:
        return is_set_summary();
      case IMAGE_URL:
        return is_set_imageUrl();
      case TYPE:
        return is_set_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNews_args)
        return this.equals((storeNews_args)that);
      return false;
    }

    public boolean equals(storeNews_args that) {
      if (that == null)
        return false;

      boolean this_present_title = true && this.is_set_title();
      boolean that_present_title = true && that.is_set_title();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_newsDetail = true && this.is_set_newsDetail();
      boolean that_present_newsDetail = true && that.is_set_newsDetail();
      if (this_present_newsDetail || that_present_newsDetail) {
        if (!(this_present_newsDetail && that_present_newsDetail))
          return false;
        if (!this.newsDetail.equals(that.newsDetail))
          return false;
      }

      boolean this_present_publicDate = true && this.is_set_publicDate();
      boolean that_present_publicDate = true && that.is_set_publicDate();
      if (this_present_publicDate || that_present_publicDate) {
        if (!(this_present_publicDate && that_present_publicDate))
          return false;
        if (!this.publicDate.equals(that.publicDate))
          return false;
      }

      boolean this_present_origin = true && this.is_set_origin();
      boolean that_present_origin = true && that.is_set_origin();
      if (this_present_origin || that_present_origin) {
        if (!(this_present_origin && that_present_origin))
          return false;
        if (!this.origin.equals(that.origin))
          return false;
      }

      boolean this_present_isHeadline = true;
      boolean that_present_isHeadline = true;
      if (this_present_isHeadline || that_present_isHeadline) {
        if (!(this_present_isHeadline && that_present_isHeadline))
          return false;
        if (this.isHeadline != that.isHeadline)
          return false;
      }

      boolean this_present_url = true && this.is_set_url();
      boolean that_present_url = true && that.is_set_url();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_summary = true && this.is_set_summary();
      boolean that_present_summary = true && that.is_set_summary();
      if (this_present_summary || that_present_summary) {
        if (!(this_present_summary && that_present_summary))
          return false;
        if (!this.summary.equals(that.summary))
          return false;
      }

      boolean this_present_imageUrl = true && this.is_set_imageUrl();
      boolean that_present_imageUrl = true && that.is_set_imageUrl();
      if (this_present_imageUrl || that_present_imageUrl) {
        if (!(this_present_imageUrl && that_present_imageUrl))
          return false;
        if (!this.imageUrl.equals(that.imageUrl))
          return false;
      }

      boolean this_present_type = true && this.is_set_type();
      boolean that_present_type = true && that.is_set_type();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_title = true && (is_set_title());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_newsDetail = true && (is_set_newsDetail());
      list.add(present_newsDetail);
      if (present_newsDetail)
        list.add(newsDetail);

      boolean present_publicDate = true && (is_set_publicDate());
      list.add(present_publicDate);
      if (present_publicDate)
        list.add(publicDate);

      boolean present_origin = true && (is_set_origin());
      list.add(present_origin);
      if (present_origin)
        list.add(origin);

      boolean present_isHeadline = true;
      list.add(present_isHeadline);
      if (present_isHeadline)
        list.add(isHeadline);

      boolean present_url = true && (is_set_url());
      list.add(present_url);
      if (present_url)
        list.add(url);

      boolean present_summary = true && (is_set_summary());
      list.add(present_summary);
      if (present_summary)
        list.add(summary);

      boolean present_imageUrl = true && (is_set_imageUrl());
      list.add(present_imageUrl);
      if (present_imageUrl)
        list.add(imageUrl);

      boolean present_type = true && (is_set_type());
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeNews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_title()).compareTo(other.is_set_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_newsDetail()).compareTo(other.is_set_newsDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_newsDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsDetail, other.newsDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_publicDate()).compareTo(other.is_set_publicDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_publicDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicDate, other.publicDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_origin()).compareTo(other.is_set_origin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_origin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_isHeadline()).compareTo(other.is_set_isHeadline());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_isHeadline()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHeadline, other.isHeadline);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_url()).compareTo(other.is_set_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_summary()).compareTo(other.is_set_summary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_summary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_imageUrl()).compareTo(other.is_set_imageUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_imageUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_type()).compareTo(other.is_set_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeNews_args(");
      boolean first = true;

      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newsDetail:");
      if (this.newsDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.newsDetail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicDate:");
      if (this.publicDate == null) {
        sb.append("null");
      } else {
        sb.append(this.publicDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("origin:");
      if (this.origin == null) {
        sb.append("null");
      } else {
        sb.append(this.origin);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isHeadline:");
      sb.append(this.isHeadline);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("summary:");
      if (this.summary == null) {
        sb.append("null");
      } else {
        sb.append(this.summary);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class storeNews_argsStandardSchemeFactory implements SchemeFactory {
      public storeNews_argsStandardScheme getScheme() {
        return new storeNews_argsStandardScheme();
      }
    }

    private static class storeNews_argsStandardScheme extends StandardScheme<storeNews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.set_title_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEWS_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newsDetail = iprot.readString();
                struct.set_newsDetail_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PUBLIC_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.publicDate = iprot.readString();
                struct.set_publicDate_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORIGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.origin = iprot.readString();
                struct.set_origin_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IS_HEADLINE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isHeadline = iprot.readBool();
                struct.set_isHeadline_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.set_url_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUMMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.summary = iprot.readString();
                struct.set_summary_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IMAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageUrl = iprot.readString();
                struct.set_imageUrl_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.set_type_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.newsDetail != null) {
          oprot.writeFieldBegin(NEWS_DETAIL_FIELD_DESC);
          oprot.writeString(struct.newsDetail);
          oprot.writeFieldEnd();
        }
        if (struct.publicDate != null) {
          oprot.writeFieldBegin(PUBLIC_DATE_FIELD_DESC);
          oprot.writeString(struct.publicDate);
          oprot.writeFieldEnd();
        }
        if (struct.origin != null) {
          oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
          oprot.writeString(struct.origin);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_HEADLINE_FIELD_DESC);
        oprot.writeBool(struct.isHeadline);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.summary != null) {
          oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
          oprot.writeString(struct.summary);
          oprot.writeFieldEnd();
        }
        if (struct.imageUrl != null) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNews_argsTupleSchemeFactory implements SchemeFactory {
      public storeNews_argsTupleScheme getScheme() {
        return new storeNews_argsTupleScheme();
      }
    }

    private static class storeNews_argsTupleScheme extends TupleScheme<storeNews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_title()) {
          optionals.set(0);
        }
        if (struct.is_set_newsDetail()) {
          optionals.set(1);
        }
        if (struct.is_set_publicDate()) {
          optionals.set(2);
        }
        if (struct.is_set_origin()) {
          optionals.set(3);
        }
        if (struct.is_set_isHeadline()) {
          optionals.set(4);
        }
        if (struct.is_set_url()) {
          optionals.set(5);
        }
        if (struct.is_set_summary()) {
          optionals.set(6);
        }
        if (struct.is_set_imageUrl()) {
          optionals.set(7);
        }
        if (struct.is_set_type()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.is_set_title()) {
          oprot.writeString(struct.title);
        }
        if (struct.is_set_newsDetail()) {
          oprot.writeString(struct.newsDetail);
        }
        if (struct.is_set_publicDate()) {
          oprot.writeString(struct.publicDate);
        }
        if (struct.is_set_origin()) {
          oprot.writeString(struct.origin);
        }
        if (struct.is_set_isHeadline()) {
          oprot.writeBool(struct.isHeadline);
        }
        if (struct.is_set_url()) {
          oprot.writeString(struct.url);
        }
        if (struct.is_set_summary()) {
          oprot.writeString(struct.summary);
        }
        if (struct.is_set_imageUrl()) {
          oprot.writeString(struct.imageUrl);
        }
        if (struct.is_set_type()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.title = iprot.readString();
          struct.set_title_isSet(true);
        }
        if (incoming.get(1)) {
          struct.newsDetail = iprot.readString();
          struct.set_newsDetail_isSet(true);
        }
        if (incoming.get(2)) {
          struct.publicDate = iprot.readString();
          struct.set_publicDate_isSet(true);
        }
        if (incoming.get(3)) {
          struct.origin = iprot.readString();
          struct.set_origin_isSet(true);
        }
        if (incoming.get(4)) {
          struct.isHeadline = iprot.readBool();
          struct.set_isHeadline_isSet(true);
        }
        if (incoming.get(5)) {
          struct.url = iprot.readString();
          struct.set_url_isSet(true);
        }
        if (incoming.get(6)) {
          struct.summary = iprot.readString();
          struct.set_summary_isSet(true);
        }
        if (incoming.get(7)) {
          struct.imageUrl = iprot.readString();
          struct.set_imageUrl_isSet(true);
        }
        if (incoming.get(8)) {
          struct.type = iprot.readString();
          struct.set_type_isSet(true);
        }
      }
    }

  }

  public static class storeNews_result implements org.apache.thrift.TBase<storeNews_result, storeNews_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeNews_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeNews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeNews_resultTupleSchemeFactory());
    }

    private boolean success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(success ? 1 : 0);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public storeNews_result(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.success = (in.readInt()==1);
    }

    public static final android.os.Parcelable.Creator<storeNews_result> CREATOR = new android.os.Parcelable.Creator<storeNews_result>() {
      @Override
      public storeNews_result[] newArray(int size) {
        return new storeNews_result[size];
      }

      @Override
      public storeNews_result createFromParcel(android.os.Parcel in) {
        return new storeNews_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNews_result.class, metaDataMap);
    }

    public storeNews_result() {
    }

    public storeNews_result(
      boolean success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNews_result(storeNews_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public storeNews_result deepCopy() {
      return new storeNews_result(this);
    }

    public void clear() {
      set_success_isSet(false);
      this.success = false;
    }

    public boolean is_success() {
      return this.success;
    }

    public void set_success(boolean success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNews_result)
        return this.equals((storeNews_result)that);
      return false;
    }

    public boolean equals(storeNews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeNews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeNews_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class storeNews_resultStandardSchemeFactory implements SchemeFactory {
      public storeNews_resultStandardScheme getScheme() {
        return new storeNews_resultStandardScheme();
      }
    }

    private static class storeNews_resultStandardScheme extends StandardScheme<storeNews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.is_set_success()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNews_resultTupleSchemeFactory implements SchemeFactory {
      public storeNews_resultTupleScheme getScheme() {
        return new storeNews_resultTupleScheme();
      }
    }

    private static class storeNews_resultTupleScheme extends TupleScheme<storeNews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getNewsList_args implements org.apache.thrift.TBase<getNewsList_args, getNewsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsList_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsList_args");

    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEWS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("newsType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsList_argsTupleSchemeFactory());
    }

    private String startDate; // required
    private String newsType; // required
    private int pageNo; // required
    private int pageSize; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(startDate);
      out.writeString(newsType);
      out.writeInt(pageNo);
      out.writeInt(pageSize);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNewsList_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.startDate= in.readString();
      this.newsType= in.readString();
      this.pageNo = in.readInt();
      this.pageSize = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getNewsList_args> CREATOR = new android.os.Parcelable.Creator<getNewsList_args>() {
      @Override
      public getNewsList_args[] newArray(int size) {
        return new getNewsList_args[size];
      }

      @Override
      public getNewsList_args createFromParcel(android.os.Parcel in) {
        return new getNewsList_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_DATE((short)1, "startDate"),
      NEWS_TYPE((short)2, "newsType"),
      PAGE_NO((short)3, "pageNo"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_DATE
            return START_DATE;
          case 2: // NEWS_TYPE
            return NEWS_TYPE;
          case 3: // PAGE_NO
            return PAGE_NO;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEWS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("newsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsList_args.class, metaDataMap);
    }

    public getNewsList_args() {
    }

    public getNewsList_args(
      String startDate,
      String newsType,
      int pageNo,
      int pageSize)
    {
      this();
      this.startDate = startDate;
      this.newsType = newsType;
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsList_args(getNewsList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_startDate()) {
        this.startDate = other.startDate;
      }
      if (other.is_set_newsType()) {
        this.newsType = other.newsType;
      }
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public getNewsList_args deepCopy() {
      return new getNewsList_args(this);
    }

    public void clear() {
      this.startDate = null;
      this.newsType = null;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_pageSize_isSet(false);
      this.pageSize = 0;
    }

    public String get_startDate() {
      return this.startDate;
    }

    public void set_startDate(String startDate) {
      this.startDate = startDate;
    }

    public void unset_startDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean is_set_startDate() {
      return this.startDate != null;
    }

    public void set_startDate_isSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    public String get_newsType() {
      return this.newsType;
    }

    public void set_newsType(String newsType) {
      this.newsType = newsType;
    }

    public void unset_newsType() {
      this.newsType = null;
    }

    /** Returns true if field newsType is set (has been assigned a value) and false otherwise */
    public boolean is_set_newsType() {
      return this.newsType != null;
    }

    public void set_newsType_isSet(boolean value) {
      if (!value) {
        this.newsType = null;
      }
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_pageSize() {
      return this.pageSize;
    }

    public void set_pageSize(int pageSize) {
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    public void unset_pageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void set_pageSize_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_DATE:
        if (value == null) {
          unset_startDate();
        } else {
          set_startDate((String)value);
        }
        break;

      case NEWS_TYPE:
        if (value == null) {
          unset_newsType();
        } else {
          set_newsType((String)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unset_pageSize();
        } else {
          set_pageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_DATE:
        return get_startDate();

      case NEWS_TYPE:
        return get_newsType();

      case PAGE_NO:
        return get_pageNo();

      case PAGE_SIZE:
        return get_pageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_DATE:
        return is_set_startDate();
      case NEWS_TYPE:
        return is_set_newsType();
      case PAGE_NO:
        return is_set_pageNo();
      case PAGE_SIZE:
        return is_set_pageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsList_args)
        return this.equals((getNewsList_args)that);
      return false;
    }

    public boolean equals(getNewsList_args that) {
      if (that == null)
        return false;

      boolean this_present_startDate = true && this.is_set_startDate();
      boolean that_present_startDate = true && that.is_set_startDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      boolean this_present_newsType = true && this.is_set_newsType();
      boolean that_present_newsType = true && that.is_set_newsType();
      if (this_present_newsType || that_present_newsType) {
        if (!(this_present_newsType && that_present_newsType))
          return false;
        if (!this.newsType.equals(that.newsType))
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startDate = true && (is_set_startDate());
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_newsType = true && (is_set_newsType());
      list.add(present_newsType);
      if (present_newsType)
        list.add(newsType);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_startDate()).compareTo(other.is_set_startDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_startDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_newsType()).compareTo(other.is_set_newsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_newsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsType, other.newsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageSize()).compareTo(other.is_set_pageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsList_args(");
      boolean first = true;

      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newsType:");
      if (this.newsType == null) {
        sb.append("null");
      } else {
        sb.append(this.newsType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNewsList_argsStandardSchemeFactory implements SchemeFactory {
      public getNewsList_argsStandardScheme getScheme() {
        return new getNewsList_argsStandardScheme();
      }
    }

    private static class getNewsList_argsStandardScheme extends StandardScheme<getNewsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.set_startDate_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEWS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newsType = iprot.readString();
                struct.set_newsType_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.set_pageSize_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        if (struct.newsType != null) {
          oprot.writeFieldBegin(NEWS_TYPE_FIELD_DESC);
          oprot.writeString(struct.newsType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsList_argsTupleSchemeFactory implements SchemeFactory {
      public getNewsList_argsTupleScheme getScheme() {
        return new getNewsList_argsTupleScheme();
      }
    }

    private static class getNewsList_argsTupleScheme extends TupleScheme<getNewsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_startDate()) {
          optionals.set(0);
        }
        if (struct.is_set_newsType()) {
          optionals.set(1);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(2);
        }
        if (struct.is_set_pageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.is_set_startDate()) {
          oprot.writeString(struct.startDate);
        }
        if (struct.is_set_newsType()) {
          oprot.writeString(struct.newsType);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_pageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.startDate = iprot.readString();
          struct.set_startDate_isSet(true);
        }
        if (incoming.get(1)) {
          struct.newsType = iprot.readString();
          struct.set_newsType_isSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.set_pageSize_isSet(true);
        }
      }
    }

  }

  public static class getNewsList_result implements org.apache.thrift.TBase<getNewsList_result, getNewsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsList_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsList_resultTupleSchemeFactory());
    }

    private NewsList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNewsList_result(android.os.Parcel in) {
      this.success= in.readParcelable(getNewsList_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getNewsList_result> CREATOR = new android.os.Parcelable.Creator<getNewsList_result>() {
      @Override
      public getNewsList_result[] newArray(int size) {
        return new getNewsList_result[size];
      }

      @Override
      public getNewsList_result createFromParcel(android.os.Parcel in) {
        return new getNewsList_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewsList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsList_result.class, metaDataMap);
    }

    public getNewsList_result() {
    }

    public getNewsList_result(
      NewsList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsList_result(getNewsList_result other) {
      if (other.is_set_success()) {
        this.success = new NewsList(other.success);
      }
    }

    public getNewsList_result deepCopy() {
      return new getNewsList_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public NewsList get_success() {
      return this.success;
    }

    public void set_success(NewsList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((NewsList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsList_result)
        return this.equals((getNewsList_result)that);
      return false;
    }

    public boolean equals(getNewsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNewsList_resultStandardSchemeFactory implements SchemeFactory {
      public getNewsList_resultStandardScheme getScheme() {
        return new getNewsList_resultStandardScheme();
      }
    }

    private static class getNewsList_resultStandardScheme extends StandardScheme<getNewsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new NewsList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsList_resultTupleSchemeFactory implements SchemeFactory {
      public getNewsList_resultTupleScheme getScheme() {
        return new getNewsList_resultTupleScheme();
      }
    }

    private static class getNewsList_resultTupleScheme extends TupleScheme<getNewsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new NewsList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getNewsById_args implements org.apache.thrift.TBase<getNewsById_args, getNewsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsById_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsById_args");

    private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsById_argsTupleSchemeFactory());
    }

    private String newsId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(newsId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNewsById_args(android.os.Parcel in) {
      this.newsId= in.readString();
    }

    public static final android.os.Parcelable.Creator<getNewsById_args> CREATOR = new android.os.Parcelable.Creator<getNewsById_args>() {
      @Override
      public getNewsById_args[] newArray(int size) {
        return new getNewsById_args[size];
      }

      @Override
      public getNewsById_args createFromParcel(android.os.Parcel in) {
        return new getNewsById_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEWS_ID((short)1, "newsId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEWS_ID
            return NEWS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsById_args.class, metaDataMap);
    }

    public getNewsById_args() {
    }

    public getNewsById_args(
      String newsId)
    {
      this();
      this.newsId = newsId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsById_args(getNewsById_args other) {
      if (other.is_set_newsId()) {
        this.newsId = other.newsId;
      }
    }

    public getNewsById_args deepCopy() {
      return new getNewsById_args(this);
    }

    public void clear() {
      this.newsId = null;
    }

    public String get_newsId() {
      return this.newsId;
    }

    public void set_newsId(String newsId) {
      this.newsId = newsId;
    }

    public void unset_newsId() {
      this.newsId = null;
    }

    /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
    public boolean is_set_newsId() {
      return this.newsId != null;
    }

    public void set_newsId_isSet(boolean value) {
      if (!value) {
        this.newsId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEWS_ID:
        if (value == null) {
          unset_newsId();
        } else {
          set_newsId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEWS_ID:
        return get_newsId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEWS_ID:
        return is_set_newsId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsById_args)
        return this.equals((getNewsById_args)that);
      return false;
    }

    public boolean equals(getNewsById_args that) {
      if (that == null)
        return false;

      boolean this_present_newsId = true && this.is_set_newsId();
      boolean that_present_newsId = true && that.is_set_newsId();
      if (this_present_newsId || that_present_newsId) {
        if (!(this_present_newsId && that_present_newsId))
          return false;
        if (!this.newsId.equals(that.newsId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newsId = true && (is_set_newsId());
      list.add(present_newsId);
      if (present_newsId)
        list.add(newsId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_newsId()).compareTo(other.is_set_newsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_newsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsById_args(");
      boolean first = true;

      sb.append("newsId:");
      if (this.newsId == null) {
        sb.append("null");
      } else {
        sb.append(this.newsId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNewsById_argsStandardSchemeFactory implements SchemeFactory {
      public getNewsById_argsStandardScheme getScheme() {
        return new getNewsById_argsStandardScheme();
      }
    }

    private static class getNewsById_argsStandardScheme extends StandardScheme<getNewsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEWS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newsId = iprot.readString();
                struct.set_newsId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newsId != null) {
          oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
          oprot.writeString(struct.newsId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsById_argsTupleSchemeFactory implements SchemeFactory {
      public getNewsById_argsTupleScheme getScheme() {
        return new getNewsById_argsTupleScheme();
      }
    }

    private static class getNewsById_argsTupleScheme extends TupleScheme<getNewsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_newsId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_newsId()) {
          oprot.writeString(struct.newsId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newsId = iprot.readString();
          struct.set_newsId_isSet(true);
        }
      }
    }

  }

  public static class getNewsById_result implements org.apache.thrift.TBase<getNewsById_result, getNewsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsById_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsById_resultTupleSchemeFactory());
    }

    private NewsList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getNewsById_result(android.os.Parcel in) {
      this.success= in.readParcelable(getNewsById_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getNewsById_result> CREATOR = new android.os.Parcelable.Creator<getNewsById_result>() {
      @Override
      public getNewsById_result[] newArray(int size) {
        return new getNewsById_result[size];
      }

      @Override
      public getNewsById_result createFromParcel(android.os.Parcel in) {
        return new getNewsById_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewsList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsById_result.class, metaDataMap);
    }

    public getNewsById_result() {
    }

    public getNewsById_result(
      NewsList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsById_result(getNewsById_result other) {
      if (other.is_set_success()) {
        this.success = new NewsList(other.success);
      }
    }

    public getNewsById_result deepCopy() {
      return new getNewsById_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public NewsList get_success() {
      return this.success;
    }

    public void set_success(NewsList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((NewsList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsById_result)
        return this.equals((getNewsById_result)that);
      return false;
    }

    public boolean equals(getNewsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getNewsById_resultStandardSchemeFactory implements SchemeFactory {
      public getNewsById_resultStandardScheme getScheme() {
        return new getNewsById_resultStandardScheme();
      }
    }

    private static class getNewsById_resultStandardScheme extends StandardScheme<getNewsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new NewsList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsById_resultTupleSchemeFactory implements SchemeFactory {
      public getNewsById_resultTupleScheme getScheme() {
        return new getNewsById_resultTupleScheme();
      }
    }

    private static class getNewsById_resultTupleScheme extends TupleScheme<getNewsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new NewsList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getMarket_args implements org.apache.thrift.TBase<getMarket_args, getMarket_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarket_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarket_args");

    private static final org.apache.thrift.protocol.TField RF_FIELD_DESC = new org.apache.thrift.protocol.TField("rf", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PF_FIELD_DESC = new org.apache.thrift.protocol.TField("pf", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMarket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMarket_argsTupleSchemeFactory());
    }

    private RangeFlag rf; // required
    private PlateFlag pf; // required
    private int pageNo; // required
    private int pageSize; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(rf.getValue());
      out.writeInt(pf.getValue());
      out.writeInt(pageNo);
      out.writeInt(pageSize);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMarket_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.rf = RangeFlag.findByValue(in.readInt());
      this.pf = PlateFlag.findByValue(in.readInt());
      this.pageNo = in.readInt();
      this.pageSize = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getMarket_args> CREATOR = new android.os.Parcelable.Creator<getMarket_args>() {
      @Override
      public getMarket_args[] newArray(int size) {
        return new getMarket_args[size];
      }

      @Override
      public getMarket_args createFromParcel(android.os.Parcel in) {
        return new getMarket_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see RangeFlag
       */
      RF((short)1, "rf"),
      /**
       * 
       * @see PlateFlag
       */
      PF((short)2, "pf"),
      PAGE_NO((short)3, "pageNo"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RF
            return RF;
          case 2: // PF
            return PF;
          case 3: // PAGE_NO
            return PAGE_NO;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RF, new org.apache.thrift.meta_data.FieldMetaData("rf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RangeFlag.class)));
      tmpMap.put(_Fields.PF, new org.apache.thrift.meta_data.FieldMetaData("pf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlateFlag.class)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarket_args.class, metaDataMap);
    }

    public getMarket_args() {
    }

    public getMarket_args(
      RangeFlag rf,
      PlateFlag pf,
      int pageNo,
      int pageSize)
    {
      this();
      this.rf = rf;
      this.pf = pf;
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarket_args(getMarket_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_rf()) {
        this.rf = other.rf;
      }
      if (other.is_set_pf()) {
        this.pf = other.pf;
      }
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public getMarket_args deepCopy() {
      return new getMarket_args(this);
    }

    public void clear() {
      this.rf = null;
      this.pf = null;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_pageSize_isSet(false);
      this.pageSize = 0;
    }

    /**
     * 
     * @see RangeFlag
     */
    public RangeFlag get_rf() {
      return this.rf;
    }

    /**
     * 
     * @see RangeFlag
     */
    public void set_rf(RangeFlag rf) {
      this.rf = rf;
    }

    public void unset_rf() {
      this.rf = null;
    }

    /** Returns true if field rf is set (has been assigned a value) and false otherwise */
    public boolean is_set_rf() {
      return this.rf != null;
    }

    public void set_rf_isSet(boolean value) {
      if (!value) {
        this.rf = null;
      }
    }

    /**
     * 
     * @see PlateFlag
     */
    public PlateFlag get_pf() {
      return this.pf;
    }

    /**
     * 
     * @see PlateFlag
     */
    public void set_pf(PlateFlag pf) {
      this.pf = pf;
    }

    public void unset_pf() {
      this.pf = null;
    }

    /** Returns true if field pf is set (has been assigned a value) and false otherwise */
    public boolean is_set_pf() {
      return this.pf != null;
    }

    public void set_pf_isSet(boolean value) {
      if (!value) {
        this.pf = null;
      }
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_pageSize() {
      return this.pageSize;
    }

    public void set_pageSize(int pageSize) {
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    public void unset_pageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void set_pageSize_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RF:
        if (value == null) {
          unset_rf();
        } else {
          set_rf((RangeFlag)value);
        }
        break;

      case PF:
        if (value == null) {
          unset_pf();
        } else {
          set_pf((PlateFlag)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unset_pageSize();
        } else {
          set_pageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RF:
        return get_rf();

      case PF:
        return get_pf();

      case PAGE_NO:
        return get_pageNo();

      case PAGE_SIZE:
        return get_pageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RF:
        return is_set_rf();
      case PF:
        return is_set_pf();
      case PAGE_NO:
        return is_set_pageNo();
      case PAGE_SIZE:
        return is_set_pageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarket_args)
        return this.equals((getMarket_args)that);
      return false;
    }

    public boolean equals(getMarket_args that) {
      if (that == null)
        return false;

      boolean this_present_rf = true && this.is_set_rf();
      boolean that_present_rf = true && that.is_set_rf();
      if (this_present_rf || that_present_rf) {
        if (!(this_present_rf && that_present_rf))
          return false;
        if (!this.rf.equals(that.rf))
          return false;
      }

      boolean this_present_pf = true && this.is_set_pf();
      boolean that_present_pf = true && that.is_set_pf();
      if (this_present_pf || that_present_pf) {
        if (!(this_present_pf && that_present_pf))
          return false;
        if (!this.pf.equals(that.pf))
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rf = true && (is_set_rf());
      list.add(present_rf);
      if (present_rf)
        list.add(rf.getValue());

      boolean present_pf = true && (is_set_pf());
      list.add(present_pf);
      if (present_pf)
        list.add(pf.getValue());

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMarket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_rf()).compareTo(other.is_set_rf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_rf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rf, other.rf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pf()).compareTo(other.is_set_pf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pf, other.pf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageSize()).compareTo(other.is_set_pageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMarket_args(");
      boolean first = true;

      sb.append("rf:");
      if (this.rf == null) {
        sb.append("null");
      } else {
        sb.append(this.rf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pf:");
      if (this.pf == null) {
        sb.append("null");
      } else {
        sb.append(this.pf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMarket_argsStandardSchemeFactory implements SchemeFactory {
      public getMarket_argsStandardScheme getScheme() {
        return new getMarket_argsStandardScheme();
      }
    }

    private static class getMarket_argsStandardScheme extends StandardScheme<getMarket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
                struct.set_rf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
                struct.set_pf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.set_pageSize_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rf != null) {
          oprot.writeFieldBegin(RF_FIELD_DESC);
          oprot.writeI32(struct.rf.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pf != null) {
          oprot.writeFieldBegin(PF_FIELD_DESC);
          oprot.writeI32(struct.pf.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarket_argsTupleSchemeFactory implements SchemeFactory {
      public getMarket_argsTupleScheme getScheme() {
        return new getMarket_argsTupleScheme();
      }
    }

    private static class getMarket_argsTupleScheme extends TupleScheme<getMarket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_rf()) {
          optionals.set(0);
        }
        if (struct.is_set_pf()) {
          optionals.set(1);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(2);
        }
        if (struct.is_set_pageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.is_set_rf()) {
          oprot.writeI32(struct.rf.getValue());
        }
        if (struct.is_set_pf()) {
          oprot.writeI32(struct.pf.getValue());
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_pageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
          struct.set_rf_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
          struct.set_pf_isSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.set_pageSize_isSet(true);
        }
      }
    }

  }

  public static class getMarket_result implements org.apache.thrift.TBase<getMarket_result, getMarket_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarket_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMarket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMarket_resultTupleSchemeFactory());
    }

    private MarketData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMarket_result(android.os.Parcel in) {
      this.success= in.readParcelable(getMarket_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMarket_result> CREATOR = new android.os.Parcelable.Creator<getMarket_result>() {
      @Override
      public getMarket_result[] newArray(int size) {
        return new getMarket_result[size];
      }

      @Override
      public getMarket_result createFromParcel(android.os.Parcel in) {
        return new getMarket_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarket_result.class, metaDataMap);
    }

    public getMarket_result() {
    }

    public getMarket_result(
      MarketData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarket_result(getMarket_result other) {
      if (other.is_set_success()) {
        this.success = new MarketData(other.success);
      }
    }

    public getMarket_result deepCopy() {
      return new getMarket_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public MarketData get_success() {
      return this.success;
    }

    public void set_success(MarketData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((MarketData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarket_result)
        return this.equals((getMarket_result)that);
      return false;
    }

    public boolean equals(getMarket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMarket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMarket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMarket_resultStandardSchemeFactory implements SchemeFactory {
      public getMarket_resultStandardScheme getScheme() {
        return new getMarket_resultStandardScheme();
      }
    }

    private static class getMarket_resultStandardScheme extends StandardScheme<getMarket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new MarketData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarket_resultTupleSchemeFactory implements SchemeFactory {
      public getMarket_resultTupleScheme getScheme() {
        return new getMarket_resultTupleScheme();
      }
    }

    private static class getMarket_resultTupleScheme extends TupleScheme<getMarket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new MarketData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getLeaders_args implements org.apache.thrift.TBase<getLeaders_args, getLeaders_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLeaders_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeaders_args");

    private static final org.apache.thrift.protocol.TField RF_FIELD_DESC = new org.apache.thrift.protocol.TField("rf", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PF_FIELD_DESC = new org.apache.thrift.protocol.TField("pf", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeaders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeaders_argsTupleSchemeFactory());
    }

    private RangeFlag rf; // required
    private PlateFlag pf; // required
    private String label; // required
    private int pageNo; // required
    private int pageSize; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(rf.getValue());
      out.writeInt(pf.getValue());
      out.writeString(label);
      out.writeInt(pageNo);
      out.writeInt(pageSize);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getLeaders_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.rf = RangeFlag.findByValue(in.readInt());
      this.pf = PlateFlag.findByValue(in.readInt());
      this.label= in.readString();
      this.pageNo = in.readInt();
      this.pageSize = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getLeaders_args> CREATOR = new android.os.Parcelable.Creator<getLeaders_args>() {
      @Override
      public getLeaders_args[] newArray(int size) {
        return new getLeaders_args[size];
      }

      @Override
      public getLeaders_args createFromParcel(android.os.Parcel in) {
        return new getLeaders_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see RangeFlag
       */
      RF((short)1, "rf"),
      /**
       * 
       * @see PlateFlag
       */
      PF((short)2, "pf"),
      LABEL((short)3, "label"),
      PAGE_NO((short)4, "pageNo"),
      PAGE_SIZE((short)5, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RF
            return RF;
          case 2: // PF
            return PF;
          case 3: // LABEL
            return LABEL;
          case 4: // PAGE_NO
            return PAGE_NO;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RF, new org.apache.thrift.meta_data.FieldMetaData("rf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RangeFlag.class)));
      tmpMap.put(_Fields.PF, new org.apache.thrift.meta_data.FieldMetaData("pf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlateFlag.class)));
      tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeaders_args.class, metaDataMap);
    }

    public getLeaders_args() {
    }

    public getLeaders_args(
      RangeFlag rf,
      PlateFlag pf,
      String label,
      int pageNo,
      int pageSize)
    {
      this();
      this.rf = rf;
      this.pf = pf;
      this.label = label;
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeaders_args(getLeaders_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_rf()) {
        this.rf = other.rf;
      }
      if (other.is_set_pf()) {
        this.pf = other.pf;
      }
      if (other.is_set_label()) {
        this.label = other.label;
      }
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public getLeaders_args deepCopy() {
      return new getLeaders_args(this);
    }

    public void clear() {
      this.rf = null;
      this.pf = null;
      this.label = null;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_pageSize_isSet(false);
      this.pageSize = 0;
    }

    /**
     * 
     * @see RangeFlag
     */
    public RangeFlag get_rf() {
      return this.rf;
    }

    /**
     * 
     * @see RangeFlag
     */
    public void set_rf(RangeFlag rf) {
      this.rf = rf;
    }

    public void unset_rf() {
      this.rf = null;
    }

    /** Returns true if field rf is set (has been assigned a value) and false otherwise */
    public boolean is_set_rf() {
      return this.rf != null;
    }

    public void set_rf_isSet(boolean value) {
      if (!value) {
        this.rf = null;
      }
    }

    /**
     * 
     * @see PlateFlag
     */
    public PlateFlag get_pf() {
      return this.pf;
    }

    /**
     * 
     * @see PlateFlag
     */
    public void set_pf(PlateFlag pf) {
      this.pf = pf;
    }

    public void unset_pf() {
      this.pf = null;
    }

    /** Returns true if field pf is set (has been assigned a value) and false otherwise */
    public boolean is_set_pf() {
      return this.pf != null;
    }

    public void set_pf_isSet(boolean value) {
      if (!value) {
        this.pf = null;
      }
    }

    public String get_label() {
      return this.label;
    }

    public void set_label(String label) {
      this.label = label;
    }

    public void unset_label() {
      this.label = null;
    }

    /** Returns true if field label is set (has been assigned a value) and false otherwise */
    public boolean is_set_label() {
      return this.label != null;
    }

    public void set_label_isSet(boolean value) {
      if (!value) {
        this.label = null;
      }
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_pageSize() {
      return this.pageSize;
    }

    public void set_pageSize(int pageSize) {
      this.pageSize = pageSize;
      set_pageSize_isSet(true);
    }

    public void unset_pageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void set_pageSize_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RF:
        if (value == null) {
          unset_rf();
        } else {
          set_rf((RangeFlag)value);
        }
        break;

      case PF:
        if (value == null) {
          unset_pf();
        } else {
          set_pf((PlateFlag)value);
        }
        break;

      case LABEL:
        if (value == null) {
          unset_label();
        } else {
          set_label((String)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unset_pageSize();
        } else {
          set_pageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RF:
        return get_rf();

      case PF:
        return get_pf();

      case LABEL:
        return get_label();

      case PAGE_NO:
        return get_pageNo();

      case PAGE_SIZE:
        return get_pageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RF:
        return is_set_rf();
      case PF:
        return is_set_pf();
      case LABEL:
        return is_set_label();
      case PAGE_NO:
        return is_set_pageNo();
      case PAGE_SIZE:
        return is_set_pageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeaders_args)
        return this.equals((getLeaders_args)that);
      return false;
    }

    public boolean equals(getLeaders_args that) {
      if (that == null)
        return false;

      boolean this_present_rf = true && this.is_set_rf();
      boolean that_present_rf = true && that.is_set_rf();
      if (this_present_rf || that_present_rf) {
        if (!(this_present_rf && that_present_rf))
          return false;
        if (!this.rf.equals(that.rf))
          return false;
      }

      boolean this_present_pf = true && this.is_set_pf();
      boolean that_present_pf = true && that.is_set_pf();
      if (this_present_pf || that_present_pf) {
        if (!(this_present_pf && that_present_pf))
          return false;
        if (!this.pf.equals(that.pf))
          return false;
      }

      boolean this_present_label = true && this.is_set_label();
      boolean that_present_label = true && that.is_set_label();
      if (this_present_label || that_present_label) {
        if (!(this_present_label && that_present_label))
          return false;
        if (!this.label.equals(that.label))
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rf = true && (is_set_rf());
      list.add(present_rf);
      if (present_rf)
        list.add(rf.getValue());

      boolean present_pf = true && (is_set_pf());
      list.add(present_pf);
      if (present_pf)
        list.add(pf.getValue());

      boolean present_label = true && (is_set_label());
      list.add(present_label);
      if (present_label)
        list.add(label);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLeaders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_rf()).compareTo(other.is_set_rf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_rf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rf, other.rf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pf()).compareTo(other.is_set_pf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pf, other.pf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_label()).compareTo(other.is_set_label());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_label()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageSize()).compareTo(other.is_set_pageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeaders_args(");
      boolean first = true;

      sb.append("rf:");
      if (this.rf == null) {
        sb.append("null");
      } else {
        sb.append(this.rf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pf:");
      if (this.pf == null) {
        sb.append("null");
      } else {
        sb.append(this.pf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getLeaders_argsStandardSchemeFactory implements SchemeFactory {
      public getLeaders_argsStandardScheme getScheme() {
        return new getLeaders_argsStandardScheme();
      }
    }

    private static class getLeaders_argsStandardScheme extends StandardScheme<getLeaders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeaders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
                struct.set_rf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
                struct.set_pf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LABEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.label = iprot.readString();
                struct.set_label_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.set_pageSize_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeaders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rf != null) {
          oprot.writeFieldBegin(RF_FIELD_DESC);
          oprot.writeI32(struct.rf.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pf != null) {
          oprot.writeFieldBegin(PF_FIELD_DESC);
          oprot.writeI32(struct.pf.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.label != null) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeaders_argsTupleSchemeFactory implements SchemeFactory {
      public getLeaders_argsTupleScheme getScheme() {
        return new getLeaders_argsTupleScheme();
      }
    }

    private static class getLeaders_argsTupleScheme extends TupleScheme<getLeaders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeaders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_rf()) {
          optionals.set(0);
        }
        if (struct.is_set_pf()) {
          optionals.set(1);
        }
        if (struct.is_set_label()) {
          optionals.set(2);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(3);
        }
        if (struct.is_set_pageSize()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.is_set_rf()) {
          oprot.writeI32(struct.rf.getValue());
        }
        if (struct.is_set_pf()) {
          oprot.writeI32(struct.pf.getValue());
        }
        if (struct.is_set_label()) {
          oprot.writeString(struct.label);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_pageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeaders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
          struct.set_rf_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
          struct.set_pf_isSet(true);
        }
        if (incoming.get(2)) {
          struct.label = iprot.readString();
          struct.set_label_isSet(true);
        }
        if (incoming.get(3)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(4)) {
          struct.pageSize = iprot.readI32();
          struct.set_pageSize_isSet(true);
        }
      }
    }

  }

  public static class getLeaders_result implements org.apache.thrift.TBase<getLeaders_result, getLeaders_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLeaders_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeaders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeaders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeaders_resultTupleSchemeFactory());
    }

    private MarketData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getLeaders_result(android.os.Parcel in) {
      this.success= in.readParcelable(getLeaders_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getLeaders_result> CREATOR = new android.os.Parcelable.Creator<getLeaders_result>() {
      @Override
      public getLeaders_result[] newArray(int size) {
        return new getLeaders_result[size];
      }

      @Override
      public getLeaders_result createFromParcel(android.os.Parcel in) {
        return new getLeaders_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeaders_result.class, metaDataMap);
    }

    public getLeaders_result() {
    }

    public getLeaders_result(
      MarketData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeaders_result(getLeaders_result other) {
      if (other.is_set_success()) {
        this.success = new MarketData(other.success);
      }
    }

    public getLeaders_result deepCopy() {
      return new getLeaders_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public MarketData get_success() {
      return this.success;
    }

    public void set_success(MarketData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((MarketData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeaders_result)
        return this.equals((getLeaders_result)that);
      return false;
    }

    public boolean equals(getLeaders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLeaders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeaders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getLeaders_resultStandardSchemeFactory implements SchemeFactory {
      public getLeaders_resultStandardScheme getScheme() {
        return new getLeaders_resultStandardScheme();
      }
    }

    private static class getLeaders_resultStandardScheme extends StandardScheme<getLeaders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeaders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new MarketData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeaders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeaders_resultTupleSchemeFactory implements SchemeFactory {
      public getLeaders_resultTupleScheme getScheme() {
        return new getLeaders_resultTupleScheme();
      }
    }

    private static class getLeaders_resultTupleScheme extends TupleScheme<getLeaders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeaders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeaders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new MarketData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getRelationStocks_args implements org.apache.thrift.TBase<getRelationStocks_args, getRelationStocks_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRelationStocks_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelationStocks_args");

    private static final org.apache.thrift.protocol.TField RF_FIELD_DESC = new org.apache.thrift.protocol.TField("rf", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PF_FIELD_DESC = new org.apache.thrift.protocol.TField("pf", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelationStocks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelationStocks_argsTupleSchemeFactory());
    }

    private RangeFlag rf; // required
    private PlateFlag pf; // required
    private String code; // required
    private long total; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(rf.getValue());
      out.writeInt(pf.getValue());
      out.writeString(code);
      out.writeLong(total);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRelationStocks_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.rf = RangeFlag.findByValue(in.readInt());
      this.pf = PlateFlag.findByValue(in.readInt());
      this.code= in.readString();
      this.total = in.readLong();
    }

    public static final android.os.Parcelable.Creator<getRelationStocks_args> CREATOR = new android.os.Parcelable.Creator<getRelationStocks_args>() {
      @Override
      public getRelationStocks_args[] newArray(int size) {
        return new getRelationStocks_args[size];
      }

      @Override
      public getRelationStocks_args createFromParcel(android.os.Parcel in) {
        return new getRelationStocks_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see RangeFlag
       */
      RF((short)1, "rf"),
      /**
       * 
       * @see PlateFlag
       */
      PF((short)2, "pf"),
      CODE((short)3, "code"),
      TOTAL((short)4, "total");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RF
            return RF;
          case 2: // PF
            return PF;
          case 3: // CODE
            return CODE;
          case 4: // TOTAL
            return TOTAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RF, new org.apache.thrift.meta_data.FieldMetaData("rf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RangeFlag.class)));
      tmpMap.put(_Fields.PF, new org.apache.thrift.meta_data.FieldMetaData("pf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlateFlag.class)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelationStocks_args.class, metaDataMap);
    }

    public getRelationStocks_args() {
    }

    public getRelationStocks_args(
      RangeFlag rf,
      PlateFlag pf,
      String code,
      long total)
    {
      this();
      this.rf = rf;
      this.pf = pf;
      this.code = code;
      this.total = total;
      set_total_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelationStocks_args(getRelationStocks_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_rf()) {
        this.rf = other.rf;
      }
      if (other.is_set_pf()) {
        this.pf = other.pf;
      }
      if (other.is_set_code()) {
        this.code = other.code;
      }
      this.total = other.total;
    }

    public getRelationStocks_args deepCopy() {
      return new getRelationStocks_args(this);
    }

    public void clear() {
      this.rf = null;
      this.pf = null;
      this.code = null;
      set_total_isSet(false);
      this.total = 0;
    }

    /**
     * 
     * @see RangeFlag
     */
    public RangeFlag get_rf() {
      return this.rf;
    }

    /**
     * 
     * @see RangeFlag
     */
    public void set_rf(RangeFlag rf) {
      this.rf = rf;
    }

    public void unset_rf() {
      this.rf = null;
    }

    /** Returns true if field rf is set (has been assigned a value) and false otherwise */
    public boolean is_set_rf() {
      return this.rf != null;
    }

    public void set_rf_isSet(boolean value) {
      if (!value) {
        this.rf = null;
      }
    }

    /**
     * 
     * @see PlateFlag
     */
    public PlateFlag get_pf() {
      return this.pf;
    }

    /**
     * 
     * @see PlateFlag
     */
    public void set_pf(PlateFlag pf) {
      this.pf = pf;
    }

    public void unset_pf() {
      this.pf = null;
    }

    /** Returns true if field pf is set (has been assigned a value) and false otherwise */
    public boolean is_set_pf() {
      return this.pf != null;
    }

    public void set_pf_isSet(boolean value) {
      if (!value) {
        this.pf = null;
      }
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public long get_total() {
      return this.total;
    }

    public void set_total(long total) {
      this.total = total;
      set_total_isSet(true);
    }

    public void unset_total() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
    }

    /** Returns true if field total is set (has been assigned a value) and false otherwise */
    public boolean is_set_total() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
    }

    public void set_total_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RF:
        if (value == null) {
          unset_rf();
        } else {
          set_rf((RangeFlag)value);
        }
        break;

      case PF:
        if (value == null) {
          unset_pf();
        } else {
          set_pf((PlateFlag)value);
        }
        break;

      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case TOTAL:
        if (value == null) {
          unset_total();
        } else {
          set_total((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RF:
        return get_rf();

      case PF:
        return get_pf();

      case CODE:
        return get_code();

      case TOTAL:
        return get_total();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RF:
        return is_set_rf();
      case PF:
        return is_set_pf();
      case CODE:
        return is_set_code();
      case TOTAL:
        return is_set_total();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelationStocks_args)
        return this.equals((getRelationStocks_args)that);
      return false;
    }

    public boolean equals(getRelationStocks_args that) {
      if (that == null)
        return false;

      boolean this_present_rf = true && this.is_set_rf();
      boolean that_present_rf = true && that.is_set_rf();
      if (this_present_rf || that_present_rf) {
        if (!(this_present_rf && that_present_rf))
          return false;
        if (!this.rf.equals(that.rf))
          return false;
      }

      boolean this_present_pf = true && this.is_set_pf();
      boolean that_present_pf = true && that.is_set_pf();
      if (this_present_pf || that_present_pf) {
        if (!(this_present_pf && that_present_pf))
          return false;
        if (!this.pf.equals(that.pf))
          return false;
      }

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_total = true;
      boolean that_present_total = true;
      if (this_present_total || that_present_total) {
        if (!(this_present_total && that_present_total))
          return false;
        if (this.total != that.total)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rf = true && (is_set_rf());
      list.add(present_rf);
      if (present_rf)
        list.add(rf.getValue());

      boolean present_pf = true && (is_set_pf());
      list.add(present_pf);
      if (present_pf)
        list.add(pf.getValue());

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_total = true;
      list.add(present_total);
      if (present_total)
        list.add(total);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRelationStocks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_rf()).compareTo(other.is_set_rf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_rf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rf, other.rf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pf()).compareTo(other.is_set_pf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pf, other.pf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_total()).compareTo(other.is_set_total());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_total()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelationStocks_args(");
      boolean first = true;

      sb.append("rf:");
      if (this.rf == null) {
        sb.append("null");
      } else {
        sb.append(this.rf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pf:");
      if (this.pf == null) {
        sb.append("null");
      } else {
        sb.append(this.pf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("total:");
      sb.append(this.total);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getRelationStocks_argsStandardSchemeFactory implements SchemeFactory {
      public getRelationStocks_argsStandardScheme getScheme() {
        return new getRelationStocks_argsStandardScheme();
      }
    }

    private static class getRelationStocks_argsStandardScheme extends StandardScheme<getRelationStocks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelationStocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
                struct.set_rf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
                struct.set_pf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOTAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.total = iprot.readI64();
                struct.set_total_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelationStocks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rf != null) {
          oprot.writeFieldBegin(RF_FIELD_DESC);
          oprot.writeI32(struct.rf.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pf != null) {
          oprot.writeFieldBegin(PF_FIELD_DESC);
          oprot.writeI32(struct.pf.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeI64(struct.total);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelationStocks_argsTupleSchemeFactory implements SchemeFactory {
      public getRelationStocks_argsTupleScheme getScheme() {
        return new getRelationStocks_argsTupleScheme();
      }
    }

    private static class getRelationStocks_argsTupleScheme extends TupleScheme<getRelationStocks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelationStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_rf()) {
          optionals.set(0);
        }
        if (struct.is_set_pf()) {
          optionals.set(1);
        }
        if (struct.is_set_code()) {
          optionals.set(2);
        }
        if (struct.is_set_total()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.is_set_rf()) {
          oprot.writeI32(struct.rf.getValue());
        }
        if (struct.is_set_pf()) {
          oprot.writeI32(struct.pf.getValue());
        }
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
        if (struct.is_set_total()) {
          oprot.writeI64(struct.total);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelationStocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
          struct.set_rf_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pf = com.rjzd.aistock.api.PlateFlag.findByValue(iprot.readI32());
          struct.set_pf_isSet(true);
        }
        if (incoming.get(2)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
        if (incoming.get(3)) {
          struct.total = iprot.readI64();
          struct.set_total_isSet(true);
        }
      }
    }

  }

  public static class getRelationStocks_result implements org.apache.thrift.TBase<getRelationStocks_result, getRelationStocks_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRelationStocks_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelationStocks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelationStocks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelationStocks_resultTupleSchemeFactory());
    }

    private MarketData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRelationStocks_result(android.os.Parcel in) {
      this.success= in.readParcelable(getRelationStocks_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getRelationStocks_result> CREATOR = new android.os.Parcelable.Creator<getRelationStocks_result>() {
      @Override
      public getRelationStocks_result[] newArray(int size) {
        return new getRelationStocks_result[size];
      }

      @Override
      public getRelationStocks_result createFromParcel(android.os.Parcel in) {
        return new getRelationStocks_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelationStocks_result.class, metaDataMap);
    }

    public getRelationStocks_result() {
    }

    public getRelationStocks_result(
      MarketData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelationStocks_result(getRelationStocks_result other) {
      if (other.is_set_success()) {
        this.success = new MarketData(other.success);
      }
    }

    public getRelationStocks_result deepCopy() {
      return new getRelationStocks_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public MarketData get_success() {
      return this.success;
    }

    public void set_success(MarketData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((MarketData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelationStocks_result)
        return this.equals((getRelationStocks_result)that);
      return false;
    }

    public boolean equals(getRelationStocks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRelationStocks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelationStocks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getRelationStocks_resultStandardSchemeFactory implements SchemeFactory {
      public getRelationStocks_resultStandardScheme getScheme() {
        return new getRelationStocks_resultStandardScheme();
      }
    }

    private static class getRelationStocks_resultStandardScheme extends StandardScheme<getRelationStocks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelationStocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new MarketData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelationStocks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelationStocks_resultTupleSchemeFactory implements SchemeFactory {
      public getRelationStocks_resultTupleScheme getScheme() {
        return new getRelationStocks_resultTupleScheme();
      }
    }

    private static class getRelationStocks_resultTupleScheme extends TupleScheme<getRelationStocks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelationStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelationStocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new MarketData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getCompanyProfile_args implements org.apache.thrift.TBase<getCompanyProfile_args, getCompanyProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyProfile_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyProfile_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyProfile_argsTupleSchemeFactory());
    }

    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getCompanyProfile_args(android.os.Parcel in) {
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<getCompanyProfile_args> CREATOR = new android.os.Parcelable.Creator<getCompanyProfile_args>() {
      @Override
      public getCompanyProfile_args[] newArray(int size) {
        return new getCompanyProfile_args[size];
      }

      @Override
      public getCompanyProfile_args createFromParcel(android.os.Parcel in) {
        return new getCompanyProfile_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyProfile_args.class, metaDataMap);
    }

    public getCompanyProfile_args() {
    }

    public getCompanyProfile_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyProfile_args(getCompanyProfile_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public getCompanyProfile_args deepCopy() {
      return new getCompanyProfile_args(this);
    }

    public void clear() {
      this.code = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyProfile_args)
        return this.equals((getCompanyProfile_args)that);
      return false;
    }

    public boolean equals(getCompanyProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyProfile_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getCompanyProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getCompanyProfile_argsStandardScheme getScheme() {
        return new getCompanyProfile_argsStandardScheme();
      }
    }

    private static class getCompanyProfile_argsStandardScheme extends StandardScheme<getCompanyProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getCompanyProfile_argsTupleScheme getScheme() {
        return new getCompanyProfile_argsTupleScheme();
      }
    }

    private static class getCompanyProfile_argsTupleScheme extends TupleScheme<getCompanyProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
      }
    }

  }

  public static class getCompanyProfile_result implements org.apache.thrift.TBase<getCompanyProfile_result, getCompanyProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyProfile_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyProfile_resultTupleSchemeFactory());
    }

    private CompanyProfile success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getCompanyProfile_result(android.os.Parcel in) {
      this.success= in.readParcelable(getCompanyProfile_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getCompanyProfile_result> CREATOR = new android.os.Parcelable.Creator<getCompanyProfile_result>() {
      @Override
      public getCompanyProfile_result[] newArray(int size) {
        return new getCompanyProfile_result[size];
      }

      @Override
      public getCompanyProfile_result createFromParcel(android.os.Parcel in) {
        return new getCompanyProfile_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyProfile_result.class, metaDataMap);
    }

    public getCompanyProfile_result() {
    }

    public getCompanyProfile_result(
      CompanyProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyProfile_result(getCompanyProfile_result other) {
      if (other.is_set_success()) {
        this.success = new CompanyProfile(other.success);
      }
    }

    public getCompanyProfile_result deepCopy() {
      return new getCompanyProfile_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public CompanyProfile get_success() {
      return this.success;
    }

    public void set_success(CompanyProfile success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((CompanyProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyProfile_result)
        return this.equals((getCompanyProfile_result)that);
      return false;
    }

    public boolean equals(getCompanyProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getCompanyProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getCompanyProfile_resultStandardScheme getScheme() {
        return new getCompanyProfile_resultStandardScheme();
      }
    }

    private static class getCompanyProfile_resultStandardScheme extends StandardScheme<getCompanyProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new CompanyProfile();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getCompanyProfile_resultTupleScheme getScheme() {
        return new getCompanyProfile_resultTupleScheme();
      }
    }

    private static class getCompanyProfile_resultTupleScheme extends TupleScheme<getCompanyProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new CompanyProfile();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getShareholder_args implements org.apache.thrift.TBase<getShareholder_args, getShareholder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getShareholder_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShareholder_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShareholder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShareholder_argsTupleSchemeFactory());
    }

    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getShareholder_args(android.os.Parcel in) {
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<getShareholder_args> CREATOR = new android.os.Parcelable.Creator<getShareholder_args>() {
      @Override
      public getShareholder_args[] newArray(int size) {
        return new getShareholder_args[size];
      }

      @Override
      public getShareholder_args createFromParcel(android.os.Parcel in) {
        return new getShareholder_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShareholder_args.class, metaDataMap);
    }

    public getShareholder_args() {
    }

    public getShareholder_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShareholder_args(getShareholder_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public getShareholder_args deepCopy() {
      return new getShareholder_args(this);
    }

    public void clear() {
      this.code = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShareholder_args)
        return this.equals((getShareholder_args)that);
      return false;
    }

    public boolean equals(getShareholder_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getShareholder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShareholder_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getShareholder_argsStandardSchemeFactory implements SchemeFactory {
      public getShareholder_argsStandardScheme getScheme() {
        return new getShareholder_argsStandardScheme();
      }
    }

    private static class getShareholder_argsStandardScheme extends StandardScheme<getShareholder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShareholder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShareholder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShareholder_argsTupleSchemeFactory implements SchemeFactory {
      public getShareholder_argsTupleScheme getScheme() {
        return new getShareholder_argsTupleScheme();
      }
    }

    private static class getShareholder_argsTupleScheme extends TupleScheme<getShareholder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShareholder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShareholder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
      }
    }

  }

  public static class getShareholder_result implements org.apache.thrift.TBase<getShareholder_result, getShareholder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getShareholder_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShareholder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShareholder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShareholder_resultTupleSchemeFactory());
    }

    private ShareholderInfo success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getShareholder_result(android.os.Parcel in) {
      this.success= in.readParcelable(getShareholder_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getShareholder_result> CREATOR = new android.os.Parcelable.Creator<getShareholder_result>() {
      @Override
      public getShareholder_result[] newArray(int size) {
        return new getShareholder_result[size];
      }

      @Override
      public getShareholder_result createFromParcel(android.os.Parcel in) {
        return new getShareholder_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShareholderInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShareholder_result.class, metaDataMap);
    }

    public getShareholder_result() {
    }

    public getShareholder_result(
      ShareholderInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShareholder_result(getShareholder_result other) {
      if (other.is_set_success()) {
        this.success = new ShareholderInfo(other.success);
      }
    }

    public getShareholder_result deepCopy() {
      return new getShareholder_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public ShareholderInfo get_success() {
      return this.success;
    }

    public void set_success(ShareholderInfo success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((ShareholderInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShareholder_result)
        return this.equals((getShareholder_result)that);
      return false;
    }

    public boolean equals(getShareholder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getShareholder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShareholder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getShareholder_resultStandardSchemeFactory implements SchemeFactory {
      public getShareholder_resultStandardScheme getScheme() {
        return new getShareholder_resultStandardScheme();
      }
    }

    private static class getShareholder_resultStandardScheme extends StandardScheme<getShareholder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShareholder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new ShareholderInfo();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShareholder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShareholder_resultTupleSchemeFactory implements SchemeFactory {
      public getShareholder_resultTupleScheme getScheme() {
        return new getShareholder_resultTupleScheme();
      }
    }

    private static class getShareholder_resultTupleScheme extends TupleScheme<getShareholder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShareholder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShareholder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new ShareholderInfo();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getFunds_args implements org.apache.thrift.TBase<getFunds_args, getFunds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFunds_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFunds_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFunds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFunds_argsTupleSchemeFactory());
    }

    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFunds_args(android.os.Parcel in) {
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<getFunds_args> CREATOR = new android.os.Parcelable.Creator<getFunds_args>() {
      @Override
      public getFunds_args[] newArray(int size) {
        return new getFunds_args[size];
      }

      @Override
      public getFunds_args createFromParcel(android.os.Parcel in) {
        return new getFunds_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFunds_args.class, metaDataMap);
    }

    public getFunds_args() {
    }

    public getFunds_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFunds_args(getFunds_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public getFunds_args deepCopy() {
      return new getFunds_args(this);
    }

    public void clear() {
      this.code = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFunds_args)
        return this.equals((getFunds_args)that);
      return false;
    }

    public boolean equals(getFunds_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFunds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFunds_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFunds_argsStandardSchemeFactory implements SchemeFactory {
      public getFunds_argsStandardScheme getScheme() {
        return new getFunds_argsStandardScheme();
      }
    }

    private static class getFunds_argsStandardScheme extends StandardScheme<getFunds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFunds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFunds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFunds_argsTupleSchemeFactory implements SchemeFactory {
      public getFunds_argsTupleScheme getScheme() {
        return new getFunds_argsTupleScheme();
      }
    }

    private static class getFunds_argsTupleScheme extends TupleScheme<getFunds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFunds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFunds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
      }
    }

  }

  public static class getFunds_result implements org.apache.thrift.TBase<getFunds_result, getFunds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFunds_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFunds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFunds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFunds_resultTupleSchemeFactory());
    }

    private FundsData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFunds_result(android.os.Parcel in) {
      this.success= in.readParcelable(getFunds_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getFunds_result> CREATOR = new android.os.Parcelable.Creator<getFunds_result>() {
      @Override
      public getFunds_result[] newArray(int size) {
        return new getFunds_result[size];
      }

      @Override
      public getFunds_result createFromParcel(android.os.Parcel in) {
        return new getFunds_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFunds_result.class, metaDataMap);
    }

    public getFunds_result() {
    }

    public getFunds_result(
      FundsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFunds_result(getFunds_result other) {
      if (other.is_set_success()) {
        this.success = new FundsData(other.success);
      }
    }

    public getFunds_result deepCopy() {
      return new getFunds_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public FundsData get_success() {
      return this.success;
    }

    public void set_success(FundsData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((FundsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFunds_result)
        return this.equals((getFunds_result)that);
      return false;
    }

    public boolean equals(getFunds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFunds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFunds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFunds_resultStandardSchemeFactory implements SchemeFactory {
      public getFunds_resultStandardScheme getScheme() {
        return new getFunds_resultStandardScheme();
      }
    }

    private static class getFunds_resultStandardScheme extends StandardScheme<getFunds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFunds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new FundsData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFunds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFunds_resultTupleSchemeFactory implements SchemeFactory {
      public getFunds_resultTupleScheme getScheme() {
        return new getFunds_resultTupleScheme();
      }
    }

    private static class getFunds_resultTupleScheme extends TupleScheme<getFunds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFunds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFunds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new FundsData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getMarginTrading_args implements org.apache.thrift.TBase<getMarginTrading_args, getMarginTrading_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginTrading_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginTrading_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMarginTrading_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMarginTrading_argsTupleSchemeFactory());
    }

    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMarginTrading_args(android.os.Parcel in) {
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<getMarginTrading_args> CREATOR = new android.os.Parcelable.Creator<getMarginTrading_args>() {
      @Override
      public getMarginTrading_args[] newArray(int size) {
        return new getMarginTrading_args[size];
      }

      @Override
      public getMarginTrading_args createFromParcel(android.os.Parcel in) {
        return new getMarginTrading_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginTrading_args.class, metaDataMap);
    }

    public getMarginTrading_args() {
    }

    public getMarginTrading_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginTrading_args(getMarginTrading_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public getMarginTrading_args deepCopy() {
      return new getMarginTrading_args(this);
    }

    public void clear() {
      this.code = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginTrading_args)
        return this.equals((getMarginTrading_args)that);
      return false;
    }

    public boolean equals(getMarginTrading_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMarginTrading_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMarginTrading_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMarginTrading_argsStandardSchemeFactory implements SchemeFactory {
      public getMarginTrading_argsStandardScheme getScheme() {
        return new getMarginTrading_argsStandardScheme();
      }
    }

    private static class getMarginTrading_argsStandardScheme extends StandardScheme<getMarginTrading_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginTrading_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginTrading_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginTrading_argsTupleSchemeFactory implements SchemeFactory {
      public getMarginTrading_argsTupleScheme getScheme() {
        return new getMarginTrading_argsTupleScheme();
      }
    }

    private static class getMarginTrading_argsTupleScheme extends TupleScheme<getMarginTrading_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginTrading_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginTrading_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
      }
    }

  }

  public static class getMarginTrading_result implements org.apache.thrift.TBase<getMarginTrading_result, getMarginTrading_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginTrading_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginTrading_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMarginTrading_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMarginTrading_resultTupleSchemeFactory());
    }

    private MarginTrading success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMarginTrading_result(android.os.Parcel in) {
      this.success= in.readParcelable(getMarginTrading_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMarginTrading_result> CREATOR = new android.os.Parcelable.Creator<getMarginTrading_result>() {
      @Override
      public getMarginTrading_result[] newArray(int size) {
        return new getMarginTrading_result[size];
      }

      @Override
      public getMarginTrading_result createFromParcel(android.os.Parcel in) {
        return new getMarginTrading_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarginTrading.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginTrading_result.class, metaDataMap);
    }

    public getMarginTrading_result() {
    }

    public getMarginTrading_result(
      MarginTrading success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginTrading_result(getMarginTrading_result other) {
      if (other.is_set_success()) {
        this.success = new MarginTrading(other.success);
      }
    }

    public getMarginTrading_result deepCopy() {
      return new getMarginTrading_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public MarginTrading get_success() {
      return this.success;
    }

    public void set_success(MarginTrading success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((MarginTrading)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginTrading_result)
        return this.equals((getMarginTrading_result)that);
      return false;
    }

    public boolean equals(getMarginTrading_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMarginTrading_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMarginTrading_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMarginTrading_resultStandardSchemeFactory implements SchemeFactory {
      public getMarginTrading_resultStandardScheme getScheme() {
        return new getMarginTrading_resultStandardScheme();
      }
    }

    private static class getMarginTrading_resultStandardScheme extends StandardScheme<getMarginTrading_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginTrading_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new MarginTrading();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginTrading_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginTrading_resultTupleSchemeFactory implements SchemeFactory {
      public getMarginTrading_resultTupleScheme getScheme() {
        return new getMarginTrading_resultTupleScheme();
      }
    }

    private static class getMarginTrading_resultTupleScheme extends TupleScheme<getMarginTrading_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginTrading_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginTrading_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new MarginTrading();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getFinancePerformance_args implements org.apache.thrift.TBase<getFinancePerformance_args, getFinancePerformance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinancePerformance_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinancePerformance_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinancePerformance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinancePerformance_argsTupleSchemeFactory());
    }

    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFinancePerformance_args(android.os.Parcel in) {
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<getFinancePerformance_args> CREATOR = new android.os.Parcelable.Creator<getFinancePerformance_args>() {
      @Override
      public getFinancePerformance_args[] newArray(int size) {
        return new getFinancePerformance_args[size];
      }

      @Override
      public getFinancePerformance_args createFromParcel(android.os.Parcel in) {
        return new getFinancePerformance_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinancePerformance_args.class, metaDataMap);
    }

    public getFinancePerformance_args() {
    }

    public getFinancePerformance_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinancePerformance_args(getFinancePerformance_args other) {
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public getFinancePerformance_args deepCopy() {
      return new getFinancePerformance_args(this);
    }

    public void clear() {
      this.code = null;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinancePerformance_args)
        return this.equals((getFinancePerformance_args)that);
      return false;
    }

    public boolean equals(getFinancePerformance_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinancePerformance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinancePerformance_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFinancePerformance_argsStandardSchemeFactory implements SchemeFactory {
      public getFinancePerformance_argsStandardScheme getScheme() {
        return new getFinancePerformance_argsStandardScheme();
      }
    }

    private static class getFinancePerformance_argsStandardScheme extends StandardScheme<getFinancePerformance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinancePerformance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinancePerformance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinancePerformance_argsTupleSchemeFactory implements SchemeFactory {
      public getFinancePerformance_argsTupleScheme getScheme() {
        return new getFinancePerformance_argsTupleScheme();
      }
    }

    private static class getFinancePerformance_argsTupleScheme extends TupleScheme<getFinancePerformance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinancePerformance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinancePerformance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
      }
    }

  }

  public static class getFinancePerformance_result implements org.apache.thrift.TBase<getFinancePerformance_result, getFinancePerformance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinancePerformance_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinancePerformance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinancePerformance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinancePerformance_resultTupleSchemeFactory());
    }

    private FinancePerformance success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFinancePerformance_result(android.os.Parcel in) {
      this.success= in.readParcelable(getFinancePerformance_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getFinancePerformance_result> CREATOR = new android.os.Parcelable.Creator<getFinancePerformance_result>() {
      @Override
      public getFinancePerformance_result[] newArray(int size) {
        return new getFinancePerformance_result[size];
      }

      @Override
      public getFinancePerformance_result createFromParcel(android.os.Parcel in) {
        return new getFinancePerformance_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinancePerformance.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinancePerformance_result.class, metaDataMap);
    }

    public getFinancePerformance_result() {
    }

    public getFinancePerformance_result(
      FinancePerformance success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinancePerformance_result(getFinancePerformance_result other) {
      if (other.is_set_success()) {
        this.success = new FinancePerformance(other.success);
      }
    }

    public getFinancePerformance_result deepCopy() {
      return new getFinancePerformance_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public FinancePerformance get_success() {
      return this.success;
    }

    public void set_success(FinancePerformance success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((FinancePerformance)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinancePerformance_result)
        return this.equals((getFinancePerformance_result)that);
      return false;
    }

    public boolean equals(getFinancePerformance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinancePerformance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinancePerformance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFinancePerformance_resultStandardSchemeFactory implements SchemeFactory {
      public getFinancePerformance_resultStandardScheme getScheme() {
        return new getFinancePerformance_resultStandardScheme();
      }
    }

    private static class getFinancePerformance_resultStandardScheme extends StandardScheme<getFinancePerformance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinancePerformance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new FinancePerformance();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinancePerformance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinancePerformance_resultTupleSchemeFactory implements SchemeFactory {
      public getFinancePerformance_resultTupleScheme getScheme() {
        return new getFinancePerformance_resultTupleScheme();
      }
    }

    private static class getFinancePerformance_resultTupleScheme extends TupleScheme<getFinancePerformance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinancePerformance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinancePerformance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new FinancePerformance();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getFinanceAnalysis_args implements org.apache.thrift.TBase<getFinanceAnalysis_args, getFinanceAnalysis_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAnalysis_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAnalysis_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField QUARTERLY_FIELD_DESC = new org.apache.thrift.protocol.TField("quarterly", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAnalysis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAnalysis_argsTupleSchemeFactory());
    }

    private String code; // required
    private int year; // required
    private int quarterly; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(code);
      out.writeInt(year);
      out.writeInt(quarterly);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFinanceAnalysis_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.code= in.readString();
      this.year = in.readInt();
      this.quarterly = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getFinanceAnalysis_args> CREATOR = new android.os.Parcelable.Creator<getFinanceAnalysis_args>() {
      @Override
      public getFinanceAnalysis_args[] newArray(int size) {
        return new getFinanceAnalysis_args[size];
      }

      @Override
      public getFinanceAnalysis_args createFromParcel(android.os.Parcel in) {
        return new getFinanceAnalysis_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      YEAR((short)2, "year"),
      QUARTERLY((short)3, "quarterly");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // YEAR
            return YEAR;
          case 3: // QUARTERLY
            return QUARTERLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private static final int __QUARTERLY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUARTERLY, new org.apache.thrift.meta_data.FieldMetaData("quarterly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAnalysis_args.class, metaDataMap);
    }

    public getFinanceAnalysis_args() {
    }

    public getFinanceAnalysis_args(
      String code,
      int year,
      int quarterly)
    {
      this();
      this.code = code;
      this.year = year;
      set_year_isSet(true);
      this.quarterly = quarterly;
      set_quarterly_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAnalysis_args(getFinanceAnalysis_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_code()) {
        this.code = other.code;
      }
      this.year = other.year;
      this.quarterly = other.quarterly;
    }

    public getFinanceAnalysis_args deepCopy() {
      return new getFinanceAnalysis_args(this);
    }

    public void clear() {
      this.code = null;
      set_year_isSet(false);
      this.year = 0;
      set_quarterly_isSet(false);
      this.quarterly = 0;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int get_year() {
      return this.year;
    }

    public void set_year(int year) {
      this.year = year;
      set_year_isSet(true);
    }

    public void unset_year() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean is_set_year() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void set_year_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public int get_quarterly() {
      return this.quarterly;
    }

    public void set_quarterly(int quarterly) {
      this.quarterly = quarterly;
      set_quarterly_isSet(true);
    }

    public void unset_quarterly() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUARTERLY_ISSET_ID);
    }

    /** Returns true if field quarterly is set (has been assigned a value) and false otherwise */
    public boolean is_set_quarterly() {
      return EncodingUtils.testBit(__isset_bitfield, __QUARTERLY_ISSET_ID);
    }

    public void set_quarterly_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUARTERLY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case YEAR:
        if (value == null) {
          unset_year();
        } else {
          set_year((Integer)value);
        }
        break;

      case QUARTERLY:
        if (value == null) {
          unset_quarterly();
        } else {
          set_quarterly((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      case YEAR:
        return get_year();

      case QUARTERLY:
        return get_quarterly();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      case YEAR:
        return is_set_year();
      case QUARTERLY:
        return is_set_quarterly();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAnalysis_args)
        return this.equals((getFinanceAnalysis_args)that);
      return false;
    }

    public boolean equals(getFinanceAnalysis_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_quarterly = true;
      boolean that_present_quarterly = true;
      if (this_present_quarterly || that_present_quarterly) {
        if (!(this_present_quarterly && that_present_quarterly))
          return false;
        if (this.quarterly != that.quarterly)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_year = true;
      list.add(present_year);
      if (present_year)
        list.add(year);

      boolean present_quarterly = true;
      list.add(present_quarterly);
      if (present_quarterly)
        list.add(quarterly);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAnalysis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_year()).compareTo(other.is_set_year());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_year()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_quarterly()).compareTo(other.is_set_quarterly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_quarterly()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quarterly, other.quarterly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAnalysis_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("quarterly:");
      sb.append(this.quarterly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!is_set_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFinanceAnalysis_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceAnalysis_argsStandardScheme getScheme() {
        return new getFinanceAnalysis_argsStandardScheme();
      }
    }

    private static class getFinanceAnalysis_argsStandardScheme extends StandardScheme<getFinanceAnalysis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAnalysis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.set_year_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QUARTERLY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.quarterly = iprot.readI32();
                struct.set_quarterly_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAnalysis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUARTERLY_FIELD_DESC);
        oprot.writeI32(struct.quarterly);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAnalysis_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceAnalysis_argsTupleScheme getScheme() {
        return new getFinanceAnalysis_argsTupleScheme();
      }
    }

    private static class getFinanceAnalysis_argsTupleScheme extends TupleScheme<getFinanceAnalysis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAnalysis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.code);
        BitSet optionals = new BitSet();
        if (struct.is_set_year()) {
          optionals.set(0);
        }
        if (struct.is_set_quarterly()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_year()) {
          oprot.writeI32(struct.year);
        }
        if (struct.is_set_quarterly()) {
          oprot.writeI32(struct.quarterly);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAnalysis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.code = iprot.readString();
        struct.set_code_isSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.set_year_isSet(true);
        }
        if (incoming.get(1)) {
          struct.quarterly = iprot.readI32();
          struct.set_quarterly_isSet(true);
        }
      }
    }

  }

  public static class getFinanceAnalysis_result implements org.apache.thrift.TBase<getFinanceAnalysis_result, getFinanceAnalysis_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAnalysis_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAnalysis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAnalysis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAnalysis_resultTupleSchemeFactory());
    }

    private FinanceAnalysisData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getFinanceAnalysis_result(android.os.Parcel in) {
      this.success= in.readParcelable(getFinanceAnalysis_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getFinanceAnalysis_result> CREATOR = new android.os.Parcelable.Creator<getFinanceAnalysis_result>() {
      @Override
      public getFinanceAnalysis_result[] newArray(int size) {
        return new getFinanceAnalysis_result[size];
      }

      @Override
      public getFinanceAnalysis_result createFromParcel(android.os.Parcel in) {
        return new getFinanceAnalysis_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAnalysisData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAnalysis_result.class, metaDataMap);
    }

    public getFinanceAnalysis_result() {
    }

    public getFinanceAnalysis_result(
      FinanceAnalysisData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAnalysis_result(getFinanceAnalysis_result other) {
      if (other.is_set_success()) {
        this.success = new FinanceAnalysisData(other.success);
      }
    }

    public getFinanceAnalysis_result deepCopy() {
      return new getFinanceAnalysis_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public FinanceAnalysisData get_success() {
      return this.success;
    }

    public void set_success(FinanceAnalysisData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((FinanceAnalysisData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAnalysis_result)
        return this.equals((getFinanceAnalysis_result)that);
      return false;
    }

    public boolean equals(getFinanceAnalysis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAnalysis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAnalysis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFinanceAnalysis_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceAnalysis_resultStandardScheme getScheme() {
        return new getFinanceAnalysis_resultStandardScheme();
      }
    }

    private static class getFinanceAnalysis_resultStandardScheme extends StandardScheme<getFinanceAnalysis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAnalysis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new FinanceAnalysisData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAnalysis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAnalysis_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceAnalysis_resultTupleScheme getScheme() {
        return new getFinanceAnalysis_resultTupleScheme();
      }
    }

    private static class getFinanceAnalysis_resultTupleScheme extends TupleScheme<getFinanceAnalysis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAnalysis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAnalysis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new FinanceAnalysisData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getComponentStock_args implements org.apache.thrift.TBase<getComponentStock_args, getComponentStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComponentStock_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComponentStock_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RF_FIELD_DESC = new org.apache.thrift.protocol.TField("rf", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComponentStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComponentStock_argsTupleSchemeFactory());
    }

    private String code; // required
    private RangeFlag rf; // required
    private int count; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(code);
      out.writeInt(rf.getValue());
      out.writeInt(count);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getComponentStock_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.code= in.readString();
      this.rf = RangeFlag.findByValue(in.readInt());
      this.count = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getComponentStock_args> CREATOR = new android.os.Parcelable.Creator<getComponentStock_args>() {
      @Override
      public getComponentStock_args[] newArray(int size) {
        return new getComponentStock_args[size];
      }

      @Override
      public getComponentStock_args createFromParcel(android.os.Parcel in) {
        return new getComponentStock_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      /**
       * 
       * @see RangeFlag
       */
      RF((short)2, "rf"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // RF
            return RF;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RF, new org.apache.thrift.meta_data.FieldMetaData("rf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RangeFlag.class)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComponentStock_args.class, metaDataMap);
    }

    public getComponentStock_args() {
    }

    public getComponentStock_args(
      String code,
      RangeFlag rf,
      int count)
    {
      this();
      this.code = code;
      this.rf = rf;
      this.count = count;
      set_count_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComponentStock_args(getComponentStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_code()) {
        this.code = other.code;
      }
      if (other.is_set_rf()) {
        this.rf = other.rf;
      }
      this.count = other.count;
    }

    public getComponentStock_args deepCopy() {
      return new getComponentStock_args(this);
    }

    public void clear() {
      this.code = null;
      this.rf = null;
      set_count_isSet(false);
      this.count = 0;
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    /**
     * 
     * @see RangeFlag
     */
    public RangeFlag get_rf() {
      return this.rf;
    }

    /**
     * 
     * @see RangeFlag
     */
    public void set_rf(RangeFlag rf) {
      this.rf = rf;
    }

    public void unset_rf() {
      this.rf = null;
    }

    /** Returns true if field rf is set (has been assigned a value) and false otherwise */
    public boolean is_set_rf() {
      return this.rf != null;
    }

    public void set_rf_isSet(boolean value) {
      if (!value) {
        this.rf = null;
      }
    }

    public int get_count() {
      return this.count;
    }

    public void set_count(int count) {
      this.count = count;
      set_count_isSet(true);
    }

    public void unset_count() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean is_set_count() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void set_count_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case RF:
        if (value == null) {
          unset_rf();
        } else {
          set_rf((RangeFlag)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unset_count();
        } else {
          set_count((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return get_code();

      case RF:
        return get_rf();

      case COUNT:
        return get_count();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return is_set_code();
      case RF:
        return is_set_rf();
      case COUNT:
        return is_set_count();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComponentStock_args)
        return this.equals((getComponentStock_args)that);
      return false;
    }

    public boolean equals(getComponentStock_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_rf = true && this.is_set_rf();
      boolean that_present_rf = true && that.is_set_rf();
      if (this_present_rf || that_present_rf) {
        if (!(this_present_rf && that_present_rf))
          return false;
        if (!this.rf.equals(that.rf))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_rf = true && (is_set_rf());
      list.add(present_rf);
      if (present_rf)
        list.add(rf.getValue());

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(getComponentStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_rf()).compareTo(other.is_set_rf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_rf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rf, other.rf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_count()).compareTo(other.is_set_count());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_count()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComponentStock_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rf:");
      if (this.rf == null) {
        sb.append("null");
      } else {
        sb.append(this.rf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getComponentStock_argsStandardSchemeFactory implements SchemeFactory {
      public getComponentStock_argsStandardScheme getScheme() {
        return new getComponentStock_argsStandardScheme();
      }
    }

    private static class getComponentStock_argsStandardScheme extends StandardScheme<getComponentStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComponentStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
                struct.set_rf_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.set_count_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComponentStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.rf != null) {
          oprot.writeFieldBegin(RF_FIELD_DESC);
          oprot.writeI32(struct.rf.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComponentStock_argsTupleSchemeFactory implements SchemeFactory {
      public getComponentStock_argsTupleScheme getScheme() {
        return new getComponentStock_argsTupleScheme();
      }
    }

    private static class getComponentStock_argsTupleScheme extends TupleScheme<getComponentStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComponentStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_code()) {
          optionals.set(0);
        }
        if (struct.is_set_rf()) {
          optionals.set(1);
        }
        if (struct.is_set_count()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
        if (struct.is_set_rf()) {
          oprot.writeI32(struct.rf.getValue());
        }
        if (struct.is_set_count()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComponentStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
        if (incoming.get(1)) {
          struct.rf = com.rjzd.aistock.api.RangeFlag.findByValue(iprot.readI32());
          struct.set_rf_isSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.set_count_isSet(true);
        }
      }
    }

  }

  public static class getComponentStock_result implements org.apache.thrift.TBase<getComponentStock_result, getComponentStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComponentStock_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComponentStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComponentStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComponentStock_resultTupleSchemeFactory());
    }

    private BasicStockList success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getComponentStock_result(android.os.Parcel in) {
      this.success= in.readParcelable(getComponentStock_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getComponentStock_result> CREATOR = new android.os.Parcelable.Creator<getComponentStock_result>() {
      @Override
      public getComponentStock_result[] newArray(int size) {
        return new getComponentStock_result[size];
      }

      @Override
      public getComponentStock_result createFromParcel(android.os.Parcel in) {
        return new getComponentStock_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BasicStockList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComponentStock_result.class, metaDataMap);
    }

    public getComponentStock_result() {
    }

    public getComponentStock_result(
      BasicStockList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComponentStock_result(getComponentStock_result other) {
      if (other.is_set_success()) {
        this.success = new BasicStockList(other.success);
      }
    }

    public getComponentStock_result deepCopy() {
      return new getComponentStock_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public BasicStockList get_success() {
      return this.success;
    }

    public void set_success(BasicStockList success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((BasicStockList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComponentStock_result)
        return this.equals((getComponentStock_result)that);
      return false;
    }

    public boolean equals(getComponentStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getComponentStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComponentStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getComponentStock_resultStandardSchemeFactory implements SchemeFactory {
      public getComponentStock_resultStandardScheme getScheme() {
        return new getComponentStock_resultStandardScheme();
      }
    }

    private static class getComponentStock_resultStandardScheme extends StandardScheme<getComponentStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComponentStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new BasicStockList();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComponentStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComponentStock_resultTupleSchemeFactory implements SchemeFactory {
      public getComponentStock_resultTupleScheme getScheme() {
        return new getComponentStock_resultTupleScheme();
      }
    }

    private static class getComponentStock_resultTupleScheme extends TupleScheme<getComponentStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComponentStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComponentStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new BasicStockList();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

}
