/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 股票Tick数据：当前价、最高价、最低价、昨开盘价、今收盘价、成交额、市盈率 ……
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class StockTickData implements org.apache.thrift.TBase<StockTickData, StockTickData._Fields>, java.io.Serializable, Cloneable, Comparable<StockTickData>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockTickData");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LATEST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("high", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("low", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PREV_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("prevClose", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField PER_FIELD_DESC = new org.apache.thrift.protocol.TField("per", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField NMC_FIELD_DESC = new org.apache.thrift.protocol.TField("nmc", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MKT_CAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mktCap", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RISE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("riseNum", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FAIR_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fairNum", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FALL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fallNum", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField FIVE_POSITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fivePositionList", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField PREDICTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prediction", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PREDICT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predictDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TOTAL_STOCK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalStockNum", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField TRADABLE_STOCK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("tradableStockNum", org.apache.thrift.protocol.TType.DOUBLE, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StockTickDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StockTickDataTupleSchemeFactory());
  }

  private String code; // required
  private String name; // required
  private String time; // required
  private double latestPrice; // required
  private double range; // required
  private double high; // required
  private double low; // required
  private double open; // required
  private double prevClose; // required
  private double turnover; // required
  private double amount; // required
  private long volume; // required
  private double per; // optional
  private double nmc; // optional
  private double mktCap; // optional
  private int riseNum; // optional
  private int fairNum; // optional
  private int fallNum; // optional
  private List<FivePosition> fivePositionList; // optional
  private RiseOrFallPrediction prediction; // optional
  private String predictDate; // optional
  private double totalStockNum; // optional
  private double tradableStockNum; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: int
    out.writeInt(__isset_bitfield);

    out.writeString(code);
    out.writeString(name);
    out.writeString(time);
    out.writeDouble(latestPrice);
    out.writeDouble(range);
    out.writeDouble(high);
    out.writeDouble(low);
    out.writeDouble(open);
    out.writeDouble(prevClose);
    out.writeDouble(turnover);
    out.writeDouble(amount);
    out.writeLong(volume);
    out.writeDouble(per);
    out.writeDouble(nmc);
    out.writeDouble(mktCap);
    out.writeInt(riseNum);
    out.writeInt(fairNum);
    out.writeInt(fallNum);
    out.writeTypedList(fivePositionList);
    out.writeInt(prediction.getValue());
    out.writeString(predictDate);
    out.writeDouble(totalStockNum);
    out.writeDouble(tradableStockNum);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public StockTickData(android.os.Parcel in) {
    //primitive bitfield of type: int
    __isset_bitfield = in.readInt();

    this.code= in.readString();
    this.name= in.readString();
    this.time= in.readString();
    this.latestPrice = in.readDouble();
    this.range = in.readDouble();
    this.high = in.readDouble();
    this.low = in.readDouble();
    this.open = in.readDouble();
    this.prevClose = in.readDouble();
    this.turnover = in.readDouble();
    this.amount = in.readDouble();
    this.volume = in.readLong();
    this.per = in.readDouble();
    this.nmc = in.readDouble();
    this.mktCap = in.readDouble();
    this.riseNum = in.readInt();
    this.fairNum = in.readInt();
    this.fallNum = in.readInt();
    this.fivePositionList = new ArrayList<FivePosition>();
    in.readTypedList(this.fivePositionList, FivePosition.CREATOR);
    this.prediction = RiseOrFallPrediction.findByValue(in.readInt());
    this.predictDate= in.readString();
    this.totalStockNum = in.readDouble();
    this.tradableStockNum = in.readDouble();
  }

  public static final android.os.Parcelable.Creator<StockTickData> CREATOR = new android.os.Parcelable.Creator<StockTickData>() {
    @Override
    public StockTickData[] newArray(int size) {
      return new StockTickData[size];
    }

    @Override
    public StockTickData createFromParcel(android.os.Parcel in) {
      return new StockTickData(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    NAME((short)2, "name"),
    TIME((short)3, "time"),
    LATEST_PRICE((short)4, "latestPrice"),
    RANGE((short)5, "range"),
    HIGH((short)6, "high"),
    LOW((short)7, "low"),
    OPEN((short)8, "open"),
    PREV_CLOSE((short)9, "prevClose"),
    TURNOVER((short)10, "turnover"),
    AMOUNT((short)11, "amount"),
    VOLUME((short)12, "volume"),
    PER((short)13, "per"),
    NMC((short)14, "nmc"),
    MKT_CAP((short)15, "mktCap"),
    RISE_NUM((short)16, "riseNum"),
    FAIR_NUM((short)17, "fairNum"),
    FALL_NUM((short)18, "fallNum"),
    FIVE_POSITION_LIST((short)19, "fivePositionList"),
    /**
     * 
     * @see RiseOrFallPrediction
     */
    PREDICTION((short)20, "prediction"),
    PREDICT_DATE((short)21, "predictDate"),
    TOTAL_STOCK_NUM((short)22, "totalStockNum"),
    TRADABLE_STOCK_NUM((short)23, "tradableStockNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // NAME
          return NAME;
        case 3: // TIME
          return TIME;
        case 4: // LATEST_PRICE
          return LATEST_PRICE;
        case 5: // RANGE
          return RANGE;
        case 6: // HIGH
          return HIGH;
        case 7: // LOW
          return LOW;
        case 8: // OPEN
          return OPEN;
        case 9: // PREV_CLOSE
          return PREV_CLOSE;
        case 10: // TURNOVER
          return TURNOVER;
        case 11: // AMOUNT
          return AMOUNT;
        case 12: // VOLUME
          return VOLUME;
        case 13: // PER
          return PER;
        case 14: // NMC
          return NMC;
        case 15: // MKT_CAP
          return MKT_CAP;
        case 16: // RISE_NUM
          return RISE_NUM;
        case 17: // FAIR_NUM
          return FAIR_NUM;
        case 18: // FALL_NUM
          return FALL_NUM;
        case 19: // FIVE_POSITION_LIST
          return FIVE_POSITION_LIST;
        case 20: // PREDICTION
          return PREDICTION;
        case 21: // PREDICT_DATE
          return PREDICT_DATE;
        case 22: // TOTAL_STOCK_NUM
          return TOTAL_STOCK_NUM;
        case 23: // TRADABLE_STOCK_NUM
          return TRADABLE_STOCK_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LATESTPRICE_ISSET_ID = 0;
  private static final int __RANGE_ISSET_ID = 1;
  private static final int __HIGH_ISSET_ID = 2;
  private static final int __LOW_ISSET_ID = 3;
  private static final int __OPEN_ISSET_ID = 4;
  private static final int __PREVCLOSE_ISSET_ID = 5;
  private static final int __TURNOVER_ISSET_ID = 6;
  private static final int __AMOUNT_ISSET_ID = 7;
  private static final int __VOLUME_ISSET_ID = 8;
  private static final int __PER_ISSET_ID = 9;
  private static final int __NMC_ISSET_ID = 10;
  private static final int __MKTCAP_ISSET_ID = 11;
  private static final int __RISENUM_ISSET_ID = 12;
  private static final int __FAIRNUM_ISSET_ID = 13;
  private static final int __FALLNUM_ISSET_ID = 14;
  private static final int __TOTALSTOCKNUM_ISSET_ID = 15;
  private static final int __TRADABLESTOCKNUM_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PER,_Fields.NMC,_Fields.MKT_CAP,_Fields.RISE_NUM,_Fields.FAIR_NUM,_Fields.FALL_NUM,_Fields.FIVE_POSITION_LIST,_Fields.PREDICTION,_Fields.PREDICT_DATE,_Fields.TOTAL_STOCK_NUM,_Fields.TRADABLE_STOCK_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("latestPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIGH, new org.apache.thrift.meta_data.FieldMetaData("high", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOW, new org.apache.thrift.meta_data.FieldMetaData("low", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREV_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("prevClose", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PER, new org.apache.thrift.meta_data.FieldMetaData("per", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NMC, new org.apache.thrift.meta_data.FieldMetaData("nmc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MKT_CAP, new org.apache.thrift.meta_data.FieldMetaData("mktCap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISE_NUM, new org.apache.thrift.meta_data.FieldMetaData("riseNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAIR_NUM, new org.apache.thrift.meta_data.FieldMetaData("fairNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FALL_NUM, new org.apache.thrift.meta_data.FieldMetaData("fallNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIVE_POSITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("fivePositionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FivePosition.class))));
    tmpMap.put(_Fields.PREDICTION, new org.apache.thrift.meta_data.FieldMetaData("prediction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RiseOrFallPrediction.class)));
    tmpMap.put(_Fields.PREDICT_DATE, new org.apache.thrift.meta_data.FieldMetaData("predictDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_STOCK_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalStockNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADABLE_STOCK_NUM, new org.apache.thrift.meta_data.FieldMetaData("tradableStockNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockTickData.class, metaDataMap);
  }

  public StockTickData() {
  }

  public StockTickData(
    String code,
    String name,
    String time,
    double latestPrice,
    double range,
    double high,
    double low,
    double open,
    double prevClose,
    double turnover,
    double amount,
    long volume)
  {
    this();
    this.code = code;
    this.name = name;
    this.time = time;
    this.latestPrice = latestPrice;
    set_latestPrice_isSet(true);
    this.range = range;
    set_range_isSet(true);
    this.high = high;
    set_high_isSet(true);
    this.low = low;
    set_low_isSet(true);
    this.open = open;
    set_open_isSet(true);
    this.prevClose = prevClose;
    set_prevClose_isSet(true);
    this.turnover = turnover;
    set_turnover_isSet(true);
    this.amount = amount;
    set_amount_isSet(true);
    this.volume = volume;
    set_volume_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockTickData(StockTickData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_code()) {
      this.code = other.code;
    }
    if (other.is_set_name()) {
      this.name = other.name;
    }
    if (other.is_set_time()) {
      this.time = other.time;
    }
    this.latestPrice = other.latestPrice;
    this.range = other.range;
    this.high = other.high;
    this.low = other.low;
    this.open = other.open;
    this.prevClose = other.prevClose;
    this.turnover = other.turnover;
    this.amount = other.amount;
    this.volume = other.volume;
    this.per = other.per;
    this.nmc = other.nmc;
    this.mktCap = other.mktCap;
    this.riseNum = other.riseNum;
    this.fairNum = other.fairNum;
    this.fallNum = other.fallNum;
    if (other.is_set_fivePositionList()) {
      List<FivePosition> __this__fivePositionList = new ArrayList<FivePosition>(other.fivePositionList.size());
      for (FivePosition other_element : other.fivePositionList) {
        __this__fivePositionList.add(new FivePosition(other_element));
      }
      this.fivePositionList = __this__fivePositionList;
    }
    if (other.is_set_prediction()) {
      this.prediction = other.prediction;
    }
    if (other.is_set_predictDate()) {
      this.predictDate = other.predictDate;
    }
    this.totalStockNum = other.totalStockNum;
    this.tradableStockNum = other.tradableStockNum;
  }

  public StockTickData deepCopy() {
    return new StockTickData(this);
  }

  public void clear() {
    this.code = null;
    this.name = null;
    this.time = null;
    set_latestPrice_isSet(false);
    this.latestPrice = 0.0;
    set_range_isSet(false);
    this.range = 0.0;
    set_high_isSet(false);
    this.high = 0.0;
    set_low_isSet(false);
    this.low = 0.0;
    set_open_isSet(false);
    this.open = 0.0;
    set_prevClose_isSet(false);
    this.prevClose = 0.0;
    set_turnover_isSet(false);
    this.turnover = 0.0;
    set_amount_isSet(false);
    this.amount = 0.0;
    set_volume_isSet(false);
    this.volume = 0;
    set_per_isSet(false);
    this.per = 0.0;
    set_nmc_isSet(false);
    this.nmc = 0.0;
    set_mktCap_isSet(false);
    this.mktCap = 0.0;
    set_riseNum_isSet(false);
    this.riseNum = 0;
    set_fairNum_isSet(false);
    this.fairNum = 0;
    set_fallNum_isSet(false);
    this.fallNum = 0;
    if (this.fivePositionList != null) {
      this.fivePositionList.clear();
    }
    this.prediction = null;
    this.predictDate = null;
    set_totalStockNum_isSet(false);
    this.totalStockNum = 0.0;
    set_tradableStockNum_isSet(false);
    this.tradableStockNum = 0.0;
  }

  public String get_code() {
    return this.code;
  }

  public void set_code(String code) {
    this.code = code;
  }

  public void unset_code() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean is_set_code() {
    return this.code != null;
  }

  public void set_code_isSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String get_name() {
    return this.name;
  }

  public void set_name(String name) {
    this.name = name;
  }

  public void unset_name() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean is_set_name() {
    return this.name != null;
  }

  public void set_name_isSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String get_time() {
    return this.time;
  }

  public void set_time(String time) {
    this.time = time;
  }

  public void unset_time() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean is_set_time() {
    return this.time != null;
  }

  public void set_time_isSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public double get_latestPrice() {
    return this.latestPrice;
  }

  public void set_latestPrice(double latestPrice) {
    this.latestPrice = latestPrice;
    set_latestPrice_isSet(true);
  }

  public void unset_latestPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATESTPRICE_ISSET_ID);
  }

  /** Returns true if field latestPrice is set (has been assigned a value) and false otherwise */
  public boolean is_set_latestPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LATESTPRICE_ISSET_ID);
  }

  public void set_latestPrice_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATESTPRICE_ISSET_ID, value);
  }

  public double get_range() {
    return this.range;
  }

  public void set_range(double range) {
    this.range = range;
    set_range_isSet(true);
  }

  public void unset_range() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean is_set_range() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  public void set_range_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
  }

  public double get_high() {
    return this.high;
  }

  public void set_high(double high) {
    this.high = high;
    set_high_isSet(true);
  }

  public void unset_high() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  /** Returns true if field high is set (has been assigned a value) and false otherwise */
  public boolean is_set_high() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  public void set_high_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGH_ISSET_ID, value);
  }

  public double get_low() {
    return this.low;
  }

  public void set_low(double low) {
    this.low = low;
    set_low_isSet(true);
  }

  public void unset_low() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  /** Returns true if field low is set (has been assigned a value) and false otherwise */
  public boolean is_set_low() {
    return EncodingUtils.testBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  public void set_low_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOW_ISSET_ID, value);
  }

  public double get_open() {
    return this.open;
  }

  public void set_open(double open) {
    this.open = open;
    set_open_isSet(true);
  }

  public void unset_open() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean is_set_open() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void set_open_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public double get_prevClose() {
    return this.prevClose;
  }

  public void set_prevClose(double prevClose) {
    this.prevClose = prevClose;
    set_prevClose_isSet(true);
  }

  public void unset_prevClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVCLOSE_ISSET_ID);
  }

  /** Returns true if field prevClose is set (has been assigned a value) and false otherwise */
  public boolean is_set_prevClose() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVCLOSE_ISSET_ID);
  }

  public void set_prevClose_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVCLOSE_ISSET_ID, value);
  }

  public double get_turnover() {
    return this.turnover;
  }

  public void set_turnover(double turnover) {
    this.turnover = turnover;
    set_turnover_isSet(true);
  }

  public void unset_turnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean is_set_turnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void set_turnover_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public double get_amount() {
    return this.amount;
  }

  public void set_amount(double amount) {
    this.amount = amount;
    set_amount_isSet(true);
  }

  public void unset_amount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean is_set_amount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void set_amount_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public long get_volume() {
    return this.volume;
  }

  public void set_volume(long volume) {
    this.volume = volume;
    set_volume_isSet(true);
  }

  public void unset_volume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean is_set_volume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void set_volume_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public double get_per() {
    return this.per;
  }

  public void set_per(double per) {
    this.per = per;
    set_per_isSet(true);
  }

  public void unset_per() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PER_ISSET_ID);
  }

  /** Returns true if field per is set (has been assigned a value) and false otherwise */
  public boolean is_set_per() {
    return EncodingUtils.testBit(__isset_bitfield, __PER_ISSET_ID);
  }

  public void set_per_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PER_ISSET_ID, value);
  }

  public double get_nmc() {
    return this.nmc;
  }

  public void set_nmc(double nmc) {
    this.nmc = nmc;
    set_nmc_isSet(true);
  }

  public void unset_nmc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NMC_ISSET_ID);
  }

  /** Returns true if field nmc is set (has been assigned a value) and false otherwise */
  public boolean is_set_nmc() {
    return EncodingUtils.testBit(__isset_bitfield, __NMC_ISSET_ID);
  }

  public void set_nmc_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NMC_ISSET_ID, value);
  }

  public double get_mktCap() {
    return this.mktCap;
  }

  public void set_mktCap(double mktCap) {
    this.mktCap = mktCap;
    set_mktCap_isSet(true);
  }

  public void unset_mktCap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MKTCAP_ISSET_ID);
  }

  /** Returns true if field mktCap is set (has been assigned a value) and false otherwise */
  public boolean is_set_mktCap() {
    return EncodingUtils.testBit(__isset_bitfield, __MKTCAP_ISSET_ID);
  }

  public void set_mktCap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MKTCAP_ISSET_ID, value);
  }

  public int get_riseNum() {
    return this.riseNum;
  }

  public void set_riseNum(int riseNum) {
    this.riseNum = riseNum;
    set_riseNum_isSet(true);
  }

  public void unset_riseNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISENUM_ISSET_ID);
  }

  /** Returns true if field riseNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_riseNum() {
    return EncodingUtils.testBit(__isset_bitfield, __RISENUM_ISSET_ID);
  }

  public void set_riseNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISENUM_ISSET_ID, value);
  }

  public int get_fairNum() {
    return this.fairNum;
  }

  public void set_fairNum(int fairNum) {
    this.fairNum = fairNum;
    set_fairNum_isSet(true);
  }

  public void unset_fairNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAIRNUM_ISSET_ID);
  }

  /** Returns true if field fairNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_fairNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FAIRNUM_ISSET_ID);
  }

  public void set_fairNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAIRNUM_ISSET_ID, value);
  }

  public int get_fallNum() {
    return this.fallNum;
  }

  public void set_fallNum(int fallNum) {
    this.fallNum = fallNum;
    set_fallNum_isSet(true);
  }

  public void unset_fallNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FALLNUM_ISSET_ID);
  }

  /** Returns true if field fallNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_fallNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FALLNUM_ISSET_ID);
  }

  public void set_fallNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FALLNUM_ISSET_ID, value);
  }

  public int get_fivePositionList_size() {
    return (this.fivePositionList == null) ? 0 : this.fivePositionList.size();
  }

  public java.util.Iterator<FivePosition> get_fivePositionList_iterator() {
    return (this.fivePositionList == null) ? null : this.fivePositionList.iterator();
  }

  public void add_to_fivePositionList(FivePosition elem) {
    if (this.fivePositionList == null) {
      this.fivePositionList = new ArrayList<FivePosition>();
    }
    this.fivePositionList.add(elem);
  }

  public List<FivePosition> get_fivePositionList() {
    return this.fivePositionList;
  }

  public void set_fivePositionList(List<FivePosition> fivePositionList) {
    this.fivePositionList = fivePositionList;
  }

  public void unset_fivePositionList() {
    this.fivePositionList = null;
  }

  /** Returns true if field fivePositionList is set (has been assigned a value) and false otherwise */
  public boolean is_set_fivePositionList() {
    return this.fivePositionList != null;
  }

  public void set_fivePositionList_isSet(boolean value) {
    if (!value) {
      this.fivePositionList = null;
    }
  }

  /**
   * 
   * @see RiseOrFallPrediction
   */
  public RiseOrFallPrediction get_prediction() {
    return this.prediction;
  }

  /**
   * 
   * @see RiseOrFallPrediction
   */
  public void set_prediction(RiseOrFallPrediction prediction) {
    this.prediction = prediction;
  }

  public void unset_prediction() {
    this.prediction = null;
  }

  /** Returns true if field prediction is set (has been assigned a value) and false otherwise */
  public boolean is_set_prediction() {
    return this.prediction != null;
  }

  public void set_prediction_isSet(boolean value) {
    if (!value) {
      this.prediction = null;
    }
  }

  public String get_predictDate() {
    return this.predictDate;
  }

  public void set_predictDate(String predictDate) {
    this.predictDate = predictDate;
  }

  public void unset_predictDate() {
    this.predictDate = null;
  }

  /** Returns true if field predictDate is set (has been assigned a value) and false otherwise */
  public boolean is_set_predictDate() {
    return this.predictDate != null;
  }

  public void set_predictDate_isSet(boolean value) {
    if (!value) {
      this.predictDate = null;
    }
  }

  public double get_totalStockNum() {
    return this.totalStockNum;
  }

  public void set_totalStockNum(double totalStockNum) {
    this.totalStockNum = totalStockNum;
    set_totalStockNum_isSet(true);
  }

  public void unset_totalStockNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSTOCKNUM_ISSET_ID);
  }

  /** Returns true if field totalStockNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_totalStockNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSTOCKNUM_ISSET_ID);
  }

  public void set_totalStockNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSTOCKNUM_ISSET_ID, value);
  }

  public double get_tradableStockNum() {
    return this.tradableStockNum;
  }

  public void set_tradableStockNum(double tradableStockNum) {
    this.tradableStockNum = tradableStockNum;
    set_tradableStockNum_isSet(true);
  }

  public void unset_tradableStockNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADABLESTOCKNUM_ISSET_ID);
  }

  /** Returns true if field tradableStockNum is set (has been assigned a value) and false otherwise */
  public boolean is_set_tradableStockNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADABLESTOCKNUM_ISSET_ID);
  }

  public void set_tradableStockNum_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADABLESTOCKNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unset_code();
      } else {
        set_code((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unset_time();
      } else {
        set_time((String)value);
      }
      break;

    case LATEST_PRICE:
      if (value == null) {
        unset_latestPrice();
      } else {
        set_latestPrice((Double)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unset_range();
      } else {
        set_range((Double)value);
      }
      break;

    case HIGH:
      if (value == null) {
        unset_high();
      } else {
        set_high((Double)value);
      }
      break;

    case LOW:
      if (value == null) {
        unset_low();
      } else {
        set_low((Double)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unset_open();
      } else {
        set_open((Double)value);
      }
      break;

    case PREV_CLOSE:
      if (value == null) {
        unset_prevClose();
      } else {
        set_prevClose((Double)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unset_turnover();
      } else {
        set_turnover((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unset_amount();
      } else {
        set_amount((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unset_volume();
      } else {
        set_volume((Long)value);
      }
      break;

    case PER:
      if (value == null) {
        unset_per();
      } else {
        set_per((Double)value);
      }
      break;

    case NMC:
      if (value == null) {
        unset_nmc();
      } else {
        set_nmc((Double)value);
      }
      break;

    case MKT_CAP:
      if (value == null) {
        unset_mktCap();
      } else {
        set_mktCap((Double)value);
      }
      break;

    case RISE_NUM:
      if (value == null) {
        unset_riseNum();
      } else {
        set_riseNum((Integer)value);
      }
      break;

    case FAIR_NUM:
      if (value == null) {
        unset_fairNum();
      } else {
        set_fairNum((Integer)value);
      }
      break;

    case FALL_NUM:
      if (value == null) {
        unset_fallNum();
      } else {
        set_fallNum((Integer)value);
      }
      break;

    case FIVE_POSITION_LIST:
      if (value == null) {
        unset_fivePositionList();
      } else {
        set_fivePositionList((List<FivePosition>)value);
      }
      break;

    case PREDICTION:
      if (value == null) {
        unset_prediction();
      } else {
        set_prediction((RiseOrFallPrediction)value);
      }
      break;

    case PREDICT_DATE:
      if (value == null) {
        unset_predictDate();
      } else {
        set_predictDate((String)value);
      }
      break;

    case TOTAL_STOCK_NUM:
      if (value == null) {
        unset_totalStockNum();
      } else {
        set_totalStockNum((Double)value);
      }
      break;

    case TRADABLE_STOCK_NUM:
      if (value == null) {
        unset_tradableStockNum();
      } else {
        set_tradableStockNum((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return get_code();

    case NAME:
      return get_name();

    case TIME:
      return get_time();

    case LATEST_PRICE:
      return get_latestPrice();

    case RANGE:
      return get_range();

    case HIGH:
      return get_high();

    case LOW:
      return get_low();

    case OPEN:
      return get_open();

    case PREV_CLOSE:
      return get_prevClose();

    case TURNOVER:
      return get_turnover();

    case AMOUNT:
      return get_amount();

    case VOLUME:
      return get_volume();

    case PER:
      return get_per();

    case NMC:
      return get_nmc();

    case MKT_CAP:
      return get_mktCap();

    case RISE_NUM:
      return get_riseNum();

    case FAIR_NUM:
      return get_fairNum();

    case FALL_NUM:
      return get_fallNum();

    case FIVE_POSITION_LIST:
      return get_fivePositionList();

    case PREDICTION:
      return get_prediction();

    case PREDICT_DATE:
      return get_predictDate();

    case TOTAL_STOCK_NUM:
      return get_totalStockNum();

    case TRADABLE_STOCK_NUM:
      return get_tradableStockNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return is_set_code();
    case NAME:
      return is_set_name();
    case TIME:
      return is_set_time();
    case LATEST_PRICE:
      return is_set_latestPrice();
    case RANGE:
      return is_set_range();
    case HIGH:
      return is_set_high();
    case LOW:
      return is_set_low();
    case OPEN:
      return is_set_open();
    case PREV_CLOSE:
      return is_set_prevClose();
    case TURNOVER:
      return is_set_turnover();
    case AMOUNT:
      return is_set_amount();
    case VOLUME:
      return is_set_volume();
    case PER:
      return is_set_per();
    case NMC:
      return is_set_nmc();
    case MKT_CAP:
      return is_set_mktCap();
    case RISE_NUM:
      return is_set_riseNum();
    case FAIR_NUM:
      return is_set_fairNum();
    case FALL_NUM:
      return is_set_fallNum();
    case FIVE_POSITION_LIST:
      return is_set_fivePositionList();
    case PREDICTION:
      return is_set_prediction();
    case PREDICT_DATE:
      return is_set_predictDate();
    case TOTAL_STOCK_NUM:
      return is_set_totalStockNum();
    case TRADABLE_STOCK_NUM:
      return is_set_tradableStockNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StockTickData)
      return this.equals((StockTickData)that);
    return false;
  }

  public boolean equals(StockTickData that) {
    if (that == null)
      return false;

    boolean this_present_code = true && this.is_set_code();
    boolean that_present_code = true && that.is_set_code();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.is_set_name();
    boolean that_present_name = true && that.is_set_name();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_time = true && this.is_set_time();
    boolean that_present_time = true && that.is_set_time();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_latestPrice = true;
    boolean that_present_latestPrice = true;
    if (this_present_latestPrice || that_present_latestPrice) {
      if (!(this_present_latestPrice && that_present_latestPrice))
        return false;
      if (this.latestPrice != that.latestPrice)
        return false;
    }

    boolean this_present_range = true;
    boolean that_present_range = true;
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (this.range != that.range)
        return false;
    }

    boolean this_present_high = true;
    boolean that_present_high = true;
    if (this_present_high || that_present_high) {
      if (!(this_present_high && that_present_high))
        return false;
      if (this.high != that.high)
        return false;
    }

    boolean this_present_low = true;
    boolean that_present_low = true;
    if (this_present_low || that_present_low) {
      if (!(this_present_low && that_present_low))
        return false;
      if (this.low != that.low)
        return false;
    }

    boolean this_present_open = true;
    boolean that_present_open = true;
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_prevClose = true;
    boolean that_present_prevClose = true;
    if (this_present_prevClose || that_present_prevClose) {
      if (!(this_present_prevClose && that_present_prevClose))
        return false;
      if (this.prevClose != that.prevClose)
        return false;
    }

    boolean this_present_turnover = true;
    boolean that_present_turnover = true;
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_per = true && this.is_set_per();
    boolean that_present_per = true && that.is_set_per();
    if (this_present_per || that_present_per) {
      if (!(this_present_per && that_present_per))
        return false;
      if (this.per != that.per)
        return false;
    }

    boolean this_present_nmc = true && this.is_set_nmc();
    boolean that_present_nmc = true && that.is_set_nmc();
    if (this_present_nmc || that_present_nmc) {
      if (!(this_present_nmc && that_present_nmc))
        return false;
      if (this.nmc != that.nmc)
        return false;
    }

    boolean this_present_mktCap = true && this.is_set_mktCap();
    boolean that_present_mktCap = true && that.is_set_mktCap();
    if (this_present_mktCap || that_present_mktCap) {
      if (!(this_present_mktCap && that_present_mktCap))
        return false;
      if (this.mktCap != that.mktCap)
        return false;
    }

    boolean this_present_riseNum = true && this.is_set_riseNum();
    boolean that_present_riseNum = true && that.is_set_riseNum();
    if (this_present_riseNum || that_present_riseNum) {
      if (!(this_present_riseNum && that_present_riseNum))
        return false;
      if (this.riseNum != that.riseNum)
        return false;
    }

    boolean this_present_fairNum = true && this.is_set_fairNum();
    boolean that_present_fairNum = true && that.is_set_fairNum();
    if (this_present_fairNum || that_present_fairNum) {
      if (!(this_present_fairNum && that_present_fairNum))
        return false;
      if (this.fairNum != that.fairNum)
        return false;
    }

    boolean this_present_fallNum = true && this.is_set_fallNum();
    boolean that_present_fallNum = true && that.is_set_fallNum();
    if (this_present_fallNum || that_present_fallNum) {
      if (!(this_present_fallNum && that_present_fallNum))
        return false;
      if (this.fallNum != that.fallNum)
        return false;
    }

    boolean this_present_fivePositionList = true && this.is_set_fivePositionList();
    boolean that_present_fivePositionList = true && that.is_set_fivePositionList();
    if (this_present_fivePositionList || that_present_fivePositionList) {
      if (!(this_present_fivePositionList && that_present_fivePositionList))
        return false;
      if (!this.fivePositionList.equals(that.fivePositionList))
        return false;
    }

    boolean this_present_prediction = true && this.is_set_prediction();
    boolean that_present_prediction = true && that.is_set_prediction();
    if (this_present_prediction || that_present_prediction) {
      if (!(this_present_prediction && that_present_prediction))
        return false;
      if (!this.prediction.equals(that.prediction))
        return false;
    }

    boolean this_present_predictDate = true && this.is_set_predictDate();
    boolean that_present_predictDate = true && that.is_set_predictDate();
    if (this_present_predictDate || that_present_predictDate) {
      if (!(this_present_predictDate && that_present_predictDate))
        return false;
      if (!this.predictDate.equals(that.predictDate))
        return false;
    }

    boolean this_present_totalStockNum = true && this.is_set_totalStockNum();
    boolean that_present_totalStockNum = true && that.is_set_totalStockNum();
    if (this_present_totalStockNum || that_present_totalStockNum) {
      if (!(this_present_totalStockNum && that_present_totalStockNum))
        return false;
      if (this.totalStockNum != that.totalStockNum)
        return false;
    }

    boolean this_present_tradableStockNum = true && this.is_set_tradableStockNum();
    boolean that_present_tradableStockNum = true && that.is_set_tradableStockNum();
    if (this_present_tradableStockNum || that_present_tradableStockNum) {
      if (!(this_present_tradableStockNum && that_present_tradableStockNum))
        return false;
      if (this.tradableStockNum != that.tradableStockNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_code = true && (is_set_code());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_name = true && (is_set_name());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_time = true && (is_set_time());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_latestPrice = true;
    list.add(present_latestPrice);
    if (present_latestPrice)
      list.add(latestPrice);

    boolean present_range = true;
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_high = true;
    list.add(present_high);
    if (present_high)
      list.add(high);

    boolean present_low = true;
    list.add(present_low);
    if (present_low)
      list.add(low);

    boolean present_open = true;
    list.add(present_open);
    if (present_open)
      list.add(open);

    boolean present_prevClose = true;
    list.add(present_prevClose);
    if (present_prevClose)
      list.add(prevClose);

    boolean present_turnover = true;
    list.add(present_turnover);
    if (present_turnover)
      list.add(turnover);

    boolean present_amount = true;
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_volume = true;
    list.add(present_volume);
    if (present_volume)
      list.add(volume);

    boolean present_per = true && (is_set_per());
    list.add(present_per);
    if (present_per)
      list.add(per);

    boolean present_nmc = true && (is_set_nmc());
    list.add(present_nmc);
    if (present_nmc)
      list.add(nmc);

    boolean present_mktCap = true && (is_set_mktCap());
    list.add(present_mktCap);
    if (present_mktCap)
      list.add(mktCap);

    boolean present_riseNum = true && (is_set_riseNum());
    list.add(present_riseNum);
    if (present_riseNum)
      list.add(riseNum);

    boolean present_fairNum = true && (is_set_fairNum());
    list.add(present_fairNum);
    if (present_fairNum)
      list.add(fairNum);

    boolean present_fallNum = true && (is_set_fallNum());
    list.add(present_fallNum);
    if (present_fallNum)
      list.add(fallNum);

    boolean present_fivePositionList = true && (is_set_fivePositionList());
    list.add(present_fivePositionList);
    if (present_fivePositionList)
      list.add(fivePositionList);

    boolean present_prediction = true && (is_set_prediction());
    list.add(present_prediction);
    if (present_prediction)
      list.add(prediction.getValue());

    boolean present_predictDate = true && (is_set_predictDate());
    list.add(present_predictDate);
    if (present_predictDate)
      list.add(predictDate);

    boolean present_totalStockNum = true && (is_set_totalStockNum());
    list.add(present_totalStockNum);
    if (present_totalStockNum)
      list.add(totalStockNum);

    boolean present_tradableStockNum = true && (is_set_tradableStockNum());
    list.add(present_tradableStockNum);
    if (present_tradableStockNum)
      list.add(tradableStockNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(StockTickData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_name()).compareTo(other.is_set_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_time()).compareTo(other.is_set_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_latestPrice()).compareTo(other.is_set_latestPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_latestPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestPrice, other.latestPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_range()).compareTo(other.is_set_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_high()).compareTo(other.is_set_high());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_high()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.high, other.high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_low()).compareTo(other.is_set_low());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_low()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.low, other.low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_open()).compareTo(other.is_set_open());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_open()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_prevClose()).compareTo(other.is_set_prevClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_prevClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevClose, other.prevClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_turnover()).compareTo(other.is_set_turnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_turnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_amount()).compareTo(other.is_set_amount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_amount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_volume()).compareTo(other.is_set_volume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_volume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_per()).compareTo(other.is_set_per());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_per()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per, other.per);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_nmc()).compareTo(other.is_set_nmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_nmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmc, other.nmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_mktCap()).compareTo(other.is_set_mktCap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mktCap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mktCap, other.mktCap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_riseNum()).compareTo(other.is_set_riseNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_riseNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riseNum, other.riseNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_fairNum()).compareTo(other.is_set_fairNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_fairNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fairNum, other.fairNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_fallNum()).compareTo(other.is_set_fallNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_fallNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fallNum, other.fallNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_fivePositionList()).compareTo(other.is_set_fivePositionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_fivePositionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fivePositionList, other.fivePositionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_prediction()).compareTo(other.is_set_prediction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_prediction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prediction, other.prediction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_predictDate()).compareTo(other.is_set_predictDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_predictDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictDate, other.predictDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_totalStockNum()).compareTo(other.is_set_totalStockNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_totalStockNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalStockNum, other.totalStockNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_tradableStockNum()).compareTo(other.is_set_tradableStockNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_tradableStockNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradableStockNum, other.tradableStockNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StockTickData(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestPrice:");
    sb.append(this.latestPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("range:");
    sb.append(this.range);
    first = false;
    if (!first) sb.append(", ");
    sb.append("high:");
    sb.append(this.high);
    first = false;
    if (!first) sb.append(", ");
    sb.append("low:");
    sb.append(this.low);
    first = false;
    if (!first) sb.append(", ");
    sb.append("open:");
    sb.append(this.open);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prevClose:");
    sb.append(this.prevClose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnover:");
    sb.append(this.turnover);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (is_set_per()) {
      if (!first) sb.append(", ");
      sb.append("per:");
      sb.append(this.per);
      first = false;
    }
    if (is_set_nmc()) {
      if (!first) sb.append(", ");
      sb.append("nmc:");
      sb.append(this.nmc);
      first = false;
    }
    if (is_set_mktCap()) {
      if (!first) sb.append(", ");
      sb.append("mktCap:");
      sb.append(this.mktCap);
      first = false;
    }
    if (is_set_riseNum()) {
      if (!first) sb.append(", ");
      sb.append("riseNum:");
      sb.append(this.riseNum);
      first = false;
    }
    if (is_set_fairNum()) {
      if (!first) sb.append(", ");
      sb.append("fairNum:");
      sb.append(this.fairNum);
      first = false;
    }
    if (is_set_fallNum()) {
      if (!first) sb.append(", ");
      sb.append("fallNum:");
      sb.append(this.fallNum);
      first = false;
    }
    if (is_set_fivePositionList()) {
      if (!first) sb.append(", ");
      sb.append("fivePositionList:");
      if (this.fivePositionList == null) {
        sb.append("null");
      } else {
        sb.append(this.fivePositionList);
      }
      first = false;
    }
    if (is_set_prediction()) {
      if (!first) sb.append(", ");
      sb.append("prediction:");
      if (this.prediction == null) {
        sb.append("null");
      } else {
        sb.append(this.prediction);
      }
      first = false;
    }
    if (is_set_predictDate()) {
      if (!first) sb.append(", ");
      sb.append("predictDate:");
      if (this.predictDate == null) {
        sb.append("null");
      } else {
        sb.append(this.predictDate);
      }
      first = false;
    }
    if (is_set_totalStockNum()) {
      if (!first) sb.append(", ");
      sb.append("totalStockNum:");
      sb.append(this.totalStockNum);
      first = false;
    }
    if (is_set_tradableStockNum()) {
      if (!first) sb.append(", ");
      sb.append("tradableStockNum:");
      sb.append(this.tradableStockNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_code()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' is unset! Struct:" + toString());
    }

    if (!is_set_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!is_set_time()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' is unset! Struct:" + toString());
    }

    if (!is_set_latestPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'latestPrice' is unset! Struct:" + toString());
    }

    if (!is_set_range()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'range' is unset! Struct:" + toString());
    }

    if (!is_set_high()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'high' is unset! Struct:" + toString());
    }

    if (!is_set_low()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'low' is unset! Struct:" + toString());
    }

    if (!is_set_open()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'open' is unset! Struct:" + toString());
    }

    if (!is_set_prevClose()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prevClose' is unset! Struct:" + toString());
    }

    if (!is_set_turnover()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'turnover' is unset! Struct:" + toString());
    }

    if (!is_set_amount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' is unset! Struct:" + toString());
    }

    if (!is_set_volume()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'volume' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class StockTickDataStandardSchemeFactory implements SchemeFactory {
    public StockTickDataStandardScheme getScheme() {
      return new StockTickDataStandardScheme();
    }
  }

  private static class StockTickDataStandardScheme extends StandardScheme<StockTickData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockTickData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.set_code_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.set_name_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.set_time_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LATEST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latestPrice = iprot.readDouble();
              struct.set_latestPrice_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.range = iprot.readDouble();
              struct.set_range_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.high = iprot.readDouble();
              struct.set_high_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.low = iprot.readDouble();
              struct.set_low_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.open = iprot.readDouble();
              struct.set_open_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PREV_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prevClose = iprot.readDouble();
              struct.set_prevClose_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.set_turnover_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.set_amount_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.volume = iprot.readI64();
              struct.set_volume_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.per = iprot.readDouble();
              struct.set_per_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NMC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.nmc = iprot.readDouble();
              struct.set_nmc_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MKT_CAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mktCap = iprot.readDouble();
              struct.set_mktCap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RISE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.riseNum = iprot.readI32();
              struct.set_riseNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FAIR_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fairNum = iprot.readI32();
              struct.set_fairNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FALL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fallNum = iprot.readI32();
              struct.set_fallNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FIVE_POSITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                if (struct.fivePositionList == null) {
                  struct.fivePositionList = new ArrayList<FivePosition>(_list8.size);
                }
                FivePosition _elem9 = new FivePosition();
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  if (_elem9 == null) {
                    _elem9 = new FivePosition();
                  }
                  _elem9.read(iprot);
                  struct.fivePositionList.add(_elem9);
                  _elem9 = null;
                }
                iprot.readListEnd();
              }
              struct.set_fivePositionList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PREDICTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prediction = com.rjzd.aistock.api.RiseOrFallPrediction.findByValue(iprot.readI32());
              struct.set_prediction_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PREDICT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.predictDate = iprot.readString();
              struct.set_predictDate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TOTAL_STOCK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalStockNum = iprot.readDouble();
              struct.set_totalStockNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TRADABLE_STOCK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradableStockNum = iprot.readDouble();
              struct.set_tradableStockNum_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockTickData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LATEST_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.latestPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANGE_FIELD_DESC);
      oprot.writeDouble(struct.range);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIGH_FIELD_DESC);
      oprot.writeDouble(struct.high);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOW_FIELD_DESC);
      oprot.writeDouble(struct.low);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_FIELD_DESC);
      oprot.writeDouble(struct.open);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREV_CLOSE_FIELD_DESC);
      oprot.writeDouble(struct.prevClose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
      oprot.writeDouble(struct.turnover);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI64(struct.volume);
      oprot.writeFieldEnd();
      if (struct.is_set_per()) {
        oprot.writeFieldBegin(PER_FIELD_DESC);
        oprot.writeDouble(struct.per);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_nmc()) {
        oprot.writeFieldBegin(NMC_FIELD_DESC);
        oprot.writeDouble(struct.nmc);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_mktCap()) {
        oprot.writeFieldBegin(MKT_CAP_FIELD_DESC);
        oprot.writeDouble(struct.mktCap);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_riseNum()) {
        oprot.writeFieldBegin(RISE_NUM_FIELD_DESC);
        oprot.writeI32(struct.riseNum);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_fairNum()) {
        oprot.writeFieldBegin(FAIR_NUM_FIELD_DESC);
        oprot.writeI32(struct.fairNum);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_fallNum()) {
        oprot.writeFieldBegin(FALL_NUM_FIELD_DESC);
        oprot.writeI32(struct.fallNum);
        oprot.writeFieldEnd();
      }
      if (struct.fivePositionList != null) {
        if (struct.is_set_fivePositionList()) {
          oprot.writeFieldBegin(FIVE_POSITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fivePositionList.size()));
            for (FivePosition _iter11 : struct.fivePositionList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.prediction != null) {
        if (struct.is_set_prediction()) {
          oprot.writeFieldBegin(PREDICTION_FIELD_DESC);
          oprot.writeI32(struct.prediction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.predictDate != null) {
        if (struct.is_set_predictDate()) {
          oprot.writeFieldBegin(PREDICT_DATE_FIELD_DESC);
          oprot.writeString(struct.predictDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_totalStockNum()) {
        oprot.writeFieldBegin(TOTAL_STOCK_NUM_FIELD_DESC);
        oprot.writeDouble(struct.totalStockNum);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_tradableStockNum()) {
        oprot.writeFieldBegin(TRADABLE_STOCK_NUM_FIELD_DESC);
        oprot.writeDouble(struct.tradableStockNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockTickDataTupleSchemeFactory implements SchemeFactory {
    public StockTickDataTupleScheme getScheme() {
      return new StockTickDataTupleScheme();
    }
  }

  private static class StockTickDataTupleScheme extends TupleScheme<StockTickData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockTickData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.code);
      oprot.writeString(struct.name);
      oprot.writeString(struct.time);
      oprot.writeDouble(struct.latestPrice);
      oprot.writeDouble(struct.range);
      oprot.writeDouble(struct.high);
      oprot.writeDouble(struct.low);
      oprot.writeDouble(struct.open);
      oprot.writeDouble(struct.prevClose);
      oprot.writeDouble(struct.turnover);
      oprot.writeDouble(struct.amount);
      oprot.writeI64(struct.volume);
      BitSet optionals = new BitSet();
      if (struct.is_set_per()) {
        optionals.set(0);
      }
      if (struct.is_set_nmc()) {
        optionals.set(1);
      }
      if (struct.is_set_mktCap()) {
        optionals.set(2);
      }
      if (struct.is_set_riseNum()) {
        optionals.set(3);
      }
      if (struct.is_set_fairNum()) {
        optionals.set(4);
      }
      if (struct.is_set_fallNum()) {
        optionals.set(5);
      }
      if (struct.is_set_fivePositionList()) {
        optionals.set(6);
      }
      if (struct.is_set_prediction()) {
        optionals.set(7);
      }
      if (struct.is_set_predictDate()) {
        optionals.set(8);
      }
      if (struct.is_set_totalStockNum()) {
        optionals.set(9);
      }
      if (struct.is_set_tradableStockNum()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.is_set_per()) {
        oprot.writeDouble(struct.per);
      }
      if (struct.is_set_nmc()) {
        oprot.writeDouble(struct.nmc);
      }
      if (struct.is_set_mktCap()) {
        oprot.writeDouble(struct.mktCap);
      }
      if (struct.is_set_riseNum()) {
        oprot.writeI32(struct.riseNum);
      }
      if (struct.is_set_fairNum()) {
        oprot.writeI32(struct.fairNum);
      }
      if (struct.is_set_fallNum()) {
        oprot.writeI32(struct.fallNum);
      }
      if (struct.is_set_fivePositionList()) {
        {
          oprot.writeI32(struct.fivePositionList.size());
          for (FivePosition _iter12 : struct.fivePositionList)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.is_set_prediction()) {
        oprot.writeI32(struct.prediction.getValue());
      }
      if (struct.is_set_predictDate()) {
        oprot.writeString(struct.predictDate);
      }
      if (struct.is_set_totalStockNum()) {
        oprot.writeDouble(struct.totalStockNum);
      }
      if (struct.is_set_tradableStockNum()) {
        oprot.writeDouble(struct.tradableStockNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockTickData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.code = iprot.readString();
      struct.set_code_isSet(true);
      struct.name = iprot.readString();
      struct.set_name_isSet(true);
      struct.time = iprot.readString();
      struct.set_time_isSet(true);
      struct.latestPrice = iprot.readDouble();
      struct.set_latestPrice_isSet(true);
      struct.range = iprot.readDouble();
      struct.set_range_isSet(true);
      struct.high = iprot.readDouble();
      struct.set_high_isSet(true);
      struct.low = iprot.readDouble();
      struct.set_low_isSet(true);
      struct.open = iprot.readDouble();
      struct.set_open_isSet(true);
      struct.prevClose = iprot.readDouble();
      struct.set_prevClose_isSet(true);
      struct.turnover = iprot.readDouble();
      struct.set_turnover_isSet(true);
      struct.amount = iprot.readDouble();
      struct.set_amount_isSet(true);
      struct.volume = iprot.readI64();
      struct.set_volume_isSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.per = iprot.readDouble();
        struct.set_per_isSet(true);
      }
      if (incoming.get(1)) {
        struct.nmc = iprot.readDouble();
        struct.set_nmc_isSet(true);
      }
      if (incoming.get(2)) {
        struct.mktCap = iprot.readDouble();
        struct.set_mktCap_isSet(true);
      }
      if (incoming.get(3)) {
        struct.riseNum = iprot.readI32();
        struct.set_riseNum_isSet(true);
      }
      if (incoming.get(4)) {
        struct.fairNum = iprot.readI32();
        struct.set_fairNum_isSet(true);
      }
      if (incoming.get(5)) {
        struct.fallNum = iprot.readI32();
        struct.set_fallNum_isSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          if (struct.fivePositionList == null) {
            struct.fivePositionList = new ArrayList<FivePosition>(_list13.size);
          }
          FivePosition _elem14 = new FivePosition();
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            if (_elem14 == null) {
              _elem14 = new FivePosition();
            }
            _elem14.read(iprot);
            struct.fivePositionList.add(_elem14);
            _elem14 = null;
          }
        }
        struct.set_fivePositionList_isSet(true);
      }
      if (incoming.get(7)) {
        struct.prediction = com.rjzd.aistock.api.RiseOrFallPrediction.findByValue(iprot.readI32());
        struct.set_prediction_isSet(true);
      }
      if (incoming.get(8)) {
        struct.predictDate = iprot.readString();
        struct.set_predictDate_isSet(true);
      }
      if (incoming.get(9)) {
        struct.totalStockNum = iprot.readDouble();
        struct.set_totalStockNum_isSet(true);
      }
      if (incoming.get(10)) {
        struct.tradableStockNum = iprot.readDouble();
        struct.set_tradableStockNum_isSet(true);
      }
    }
  }

}

