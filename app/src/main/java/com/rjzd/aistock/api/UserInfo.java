/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 用户信息
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_BIND_WX_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindWX", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_BIND_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindQQ", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_BIND_SINA_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindSina", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField AI_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("aiList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField INVITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteCode", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  private int userId; // required
  private String phoneNumber; // required
  private String nickname; // required
  private String avatar; // optional
  private int sex; // optional
  private String area; // optional
  private boolean isBindWX; // optional
  private boolean isBindQQ; // optional
  private boolean isBindSina; // optional
  private List<AIInfo> aiList; // optional
  private int level; // optional
  private int points; // optional
  private String inviteCode; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(userId);
    out.writeString(phoneNumber);
    out.writeString(nickname);
    out.writeString(avatar);
    out.writeInt(sex);
    out.writeString(area);
    out.writeInt(isBindWX ? 1 : 0);
    out.writeInt(isBindQQ ? 1 : 0);
    out.writeInt(isBindSina ? 1 : 0);
    out.writeTypedList(aiList);
    out.writeInt(level);
    out.writeInt(points);
    out.writeString(inviteCode);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public UserInfo(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.userId = in.readInt();
    this.phoneNumber= in.readString();
    this.nickname= in.readString();
    this.avatar= in.readString();
    this.sex = in.readInt();
    this.area= in.readString();
    this.isBindWX = (in.readInt()==1);
    this.isBindQQ = (in.readInt()==1);
    this.isBindSina = (in.readInt()==1);
    this.aiList = new ArrayList<AIInfo>();
    in.readTypedList(this.aiList, AIInfo.CREATOR);
    this.level = in.readInt();
    this.points = in.readInt();
    this.inviteCode= in.readString();
  }

  public static final android.os.Parcelable.Creator<UserInfo> CREATOR = new android.os.Parcelable.Creator<UserInfo>() {
    @Override
    public UserInfo[] newArray(int size) {
      return new UserInfo[size];
    }

    @Override
    public UserInfo createFromParcel(android.os.Parcel in) {
      return new UserInfo(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    PHONE_NUMBER((short)2, "phoneNumber"),
    NICKNAME((short)3, "nickname"),
    AVATAR((short)4, "avatar"),
    SEX((short)5, "sex"),
    AREA((short)6, "area"),
    IS_BIND_WX((short)7, "isBindWX"),
    IS_BIND_QQ((short)8, "isBindQQ"),
    IS_BIND_SINA((short)9, "isBindSina"),
    AI_LIST((short)10, "aiList"),
    LEVEL((short)11, "level"),
    POINTS((short)12, "points"),
    INVITE_CODE((short)13, "inviteCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 3: // NICKNAME
          return NICKNAME;
        case 4: // AVATAR
          return AVATAR;
        case 5: // SEX
          return SEX;
        case 6: // AREA
          return AREA;
        case 7: // IS_BIND_WX
          return IS_BIND_WX;
        case 8: // IS_BIND_QQ
          return IS_BIND_QQ;
        case 9: // IS_BIND_SINA
          return IS_BIND_SINA;
        case 10: // AI_LIST
          return AI_LIST;
        case 11: // LEVEL
          return LEVEL;
        case 12: // POINTS
          return POINTS;
        case 13: // INVITE_CODE
          return INVITE_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __ISBINDWX_ISSET_ID = 2;
  private static final int __ISBINDQQ_ISSET_ID = 3;
  private static final int __ISBINDSINA_ISSET_ID = 4;
  private static final int __LEVEL_ISSET_ID = 5;
  private static final int __POINTS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AVATAR,_Fields.SEX,_Fields.AREA,_Fields.IS_BIND_WX,_Fields.IS_BIND_QQ,_Fields.IS_BIND_SINA,_Fields.AI_LIST,_Fields.LEVEL,_Fields.POINTS,_Fields.INVITE_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BIND_WX, new org.apache.thrift.meta_data.FieldMetaData("isBindWX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_BIND_QQ, new org.apache.thrift.meta_data.FieldMetaData("isBindQQ", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_BIND_SINA, new org.apache.thrift.meta_data.FieldMetaData("isBindSina", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AI_LIST, new org.apache.thrift.meta_data.FieldMetaData("aiList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AIInfo.class))));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("inviteCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    int userId,
    String phoneNumber,
    String nickname)
  {
    this();
    this.userId = userId;
    set_userId_isSet(true);
    this.phoneNumber = phoneNumber;
    this.nickname = nickname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.is_set_phoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.is_set_nickname()) {
      this.nickname = other.nickname;
    }
    if (other.is_set_avatar()) {
      this.avatar = other.avatar;
    }
    this.sex = other.sex;
    if (other.is_set_area()) {
      this.area = other.area;
    }
    this.isBindWX = other.isBindWX;
    this.isBindQQ = other.isBindQQ;
    this.isBindSina = other.isBindSina;
    if (other.is_set_aiList()) {
      List<AIInfo> __this__aiList = new ArrayList<AIInfo>(other.aiList.size());
      for (AIInfo other_element : other.aiList) {
        __this__aiList.add(new AIInfo(other_element));
      }
      this.aiList = __this__aiList;
    }
    this.level = other.level;
    this.points = other.points;
    if (other.is_set_inviteCode()) {
      this.inviteCode = other.inviteCode;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  public void clear() {
    set_userId_isSet(false);
    this.userId = 0;
    this.phoneNumber = null;
    this.nickname = null;
    this.avatar = null;
    set_sex_isSet(false);
    this.sex = 0;
    this.area = null;
    set_isBindWX_isSet(false);
    this.isBindWX = false;
    set_isBindQQ_isSet(false);
    this.isBindQQ = false;
    set_isBindSina_isSet(false);
    this.isBindSina = false;
    if (this.aiList != null) {
      this.aiList.clear();
    }
    set_level_isSet(false);
    this.level = 0;
    set_points_isSet(false);
    this.points = 0;
    this.inviteCode = null;
  }

  public int get_userId() {
    return this.userId;
  }

  public void set_userId(int userId) {
    this.userId = userId;
    set_userId_isSet(true);
  }

  public void unset_userId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean is_set_userId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void set_userId_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String get_phoneNumber() {
    return this.phoneNumber;
  }

  public void set_phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public void unset_phoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean is_set_phoneNumber() {
    return this.phoneNumber != null;
  }

  public void set_phoneNumber_isSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String get_nickname() {
    return this.nickname;
  }

  public void set_nickname(String nickname) {
    this.nickname = nickname;
  }

  public void unset_nickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean is_set_nickname() {
    return this.nickname != null;
  }

  public void set_nickname_isSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public String get_avatar() {
    return this.avatar;
  }

  public void set_avatar(String avatar) {
    this.avatar = avatar;
  }

  public void unset_avatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean is_set_avatar() {
    return this.avatar != null;
  }

  public void set_avatar_isSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int get_sex() {
    return this.sex;
  }

  public void set_sex(int sex) {
    this.sex = sex;
    set_sex_isSet(true);
  }

  public void unset_sex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean is_set_sex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void set_sex_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String get_area() {
    return this.area;
  }

  public void set_area(String area) {
    this.area = area;
  }

  public void unset_area() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean is_set_area() {
    return this.area != null;
  }

  public void set_area_isSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public boolean is_isBindWX() {
    return this.isBindWX;
  }

  public void set_isBindWX(boolean isBindWX) {
    this.isBindWX = isBindWX;
    set_isBindWX_isSet(true);
  }

  public void unset_isBindWX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDWX_ISSET_ID);
  }

  /** Returns true if field isBindWX is set (has been assigned a value) and false otherwise */
  public boolean is_set_isBindWX() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDWX_ISSET_ID);
  }

  public void set_isBindWX_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDWX_ISSET_ID, value);
  }

  public boolean is_isBindQQ() {
    return this.isBindQQ;
  }

  public void set_isBindQQ(boolean isBindQQ) {
    this.isBindQQ = isBindQQ;
    set_isBindQQ_isSet(true);
  }

  public void unset_isBindQQ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDQQ_ISSET_ID);
  }

  /** Returns true if field isBindQQ is set (has been assigned a value) and false otherwise */
  public boolean is_set_isBindQQ() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDQQ_ISSET_ID);
  }

  public void set_isBindQQ_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDQQ_ISSET_ID, value);
  }

  public boolean is_isBindSina() {
    return this.isBindSina;
  }

  public void set_isBindSina(boolean isBindSina) {
    this.isBindSina = isBindSina;
    set_isBindSina_isSet(true);
  }

  public void unset_isBindSina() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDSINA_ISSET_ID);
  }

  /** Returns true if field isBindSina is set (has been assigned a value) and false otherwise */
  public boolean is_set_isBindSina() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDSINA_ISSET_ID);
  }

  public void set_isBindSina_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDSINA_ISSET_ID, value);
  }

  public int get_aiList_size() {
    return (this.aiList == null) ? 0 : this.aiList.size();
  }

  public java.util.Iterator<AIInfo> get_aiList_iterator() {
    return (this.aiList == null) ? null : this.aiList.iterator();
  }

  public void add_to_aiList(AIInfo elem) {
    if (this.aiList == null) {
      this.aiList = new ArrayList<AIInfo>();
    }
    this.aiList.add(elem);
  }

  public List<AIInfo> get_aiList() {
    return this.aiList;
  }

  public void set_aiList(List<AIInfo> aiList) {
    this.aiList = aiList;
  }

  public void unset_aiList() {
    this.aiList = null;
  }

  /** Returns true if field aiList is set (has been assigned a value) and false otherwise */
  public boolean is_set_aiList() {
    return this.aiList != null;
  }

  public void set_aiList_isSet(boolean value) {
    if (!value) {
      this.aiList = null;
    }
  }

  public int get_level() {
    return this.level;
  }

  public void set_level(int level) {
    this.level = level;
    set_level_isSet(true);
  }

  public void unset_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean is_set_level() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void set_level_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int get_points() {
    return this.points;
  }

  public void set_points(int points) {
    this.points = points;
    set_points_isSet(true);
  }

  public void unset_points() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean is_set_points() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  public void set_points_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
  }

  public String get_inviteCode() {
    return this.inviteCode;
  }

  public void set_inviteCode(String inviteCode) {
    this.inviteCode = inviteCode;
  }

  public void unset_inviteCode() {
    this.inviteCode = null;
  }

  /** Returns true if field inviteCode is set (has been assigned a value) and false otherwise */
  public boolean is_set_inviteCode() {
    return this.inviteCode != null;
  }

  public void set_inviteCode_isSet(boolean value) {
    if (!value) {
      this.inviteCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unset_userId();
      } else {
        set_userId((Integer)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unset_phoneNumber();
      } else {
        set_phoneNumber((String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unset_nickname();
      } else {
        set_nickname((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unset_avatar();
      } else {
        set_avatar((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unset_sex();
      } else {
        set_sex((Integer)value);
      }
      break;

    case AREA:
      if (value == null) {
        unset_area();
      } else {
        set_area((String)value);
      }
      break;

    case IS_BIND_WX:
      if (value == null) {
        unset_isBindWX();
      } else {
        set_isBindWX((Boolean)value);
      }
      break;

    case IS_BIND_QQ:
      if (value == null) {
        unset_isBindQQ();
      } else {
        set_isBindQQ((Boolean)value);
      }
      break;

    case IS_BIND_SINA:
      if (value == null) {
        unset_isBindSina();
      } else {
        set_isBindSina((Boolean)value);
      }
      break;

    case AI_LIST:
      if (value == null) {
        unset_aiList();
      } else {
        set_aiList((List<AIInfo>)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unset_level();
      } else {
        set_level((Integer)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unset_points();
      } else {
        set_points((Integer)value);
      }
      break;

    case INVITE_CODE:
      if (value == null) {
        unset_inviteCode();
      } else {
        set_inviteCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return get_userId();

    case PHONE_NUMBER:
      return get_phoneNumber();

    case NICKNAME:
      return get_nickname();

    case AVATAR:
      return get_avatar();

    case SEX:
      return get_sex();

    case AREA:
      return get_area();

    case IS_BIND_WX:
      return is_isBindWX();

    case IS_BIND_QQ:
      return is_isBindQQ();

    case IS_BIND_SINA:
      return is_isBindSina();

    case AI_LIST:
      return get_aiList();

    case LEVEL:
      return get_level();

    case POINTS:
      return get_points();

    case INVITE_CODE:
      return get_inviteCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return is_set_userId();
    case PHONE_NUMBER:
      return is_set_phoneNumber();
    case NICKNAME:
      return is_set_nickname();
    case AVATAR:
      return is_set_avatar();
    case SEX:
      return is_set_sex();
    case AREA:
      return is_set_area();
    case IS_BIND_WX:
      return is_set_isBindWX();
    case IS_BIND_QQ:
      return is_set_isBindQQ();
    case IS_BIND_SINA:
      return is_set_isBindSina();
    case AI_LIST:
      return is_set_aiList();
    case LEVEL:
      return is_set_level();
    case POINTS:
      return is_set_points();
    case INVITE_CODE:
      return is_set_inviteCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_phoneNumber = true && this.is_set_phoneNumber();
    boolean that_present_phoneNumber = true && that.is_set_phoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_nickname = true && this.is_set_nickname();
    boolean that_present_nickname = true && that.is_set_nickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_avatar = true && this.is_set_avatar();
    boolean that_present_avatar = true && that.is_set_avatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_sex = true && this.is_set_sex();
    boolean that_present_sex = true && that.is_set_sex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_area = true && this.is_set_area();
    boolean that_present_area = true && that.is_set_area();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_isBindWX = true && this.is_set_isBindWX();
    boolean that_present_isBindWX = true && that.is_set_isBindWX();
    if (this_present_isBindWX || that_present_isBindWX) {
      if (!(this_present_isBindWX && that_present_isBindWX))
        return false;
      if (this.isBindWX != that.isBindWX)
        return false;
    }

    boolean this_present_isBindQQ = true && this.is_set_isBindQQ();
    boolean that_present_isBindQQ = true && that.is_set_isBindQQ();
    if (this_present_isBindQQ || that_present_isBindQQ) {
      if (!(this_present_isBindQQ && that_present_isBindQQ))
        return false;
      if (this.isBindQQ != that.isBindQQ)
        return false;
    }

    boolean this_present_isBindSina = true && this.is_set_isBindSina();
    boolean that_present_isBindSina = true && that.is_set_isBindSina();
    if (this_present_isBindSina || that_present_isBindSina) {
      if (!(this_present_isBindSina && that_present_isBindSina))
        return false;
      if (this.isBindSina != that.isBindSina)
        return false;
    }

    boolean this_present_aiList = true && this.is_set_aiList();
    boolean that_present_aiList = true && that.is_set_aiList();
    if (this_present_aiList || that_present_aiList) {
      if (!(this_present_aiList && that_present_aiList))
        return false;
      if (!this.aiList.equals(that.aiList))
        return false;
    }

    boolean this_present_level = true && this.is_set_level();
    boolean that_present_level = true && that.is_set_level();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_points = true && this.is_set_points();
    boolean that_present_points = true && that.is_set_points();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (this.points != that.points)
        return false;
    }

    boolean this_present_inviteCode = true && this.is_set_inviteCode();
    boolean that_present_inviteCode = true && that.is_set_inviteCode();
    if (this_present_inviteCode || that_present_inviteCode) {
      if (!(this_present_inviteCode && that_present_inviteCode))
        return false;
      if (!this.inviteCode.equals(that.inviteCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_phoneNumber = true && (is_set_phoneNumber());
    list.add(present_phoneNumber);
    if (present_phoneNumber)
      list.add(phoneNumber);

    boolean present_nickname = true && (is_set_nickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_avatar = true && (is_set_avatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_sex = true && (is_set_sex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_area = true && (is_set_area());
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_isBindWX = true && (is_set_isBindWX());
    list.add(present_isBindWX);
    if (present_isBindWX)
      list.add(isBindWX);

    boolean present_isBindQQ = true && (is_set_isBindQQ());
    list.add(present_isBindQQ);
    if (present_isBindQQ)
      list.add(isBindQQ);

    boolean present_isBindSina = true && (is_set_isBindSina());
    list.add(present_isBindSina);
    if (present_isBindSina)
      list.add(isBindSina);

    boolean present_aiList = true && (is_set_aiList());
    list.add(present_aiList);
    if (present_aiList)
      list.add(aiList);

    boolean present_level = true && (is_set_level());
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_points = true && (is_set_points());
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_inviteCode = true && (is_set_inviteCode());
    list.add(present_inviteCode);
    if (present_inviteCode)
      list.add(inviteCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_userId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_phoneNumber()).compareTo(other.is_set_phoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_phoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_nickname()).compareTo(other.is_set_nickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_nickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_avatar()).compareTo(other.is_set_avatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_avatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sex()).compareTo(other.is_set_sex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_area()).compareTo(other.is_set_area());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_area()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isBindWX()).compareTo(other.is_set_isBindWX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isBindWX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindWX, other.isBindWX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isBindQQ()).compareTo(other.is_set_isBindQQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isBindQQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindQQ, other.isBindQQ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isBindSina()).compareTo(other.is_set_isBindSina());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isBindSina()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindSina, other.isBindSina);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_aiList()).compareTo(other.is_set_aiList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_aiList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aiList, other.aiList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_level()).compareTo(other.is_set_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_points()).compareTo(other.is_set_points());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_points()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_inviteCode()).compareTo(other.is_set_inviteCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_inviteCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteCode, other.inviteCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (is_set_avatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (is_set_sex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (is_set_area()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    if (is_set_isBindWX()) {
      if (!first) sb.append(", ");
      sb.append("isBindWX:");
      sb.append(this.isBindWX);
      first = false;
    }
    if (is_set_isBindQQ()) {
      if (!first) sb.append(", ");
      sb.append("isBindQQ:");
      sb.append(this.isBindQQ);
      first = false;
    }
    if (is_set_isBindSina()) {
      if (!first) sb.append(", ");
      sb.append("isBindSina:");
      sb.append(this.isBindSina);
      first = false;
    }
    if (is_set_aiList()) {
      if (!first) sb.append(", ");
      sb.append("aiList:");
      if (this.aiList == null) {
        sb.append("null");
      } else {
        sb.append(this.aiList);
      }
      first = false;
    }
    if (is_set_level()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
    }
    if (is_set_points()) {
      if (!first) sb.append(", ");
      sb.append("points:");
      sb.append(this.points);
      first = false;
    }
    if (is_set_inviteCode()) {
      if (!first) sb.append(", ");
      sb.append("inviteCode:");
      if (this.inviteCode == null) {
        sb.append("null");
      } else {
        sb.append(this.inviteCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_userId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' is unset! Struct:" + toString());
    }

    if (!is_set_phoneNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phoneNumber' is unset! Struct:" + toString());
    }

    if (!is_set_nickname()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nickname' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.set_userId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.set_phoneNumber_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.set_nickname_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.set_avatar_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.set_sex_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.set_area_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_BIND_WX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindWX = iprot.readBool();
              struct.set_isBindWX_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_BIND_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindQQ = iprot.readBool();
              struct.set_isBindQQ_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_BIND_SINA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindSina = iprot.readBool();
              struct.set_isBindSina_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AI_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                if (struct.aiList == null) {
                  struct.aiList = new ArrayList<AIInfo>(_list400.size);
                }
                AIInfo _elem401 = new AIInfo();
                for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                {
                  if (_elem401 == null) {
                    _elem401 = new AIInfo();
                  }
                  _elem401.read(iprot);
                  struct.aiList.add(_elem401);
                  _elem401 = null;
                }
                iprot.readListEnd();
              }
              struct.set_aiList_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.set_level_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.points = iprot.readI32();
              struct.set_points_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INVITE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inviteCode = iprot.readString();
              struct.set_inviteCode_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        if (struct.is_set_avatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_sex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.area != null) {
        if (struct.is_set_area()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_isBindWX()) {
        oprot.writeFieldBegin(IS_BIND_WX_FIELD_DESC);
        oprot.writeBool(struct.isBindWX);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_isBindQQ()) {
        oprot.writeFieldBegin(IS_BIND_QQ_FIELD_DESC);
        oprot.writeBool(struct.isBindQQ);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_isBindSina()) {
        oprot.writeFieldBegin(IS_BIND_SINA_FIELD_DESC);
        oprot.writeBool(struct.isBindSina);
        oprot.writeFieldEnd();
      }
      if (struct.aiList != null) {
        if (struct.is_set_aiList()) {
          oprot.writeFieldBegin(AI_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aiList.size()));
            for (AIInfo _iter403 : struct.aiList)
            {
              _iter403.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_level()) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_points()) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeI32(struct.points);
        oprot.writeFieldEnd();
      }
      if (struct.inviteCode != null) {
        if (struct.is_set_inviteCode()) {
          oprot.writeFieldBegin(INVITE_CODE_FIELD_DESC);
          oprot.writeString(struct.inviteCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.phoneNumber);
      oprot.writeString(struct.nickname);
      BitSet optionals = new BitSet();
      if (struct.is_set_avatar()) {
        optionals.set(0);
      }
      if (struct.is_set_sex()) {
        optionals.set(1);
      }
      if (struct.is_set_area()) {
        optionals.set(2);
      }
      if (struct.is_set_isBindWX()) {
        optionals.set(3);
      }
      if (struct.is_set_isBindQQ()) {
        optionals.set(4);
      }
      if (struct.is_set_isBindSina()) {
        optionals.set(5);
      }
      if (struct.is_set_aiList()) {
        optionals.set(6);
      }
      if (struct.is_set_level()) {
        optionals.set(7);
      }
      if (struct.is_set_points()) {
        optionals.set(8);
      }
      if (struct.is_set_inviteCode()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.is_set_avatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.is_set_sex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.is_set_area()) {
        oprot.writeString(struct.area);
      }
      if (struct.is_set_isBindWX()) {
        oprot.writeBool(struct.isBindWX);
      }
      if (struct.is_set_isBindQQ()) {
        oprot.writeBool(struct.isBindQQ);
      }
      if (struct.is_set_isBindSina()) {
        oprot.writeBool(struct.isBindSina);
      }
      if (struct.is_set_aiList()) {
        {
          oprot.writeI32(struct.aiList.size());
          for (AIInfo _iter404 : struct.aiList)
          {
            _iter404.write(oprot);
          }
        }
      }
      if (struct.is_set_level()) {
        oprot.writeI32(struct.level);
      }
      if (struct.is_set_points()) {
        oprot.writeI32(struct.points);
      }
      if (struct.is_set_inviteCode()) {
        oprot.writeString(struct.inviteCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.set_userId_isSet(true);
      struct.phoneNumber = iprot.readString();
      struct.set_phoneNumber_isSet(true);
      struct.nickname = iprot.readString();
      struct.set_nickname_isSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.avatar = iprot.readString();
        struct.set_avatar_isSet(true);
      }
      if (incoming.get(1)) {
        struct.sex = iprot.readI32();
        struct.set_sex_isSet(true);
      }
      if (incoming.get(2)) {
        struct.area = iprot.readString();
        struct.set_area_isSet(true);
      }
      if (incoming.get(3)) {
        struct.isBindWX = iprot.readBool();
        struct.set_isBindWX_isSet(true);
      }
      if (incoming.get(4)) {
        struct.isBindQQ = iprot.readBool();
        struct.set_isBindQQ_isSet(true);
      }
      if (incoming.get(5)) {
        struct.isBindSina = iprot.readBool();
        struct.set_isBindSina_isSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          if (struct.aiList == null) {
            struct.aiList = new ArrayList<AIInfo>(_list405.size);
          }
          AIInfo _elem406 = new AIInfo();
          for (int _i407 = 0; _i407 < _list405.size; ++_i407)
          {
            if (_elem406 == null) {
              _elem406 = new AIInfo();
            }
            _elem406.read(iprot);
            struct.aiList.add(_elem406);
            _elem406 = null;
          }
        }
        struct.set_aiList_isSet(true);
      }
      if (incoming.get(7)) {
        struct.level = iprot.readI32();
        struct.set_level_isSet(true);
      }
      if (incoming.get(8)) {
        struct.points = iprot.readI32();
        struct.set_points_isSet(true);
      }
      if (incoming.get(9)) {
        struct.inviteCode = iprot.readString();
        struct.set_inviteCode_isSet(true);
      }
    }
  }

}

