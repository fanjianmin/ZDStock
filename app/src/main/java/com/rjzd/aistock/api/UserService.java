/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rjzd.aistock.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class UserService {

  /**
   * 用户类
   */
  public interface Iface {

    public SendCode getSendCode(String phoneNumber) throws org.apache.thrift.TException;

    public UserData dynamicLogin(String phoneNumber, String code) throws org.apache.thrift.TException;

    public IsSuccess inviteCheck(String phoneNumber) throws org.apache.thrift.TException;

    public IsSuccess inviteRegister(String phoneNumber, String code, String inviteCode) throws org.apache.thrift.TException;

    public UserData oauthLogin(OAuthInfo params) throws org.apache.thrift.TException;

    public UserData getUserInfo(int userId) throws org.apache.thrift.TException;

    public UserPoints getMyPoints(int userId) throws org.apache.thrift.TException;

    public UserPoints getRecentGainPoints(int userId) throws org.apache.thrift.TException;

    public IsSuccess binding(int uid, String bindValue, BindType type) throws org.apache.thrift.TException;

    public IsSuccess addPortfolio(int userId, String code) throws org.apache.thrift.TException;

    public List<String> synchronizePortfolio(int userId, List<String> codeList) throws org.apache.thrift.TException;

    public IsSuccess deletePortfolio(int userId, String code) throws org.apache.thrift.TException;

    public List<String> getPortfolio(int userId) throws org.apache.thrift.TException;

    public IsSuccess addOrCancelAttention(String aiId, int userId, AttentionFlag flag) throws org.apache.thrift.TException;

    public InviteData getMyInvite(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException;

    public PrivilegeData getPrivilegeStatus(int userId, List<String> privilegeIds) throws org.apache.thrift.TException;

    public IsSuccess unlockPrivilege(int userId, String privilegeId) throws org.apache.thrift.TException;

    public TaskStatuData getMyTaskStatus(int userId, List<String> taskTypeIds) throws org.apache.thrift.TException;

    public PointsRecordData getPointsRecord(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException;

    public IsSuccess earnPointsBydailyActive(int userId) throws org.apache.thrift.TException;

    public IsSuccess earnPointsByshare(int userId) throws org.apache.thrift.TException;

    public PushStatus getPushStatus(int userId) throws org.apache.thrift.TException;

    public IsSuccess pushSettings(int userId, String pushType, boolean isNeedRemind) throws org.apache.thrift.TException;

    public List<String> stickTopOrBottom(int userId, List<String> stockCodes, int action) throws org.apache.thrift.TException;

    public List<String> movePosition(int userId, List<String> stockCodes, int shift) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSendCode(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dynamicLogin(String phoneNumber, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inviteCheck(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inviteRegister(String phoneNumber, String code, String inviteCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void oauthLogin(OAuthInfo params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserInfo(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecentGainPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void binding(int uid, String bindValue, BindType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPortfolio(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void synchronizePortfolio(int userId, List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deletePortfolio(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPortfolio(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOrCancelAttention(String aiId, int userId, AttentionFlag flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyInvite(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPrivilegeStatus(int userId, List<String> privilegeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unlockPrivilege(int userId, String privilegeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyTaskStatus(int userId, List<String> taskTypeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPointsRecord(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void earnPointsBydailyActive(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void earnPointsByshare(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPushStatus(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushSettings(int userId, String pushType, boolean isNeedRemind, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stickTopOrBottom(int userId, List<String> stockCodes, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void movePosition(int userId, List<String> stockCodes, int shift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SendCode getSendCode(String phoneNumber) throws org.apache.thrift.TException
    {
      sendGetSendCode(phoneNumber);
      return recvGetSendCode();
    }

    public void sendGetSendCode(String phoneNumber) throws org.apache.thrift.TException
    {
      getSendCode_args args = new getSendCode_args();
      args.set_phoneNumber(phoneNumber);
      sendBase("getSendCode", args);
    }

    public SendCode recvGetSendCode() throws org.apache.thrift.TException
    {
      getSendCode_result result = new getSendCode_result();
      receiveBase(result, "getSendCode");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSendCode failed: unknown result");
    }

    public UserData dynamicLogin(String phoneNumber, String code) throws org.apache.thrift.TException
    {
      sendDynamicLogin(phoneNumber, code);
      return recvDynamicLogin();
    }

    public void sendDynamicLogin(String phoneNumber, String code) throws org.apache.thrift.TException
    {
      dynamicLogin_args args = new dynamicLogin_args();
      args.set_phoneNumber(phoneNumber);
      args.set_code(code);
      sendBase("dynamicLogin", args);
    }

    public UserData recvDynamicLogin() throws org.apache.thrift.TException
    {
      dynamicLogin_result result = new dynamicLogin_result();
      receiveBase(result, "dynamicLogin");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dynamicLogin failed: unknown result");
    }

    public IsSuccess inviteCheck(String phoneNumber) throws org.apache.thrift.TException
    {
      sendInviteCheck(phoneNumber);
      return recvInviteCheck();
    }

    public void sendInviteCheck(String phoneNumber) throws org.apache.thrift.TException
    {
      inviteCheck_args args = new inviteCheck_args();
      args.set_phoneNumber(phoneNumber);
      sendBase("inviteCheck", args);
    }

    public IsSuccess recvInviteCheck() throws org.apache.thrift.TException
    {
      inviteCheck_result result = new inviteCheck_result();
      receiveBase(result, "inviteCheck");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inviteCheck failed: unknown result");
    }

    public IsSuccess inviteRegister(String phoneNumber, String code, String inviteCode) throws org.apache.thrift.TException
    {
      sendInviteRegister(phoneNumber, code, inviteCode);
      return recvInviteRegister();
    }

    public void sendInviteRegister(String phoneNumber, String code, String inviteCode) throws org.apache.thrift.TException
    {
      inviteRegister_args args = new inviteRegister_args();
      args.set_phoneNumber(phoneNumber);
      args.set_code(code);
      args.set_inviteCode(inviteCode);
      sendBase("inviteRegister", args);
    }

    public IsSuccess recvInviteRegister() throws org.apache.thrift.TException
    {
      inviteRegister_result result = new inviteRegister_result();
      receiveBase(result, "inviteRegister");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inviteRegister failed: unknown result");
    }

    public UserData oauthLogin(OAuthInfo params) throws org.apache.thrift.TException
    {
      sendOauthLogin(params);
      return recvOauthLogin();
    }

    public void sendOauthLogin(OAuthInfo params) throws org.apache.thrift.TException
    {
      oauthLogin_args args = new oauthLogin_args();
      args.set_params(params);
      sendBase("oauthLogin", args);
    }

    public UserData recvOauthLogin() throws org.apache.thrift.TException
    {
      oauthLogin_result result = new oauthLogin_result();
      receiveBase(result, "oauthLogin");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "oauthLogin failed: unknown result");
    }

    public UserData getUserInfo(int userId) throws org.apache.thrift.TException
    {
      sendGetUserInfo(userId);
      return recvGetUserInfo();
    }

    public void sendGetUserInfo(int userId) throws org.apache.thrift.TException
    {
      getUserInfo_args args = new getUserInfo_args();
      args.set_userId(userId);
      sendBase("getUserInfo", args);
    }

    public UserData recvGetUserInfo() throws org.apache.thrift.TException
    {
      getUserInfo_result result = new getUserInfo_result();
      receiveBase(result, "getUserInfo");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfo failed: unknown result");
    }

    public UserPoints getMyPoints(int userId) throws org.apache.thrift.TException
    {
      sendGetMyPoints(userId);
      return recvGetMyPoints();
    }

    public void sendGetMyPoints(int userId) throws org.apache.thrift.TException
    {
      getMyPoints_args args = new getMyPoints_args();
      args.set_userId(userId);
      sendBase("getMyPoints", args);
    }

    public UserPoints recvGetMyPoints() throws org.apache.thrift.TException
    {
      getMyPoints_result result = new getMyPoints_result();
      receiveBase(result, "getMyPoints");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyPoints failed: unknown result");
    }

    public UserPoints getRecentGainPoints(int userId) throws org.apache.thrift.TException
    {
      sendGetRecentGainPoints(userId);
      return recvGetRecentGainPoints();
    }

    public void sendGetRecentGainPoints(int userId) throws org.apache.thrift.TException
    {
      getRecentGainPoints_args args = new getRecentGainPoints_args();
      args.set_userId(userId);
      sendBase("getRecentGainPoints", args);
    }

    public UserPoints recvGetRecentGainPoints() throws org.apache.thrift.TException
    {
      getRecentGainPoints_result result = new getRecentGainPoints_result();
      receiveBase(result, "getRecentGainPoints");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecentGainPoints failed: unknown result");
    }

    public IsSuccess binding(int uid, String bindValue, BindType type) throws org.apache.thrift.TException
    {
      sendBinding(uid, bindValue, type);
      return recvBinding();
    }

    public void sendBinding(int uid, String bindValue, BindType type) throws org.apache.thrift.TException
    {
      binding_args args = new binding_args();
      args.set_uid(uid);
      args.set_bindValue(bindValue);
      args.set_type(type);
      sendBase("binding", args);
    }

    public IsSuccess recvBinding() throws org.apache.thrift.TException
    {
      binding_result result = new binding_result();
      receiveBase(result, "binding");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "binding failed: unknown result");
    }

    public IsSuccess addPortfolio(int userId, String code) throws org.apache.thrift.TException
    {
      sendAddPortfolio(userId, code);
      return recvAddPortfolio();
    }

    public void sendAddPortfolio(int userId, String code) throws org.apache.thrift.TException
    {
      addPortfolio_args args = new addPortfolio_args();
      args.set_userId(userId);
      args.set_code(code);
      sendBase("addPortfolio", args);
    }

    public IsSuccess recvAddPortfolio() throws org.apache.thrift.TException
    {
      addPortfolio_result result = new addPortfolio_result();
      receiveBase(result, "addPortfolio");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPortfolio failed: unknown result");
    }

    public List<String> synchronizePortfolio(int userId, List<String> codeList) throws org.apache.thrift.TException
    {
      sendSynchronizePortfolio(userId, codeList);
      return recvSynchronizePortfolio();
    }

    public void sendSynchronizePortfolio(int userId, List<String> codeList) throws org.apache.thrift.TException
    {
      synchronizePortfolio_args args = new synchronizePortfolio_args();
      args.set_userId(userId);
      args.set_codeList(codeList);
      sendBase("synchronizePortfolio", args);
    }

    public List<String> recvSynchronizePortfolio() throws org.apache.thrift.TException
    {
      synchronizePortfolio_result result = new synchronizePortfolio_result();
      receiveBase(result, "synchronizePortfolio");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "synchronizePortfolio failed: unknown result");
    }

    public IsSuccess deletePortfolio(int userId, String code) throws org.apache.thrift.TException
    {
      sendDeletePortfolio(userId, code);
      return recvDeletePortfolio();
    }

    public void sendDeletePortfolio(int userId, String code) throws org.apache.thrift.TException
    {
      deletePortfolio_args args = new deletePortfolio_args();
      args.set_userId(userId);
      args.set_code(code);
      sendBase("deletePortfolio", args);
    }

    public IsSuccess recvDeletePortfolio() throws org.apache.thrift.TException
    {
      deletePortfolio_result result = new deletePortfolio_result();
      receiveBase(result, "deletePortfolio");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletePortfolio failed: unknown result");
    }

    public List<String> getPortfolio(int userId) throws org.apache.thrift.TException
    {
      sendGetPortfolio(userId);
      return recvGetPortfolio();
    }

    public void sendGetPortfolio(int userId) throws org.apache.thrift.TException
    {
      getPortfolio_args args = new getPortfolio_args();
      args.set_userId(userId);
      sendBase("getPortfolio", args);
    }

    public List<String> recvGetPortfolio() throws org.apache.thrift.TException
    {
      getPortfolio_result result = new getPortfolio_result();
      receiveBase(result, "getPortfolio");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPortfolio failed: unknown result");
    }

    public IsSuccess addOrCancelAttention(String aiId, int userId, AttentionFlag flag) throws org.apache.thrift.TException
    {
      sendAddOrCancelAttention(aiId, userId, flag);
      return recvAddOrCancelAttention();
    }

    public void sendAddOrCancelAttention(String aiId, int userId, AttentionFlag flag) throws org.apache.thrift.TException
    {
      addOrCancelAttention_args args = new addOrCancelAttention_args();
      args.set_aiId(aiId);
      args.set_userId(userId);
      args.set_flag(flag);
      sendBase("addOrCancelAttention", args);
    }

    public IsSuccess recvAddOrCancelAttention() throws org.apache.thrift.TException
    {
      addOrCancelAttention_result result = new addOrCancelAttention_result();
      receiveBase(result, "addOrCancelAttention");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrCancelAttention failed: unknown result");
    }

    public InviteData getMyInvite(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      sendGetMyInvite(userId, pageNo, numPerPage);
      return recvGetMyInvite();
    }

    public void sendGetMyInvite(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      getMyInvite_args args = new getMyInvite_args();
      args.set_userId(userId);
      args.set_pageNo(pageNo);
      args.set_numPerPage(numPerPage);
      sendBase("getMyInvite", args);
    }

    public InviteData recvGetMyInvite() throws org.apache.thrift.TException
    {
      getMyInvite_result result = new getMyInvite_result();
      receiveBase(result, "getMyInvite");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyInvite failed: unknown result");
    }

    public PrivilegeData getPrivilegeStatus(int userId, List<String> privilegeIds) throws org.apache.thrift.TException
    {
      sendGetPrivilegeStatus(userId, privilegeIds);
      return recvGetPrivilegeStatus();
    }

    public void sendGetPrivilegeStatus(int userId, List<String> privilegeIds) throws org.apache.thrift.TException
    {
      getPrivilegeStatus_args args = new getPrivilegeStatus_args();
      args.set_userId(userId);
      args.set_privilegeIds(privilegeIds);
      sendBase("getPrivilegeStatus", args);
    }

    public PrivilegeData recvGetPrivilegeStatus() throws org.apache.thrift.TException
    {
      getPrivilegeStatus_result result = new getPrivilegeStatus_result();
      receiveBase(result, "getPrivilegeStatus");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrivilegeStatus failed: unknown result");
    }

    public IsSuccess unlockPrivilege(int userId, String privilegeId) throws org.apache.thrift.TException
    {
      sendUnlockPrivilege(userId, privilegeId);
      return recvUnlockPrivilege();
    }

    public void sendUnlockPrivilege(int userId, String privilegeId) throws org.apache.thrift.TException
    {
      unlockPrivilege_args args = new unlockPrivilege_args();
      args.set_userId(userId);
      args.set_privilegeId(privilegeId);
      sendBase("unlockPrivilege", args);
    }

    public IsSuccess recvUnlockPrivilege() throws org.apache.thrift.TException
    {
      unlockPrivilege_result result = new unlockPrivilege_result();
      receiveBase(result, "unlockPrivilege");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unlockPrivilege failed: unknown result");
    }

    public TaskStatuData getMyTaskStatus(int userId, List<String> taskTypeIds) throws org.apache.thrift.TException
    {
      sendGetMyTaskStatus(userId, taskTypeIds);
      return recvGetMyTaskStatus();
    }

    public void sendGetMyTaskStatus(int userId, List<String> taskTypeIds) throws org.apache.thrift.TException
    {
      getMyTaskStatus_args args = new getMyTaskStatus_args();
      args.set_userId(userId);
      args.set_taskTypeIds(taskTypeIds);
      sendBase("getMyTaskStatus", args);
    }

    public TaskStatuData recvGetMyTaskStatus() throws org.apache.thrift.TException
    {
      getMyTaskStatus_result result = new getMyTaskStatus_result();
      receiveBase(result, "getMyTaskStatus");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyTaskStatus failed: unknown result");
    }

    public PointsRecordData getPointsRecord(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      sendGetPointsRecord(userId, pageNo, numPerPage);
      return recvGetPointsRecord();
    }

    public void sendGetPointsRecord(int userId, int pageNo, int numPerPage) throws org.apache.thrift.TException
    {
      getPointsRecord_args args = new getPointsRecord_args();
      args.set_userId(userId);
      args.set_pageNo(pageNo);
      args.set_numPerPage(numPerPage);
      sendBase("getPointsRecord", args);
    }

    public PointsRecordData recvGetPointsRecord() throws org.apache.thrift.TException
    {
      getPointsRecord_result result = new getPointsRecord_result();
      receiveBase(result, "getPointsRecord");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPointsRecord failed: unknown result");
    }

    public IsSuccess earnPointsBydailyActive(int userId) throws org.apache.thrift.TException
    {
      sendEarnPointsBydailyActive(userId);
      return recvEarnPointsBydailyActive();
    }

    public void sendEarnPointsBydailyActive(int userId) throws org.apache.thrift.TException
    {
      earnPointsBydailyActive_args args = new earnPointsBydailyActive_args();
      args.set_userId(userId);
      sendBase("earnPointsBydailyActive", args);
    }

    public IsSuccess recvEarnPointsBydailyActive() throws org.apache.thrift.TException
    {
      earnPointsBydailyActive_result result = new earnPointsBydailyActive_result();
      receiveBase(result, "earnPointsBydailyActive");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "earnPointsBydailyActive failed: unknown result");
    }

    public IsSuccess earnPointsByshare(int userId) throws org.apache.thrift.TException
    {
      sendEarnPointsByshare(userId);
      return recvEarnPointsByshare();
    }

    public void sendEarnPointsByshare(int userId) throws org.apache.thrift.TException
    {
      earnPointsByshare_args args = new earnPointsByshare_args();
      args.set_userId(userId);
      sendBase("earnPointsByshare", args);
    }

    public IsSuccess recvEarnPointsByshare() throws org.apache.thrift.TException
    {
      earnPointsByshare_result result = new earnPointsByshare_result();
      receiveBase(result, "earnPointsByshare");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "earnPointsByshare failed: unknown result");
    }

    public PushStatus getPushStatus(int userId) throws org.apache.thrift.TException
    {
      sendGetPushStatus(userId);
      return recvGetPushStatus();
    }

    public void sendGetPushStatus(int userId) throws org.apache.thrift.TException
    {
      getPushStatus_args args = new getPushStatus_args();
      args.set_userId(userId);
      sendBase("getPushStatus", args);
    }

    public PushStatus recvGetPushStatus() throws org.apache.thrift.TException
    {
      getPushStatus_result result = new getPushStatus_result();
      receiveBase(result, "getPushStatus");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPushStatus failed: unknown result");
    }

    public IsSuccess pushSettings(int userId, String pushType, boolean isNeedRemind) throws org.apache.thrift.TException
    {
      sendPushSettings(userId, pushType, isNeedRemind);
      return recvPushSettings();
    }

    public void sendPushSettings(int userId, String pushType, boolean isNeedRemind) throws org.apache.thrift.TException
    {
      pushSettings_args args = new pushSettings_args();
      args.set_userId(userId);
      args.set_pushType(pushType);
      args.set_isNeedRemind(isNeedRemind);
      sendBase("pushSettings", args);
    }

    public IsSuccess recvPushSettings() throws org.apache.thrift.TException
    {
      pushSettings_result result = new pushSettings_result();
      receiveBase(result, "pushSettings");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushSettings failed: unknown result");
    }

    public List<String> stickTopOrBottom(int userId, List<String> stockCodes, int action) throws org.apache.thrift.TException
    {
      sendStickTopOrBottom(userId, stockCodes, action);
      return recvStickTopOrBottom();
    }

    public void sendStickTopOrBottom(int userId, List<String> stockCodes, int action) throws org.apache.thrift.TException
    {
      stickTopOrBottom_args args = new stickTopOrBottom_args();
      args.set_userId(userId);
      args.set_stockCodes(stockCodes);
      args.set_action(action);
      sendBase("stickTopOrBottom", args);
    }

    public List<String> recvStickTopOrBottom() throws org.apache.thrift.TException
    {
      stickTopOrBottom_result result = new stickTopOrBottom_result();
      receiveBase(result, "stickTopOrBottom");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stickTopOrBottom failed: unknown result");
    }

    public List<String> movePosition(int userId, List<String> stockCodes, int shift) throws org.apache.thrift.TException
    {
      sendMovePosition(userId, stockCodes, shift);
      return recvMovePosition();
    }

    public void sendMovePosition(int userId, List<String> stockCodes, int shift) throws org.apache.thrift.TException
    {
      movePosition_args args = new movePosition_args();
      args.set_userId(userId);
      args.set_stockCodes(stockCodes);
      args.set_shift(shift);
      sendBase("movePosition", args);
    }

    public List<String> recvMovePosition() throws org.apache.thrift.TException
    {
      movePosition_result result = new movePosition_result();
      receiveBase(result, "movePosition");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "movePosition failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSendCode(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSendCode_call method_call = new getSendCode_call(phoneNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSendCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phoneNumber;
      public getSendCode_call(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phoneNumber = phoneNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSendCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSendCode_args args = new getSendCode_args();
        args.set_phoneNumber(phoneNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SendCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetSendCode();
      }
    }

    public void dynamicLogin(String phoneNumber, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dynamicLogin_call method_call = new dynamicLogin_call(phoneNumber, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dynamicLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phoneNumber;
      private String code;
      public dynamicLogin_call(String phoneNumber, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phoneNumber = phoneNumber;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dynamicLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dynamicLogin_args args = new dynamicLogin_args();
        args.set_phoneNumber(phoneNumber);
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvDynamicLogin();
      }
    }

    public void inviteCheck(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inviteCheck_call method_call = new inviteCheck_call(phoneNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inviteCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phoneNumber;
      public inviteCheck_call(String phoneNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phoneNumber = phoneNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inviteCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inviteCheck_args args = new inviteCheck_args();
        args.set_phoneNumber(phoneNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvInviteCheck();
      }
    }

    public void inviteRegister(String phoneNumber, String code, String inviteCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inviteRegister_call method_call = new inviteRegister_call(phoneNumber, code, inviteCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inviteRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phoneNumber;
      private String code;
      private String inviteCode;
      public inviteRegister_call(String phoneNumber, String code, String inviteCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phoneNumber = phoneNumber;
        this.code = code;
        this.inviteCode = inviteCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inviteRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inviteRegister_args args = new inviteRegister_args();
        args.set_phoneNumber(phoneNumber);
        args.set_code(code);
        args.set_inviteCode(inviteCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvInviteRegister();
      }
    }

    public void oauthLogin(OAuthInfo params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      oauthLogin_call method_call = new oauthLogin_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class oauthLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OAuthInfo params;
      public oauthLogin_call(OAuthInfo params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("oauthLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        oauthLogin_args args = new oauthLogin_args();
        args.set_params(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvOauthLogin();
      }
    }

    public void getUserInfo(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfo_call method_call = new getUserInfo_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getUserInfo_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfo_args args = new getUserInfo_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetUserInfo();
      }
    }

    public void getMyPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyPoints_call method_call = new getMyPoints_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getMyPoints_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyPoints_args args = new getMyPoints_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserPoints getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetMyPoints();
      }
    }

    public void getRecentGainPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecentGainPoints_call method_call = new getRecentGainPoints_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecentGainPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getRecentGainPoints_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecentGainPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecentGainPoints_args args = new getRecentGainPoints_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserPoints getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetRecentGainPoints();
      }
    }

    public void binding(int uid, String bindValue, BindType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      binding_call method_call = new binding_call(uid, bindValue, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class binding_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private String bindValue;
      private BindType type;
      public binding_call(int uid, String bindValue, BindType type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.bindValue = bindValue;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("binding", org.apache.thrift.protocol.TMessageType.CALL, 0));
        binding_args args = new binding_args();
        args.set_uid(uid);
        args.set_bindValue(bindValue);
        args.set_type(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvBinding();
      }
    }

    public void addPortfolio(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPortfolio_call method_call = new addPortfolio_call(userId, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPortfolio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private String code;
      public addPortfolio_call(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPortfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPortfolio_args args = new addPortfolio_args();
        args.set_userId(userId);
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvAddPortfolio();
      }
    }

    public void synchronizePortfolio(int userId, List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchronizePortfolio_call method_call = new synchronizePortfolio_call(userId, codeList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchronizePortfolio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private List<String> codeList;
      public synchronizePortfolio_call(int userId, List<String> codeList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.codeList = codeList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchronizePortfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchronizePortfolio_args args = new synchronizePortfolio_args();
        args.set_userId(userId);
        args.set_codeList(codeList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvSynchronizePortfolio();
      }
    }

    public void deletePortfolio(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePortfolio_call method_call = new deletePortfolio_call(userId, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePortfolio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private String code;
      public deletePortfolio_call(int userId, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePortfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePortfolio_args args = new deletePortfolio_args();
        args.set_userId(userId);
        args.set_code(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvDeletePortfolio();
      }
    }

    public void getPortfolio(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPortfolio_call method_call = new getPortfolio_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPortfolio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getPortfolio_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPortfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPortfolio_args args = new getPortfolio_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetPortfolio();
      }
    }

    public void addOrCancelAttention(String aiId, int userId, AttentionFlag flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrCancelAttention_call method_call = new addOrCancelAttention_call(aiId, userId, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrCancelAttention_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String aiId;
      private int userId;
      private AttentionFlag flag;
      public addOrCancelAttention_call(String aiId, int userId, AttentionFlag flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aiId = aiId;
        this.userId = userId;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrCancelAttention", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrCancelAttention_args args = new addOrCancelAttention_args();
        args.set_aiId(aiId);
        args.set_userId(userId);
        args.set_flag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvAddOrCancelAttention();
      }
    }

    public void getMyInvite(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyInvite_call method_call = new getMyInvite_call(userId, pageNo, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyInvite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int pageNo;
      private int numPerPage;
      public getMyInvite_call(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNo = pageNo;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyInvite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyInvite_args args = new getMyInvite_args();
        args.set_userId(userId);
        args.set_pageNo(pageNo);
        args.set_numPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InviteData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetMyInvite();
      }
    }

    public void getPrivilegeStatus(int userId, List<String> privilegeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrivilegeStatus_call method_call = new getPrivilegeStatus_call(userId, privilegeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrivilegeStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private List<String> privilegeIds;
      public getPrivilegeStatus_call(int userId, List<String> privilegeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.privilegeIds = privilegeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrivilegeStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrivilegeStatus_args args = new getPrivilegeStatus_args();
        args.set_userId(userId);
        args.set_privilegeIds(privilegeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PrivilegeData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetPrivilegeStatus();
      }
    }

    public void unlockPrivilege(int userId, String privilegeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unlockPrivilege_call method_call = new unlockPrivilege_call(userId, privilegeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unlockPrivilege_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private String privilegeId;
      public unlockPrivilege_call(int userId, String privilegeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.privilegeId = privilegeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unlockPrivilege", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unlockPrivilege_args args = new unlockPrivilege_args();
        args.set_userId(userId);
        args.set_privilegeId(privilegeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvUnlockPrivilege();
      }
    }

    public void getMyTaskStatus(int userId, List<String> taskTypeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyTaskStatus_call method_call = new getMyTaskStatus_call(userId, taskTypeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyTaskStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private List<String> taskTypeIds;
      public getMyTaskStatus_call(int userId, List<String> taskTypeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.taskTypeIds = taskTypeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyTaskStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyTaskStatus_args args = new getMyTaskStatus_args();
        args.set_userId(userId);
        args.set_taskTypeIds(taskTypeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TaskStatuData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetMyTaskStatus();
      }
    }

    public void getPointsRecord(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPointsRecord_call method_call = new getPointsRecord_call(userId, pageNo, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPointsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int pageNo;
      private int numPerPage;
      public getPointsRecord_call(int userId, int pageNo, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNo = pageNo;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPointsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPointsRecord_args args = new getPointsRecord_args();
        args.set_userId(userId);
        args.set_pageNo(pageNo);
        args.set_numPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PointsRecordData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetPointsRecord();
      }
    }

    public void earnPointsBydailyActive(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      earnPointsBydailyActive_call method_call = new earnPointsBydailyActive_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class earnPointsBydailyActive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public earnPointsBydailyActive_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("earnPointsBydailyActive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        earnPointsBydailyActive_args args = new earnPointsBydailyActive_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvEarnPointsBydailyActive();
      }
    }

    public void earnPointsByshare(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      earnPointsByshare_call method_call = new earnPointsByshare_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class earnPointsByshare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public earnPointsByshare_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("earnPointsByshare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        earnPointsByshare_args args = new earnPointsByshare_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvEarnPointsByshare();
      }
    }

    public void getPushStatus(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPushStatus_call method_call = new getPushStatus_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPushStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getPushStatus_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPushStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPushStatus_args args = new getPushStatus_args();
        args.set_userId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PushStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetPushStatus();
      }
    }

    public void pushSettings(int userId, String pushType, boolean isNeedRemind, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushSettings_call method_call = new pushSettings_call(userId, pushType, isNeedRemind, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushSettings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private String pushType;
      private boolean isNeedRemind;
      public pushSettings_call(int userId, String pushType, boolean isNeedRemind, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pushType = pushType;
        this.isNeedRemind = isNeedRemind;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushSettings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushSettings_args args = new pushSettings_args();
        args.set_userId(userId);
        args.set_pushType(pushType);
        args.set_isNeedRemind(isNeedRemind);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsSuccess getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvPushSettings();
      }
    }

    public void stickTopOrBottom(int userId, List<String> stockCodes, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stickTopOrBottom_call method_call = new stickTopOrBottom_call(userId, stockCodes, action, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stickTopOrBottom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private List<String> stockCodes;
      private int action;
      public stickTopOrBottom_call(int userId, List<String> stockCodes, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.stockCodes = stockCodes;
        this.action = action;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stickTopOrBottom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stickTopOrBottom_args args = new stickTopOrBottom_args();
        args.set_userId(userId);
        args.set_stockCodes(stockCodes);
        args.set_action(action);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvStickTopOrBottom();
      }
    }

    public void movePosition(int userId, List<String> stockCodes, int shift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      movePosition_call method_call = new movePosition_call(userId, stockCodes, shift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class movePosition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private List<String> stockCodes;
      private int shift;
      public movePosition_call(int userId, List<String> stockCodes, int shift, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.stockCodes = stockCodes;
        this.shift = shift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("movePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        movePosition_args args = new movePosition_args();
        args.set_userId(userId);
        args.set_stockCodes(stockCodes);
        args.set_shift(shift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvMovePosition();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSendCode", new getSendCode());
      processMap.put("dynamicLogin", new dynamicLogin());
      processMap.put("inviteCheck", new inviteCheck());
      processMap.put("inviteRegister", new inviteRegister());
      processMap.put("oauthLogin", new oauthLogin());
      processMap.put("getUserInfo", new getUserInfo());
      processMap.put("getMyPoints", new getMyPoints());
      processMap.put("getRecentGainPoints", new getRecentGainPoints());
      processMap.put("binding", new binding());
      processMap.put("addPortfolio", new addPortfolio());
      processMap.put("synchronizePortfolio", new synchronizePortfolio());
      processMap.put("deletePortfolio", new deletePortfolio());
      processMap.put("getPortfolio", new getPortfolio());
      processMap.put("addOrCancelAttention", new addOrCancelAttention());
      processMap.put("getMyInvite", new getMyInvite());
      processMap.put("getPrivilegeStatus", new getPrivilegeStatus());
      processMap.put("unlockPrivilege", new unlockPrivilege());
      processMap.put("getMyTaskStatus", new getMyTaskStatus());
      processMap.put("getPointsRecord", new getPointsRecord());
      processMap.put("earnPointsBydailyActive", new earnPointsBydailyActive());
      processMap.put("earnPointsByshare", new earnPointsByshare());
      processMap.put("getPushStatus", new getPushStatus());
      processMap.put("pushSettings", new pushSettings());
      processMap.put("stickTopOrBottom", new stickTopOrBottom());
      processMap.put("movePosition", new movePosition());
      return processMap;
    }

    public static class getSendCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSendCode_args> {
      public getSendCode() {
        super("getSendCode");
      }

      public getSendCode_args getEmptyArgsInstance() {
        return new getSendCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSendCode_result getResult(I iface, getSendCode_args args) throws org.apache.thrift.TException {
        getSendCode_result result = new getSendCode_result();
        result.success = iface.getSendCode(args.phoneNumber);
        return result;
      }
    }

    public static class dynamicLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dynamicLogin_args> {
      public dynamicLogin() {
        super("dynamicLogin");
      }

      public dynamicLogin_args getEmptyArgsInstance() {
        return new dynamicLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dynamicLogin_result getResult(I iface, dynamicLogin_args args) throws org.apache.thrift.TException {
        dynamicLogin_result result = new dynamicLogin_result();
        result.success = iface.dynamicLogin(args.phoneNumber, args.code);
        return result;
      }
    }

    public static class inviteCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inviteCheck_args> {
      public inviteCheck() {
        super("inviteCheck");
      }

      public inviteCheck_args getEmptyArgsInstance() {
        return new inviteCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inviteCheck_result getResult(I iface, inviteCheck_args args) throws org.apache.thrift.TException {
        inviteCheck_result result = new inviteCheck_result();
        result.success = iface.inviteCheck(args.phoneNumber);
        return result;
      }
    }

    public static class inviteRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inviteRegister_args> {
      public inviteRegister() {
        super("inviteRegister");
      }

      public inviteRegister_args getEmptyArgsInstance() {
        return new inviteRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inviteRegister_result getResult(I iface, inviteRegister_args args) throws org.apache.thrift.TException {
        inviteRegister_result result = new inviteRegister_result();
        result.success = iface.inviteRegister(args.phoneNumber, args.code, args.inviteCode);
        return result;
      }
    }

    public static class oauthLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, oauthLogin_args> {
      public oauthLogin() {
        super("oauthLogin");
      }

      public oauthLogin_args getEmptyArgsInstance() {
        return new oauthLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public oauthLogin_result getResult(I iface, oauthLogin_args args) throws org.apache.thrift.TException {
        oauthLogin_result result = new oauthLogin_result();
        result.success = iface.oauthLogin(args.params);
        return result;
      }
    }

    public static class getUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfo_args> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfo_result getResult(I iface, getUserInfo_args args) throws org.apache.thrift.TException {
        getUserInfo_result result = new getUserInfo_result();
        result.success = iface.getUserInfo(args.userId);
        return result;
      }
    }

    public static class getMyPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyPoints_args> {
      public getMyPoints() {
        super("getMyPoints");
      }

      public getMyPoints_args getEmptyArgsInstance() {
        return new getMyPoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyPoints_result getResult(I iface, getMyPoints_args args) throws org.apache.thrift.TException {
        getMyPoints_result result = new getMyPoints_result();
        result.success = iface.getMyPoints(args.userId);
        return result;
      }
    }

    public static class getRecentGainPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecentGainPoints_args> {
      public getRecentGainPoints() {
        super("getRecentGainPoints");
      }

      public getRecentGainPoints_args getEmptyArgsInstance() {
        return new getRecentGainPoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecentGainPoints_result getResult(I iface, getRecentGainPoints_args args) throws org.apache.thrift.TException {
        getRecentGainPoints_result result = new getRecentGainPoints_result();
        result.success = iface.getRecentGainPoints(args.userId);
        return result;
      }
    }

    public static class binding<I extends Iface> extends org.apache.thrift.ProcessFunction<I, binding_args> {
      public binding() {
        super("binding");
      }

      public binding_args getEmptyArgsInstance() {
        return new binding_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public binding_result getResult(I iface, binding_args args) throws org.apache.thrift.TException {
        binding_result result = new binding_result();
        result.success = iface.binding(args.uid, args.bindValue, args.type);
        return result;
      }
    }

    public static class addPortfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPortfolio_args> {
      public addPortfolio() {
        super("addPortfolio");
      }

      public addPortfolio_args getEmptyArgsInstance() {
        return new addPortfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPortfolio_result getResult(I iface, addPortfolio_args args) throws org.apache.thrift.TException {
        addPortfolio_result result = new addPortfolio_result();
        result.success = iface.addPortfolio(args.userId, args.code);
        return result;
      }
    }

    public static class synchronizePortfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchronizePortfolio_args> {
      public synchronizePortfolio() {
        super("synchronizePortfolio");
      }

      public synchronizePortfolio_args getEmptyArgsInstance() {
        return new synchronizePortfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public synchronizePortfolio_result getResult(I iface, synchronizePortfolio_args args) throws org.apache.thrift.TException {
        synchronizePortfolio_result result = new synchronizePortfolio_result();
        result.success = iface.synchronizePortfolio(args.userId, args.codeList);
        return result;
      }
    }

    public static class deletePortfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePortfolio_args> {
      public deletePortfolio() {
        super("deletePortfolio");
      }

      public deletePortfolio_args getEmptyArgsInstance() {
        return new deletePortfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePortfolio_result getResult(I iface, deletePortfolio_args args) throws org.apache.thrift.TException {
        deletePortfolio_result result = new deletePortfolio_result();
        result.success = iface.deletePortfolio(args.userId, args.code);
        return result;
      }
    }

    public static class getPortfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPortfolio_args> {
      public getPortfolio() {
        super("getPortfolio");
      }

      public getPortfolio_args getEmptyArgsInstance() {
        return new getPortfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPortfolio_result getResult(I iface, getPortfolio_args args) throws org.apache.thrift.TException {
        getPortfolio_result result = new getPortfolio_result();
        result.success = iface.getPortfolio(args.userId);
        return result;
      }
    }

    public static class addOrCancelAttention<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrCancelAttention_args> {
      public addOrCancelAttention() {
        super("addOrCancelAttention");
      }

      public addOrCancelAttention_args getEmptyArgsInstance() {
        return new addOrCancelAttention_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrCancelAttention_result getResult(I iface, addOrCancelAttention_args args) throws org.apache.thrift.TException {
        addOrCancelAttention_result result = new addOrCancelAttention_result();
        result.success = iface.addOrCancelAttention(args.aiId, args.userId, args.flag);
        return result;
      }
    }

    public static class getMyInvite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyInvite_args> {
      public getMyInvite() {
        super("getMyInvite");
      }

      public getMyInvite_args getEmptyArgsInstance() {
        return new getMyInvite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyInvite_result getResult(I iface, getMyInvite_args args) throws org.apache.thrift.TException {
        getMyInvite_result result = new getMyInvite_result();
        result.success = iface.getMyInvite(args.userId, args.pageNo, args.numPerPage);
        return result;
      }
    }

    public static class getPrivilegeStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrivilegeStatus_args> {
      public getPrivilegeStatus() {
        super("getPrivilegeStatus");
      }

      public getPrivilegeStatus_args getEmptyArgsInstance() {
        return new getPrivilegeStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPrivilegeStatus_result getResult(I iface, getPrivilegeStatus_args args) throws org.apache.thrift.TException {
        getPrivilegeStatus_result result = new getPrivilegeStatus_result();
        result.success = iface.getPrivilegeStatus(args.userId, args.privilegeIds);
        return result;
      }
    }

    public static class unlockPrivilege<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unlockPrivilege_args> {
      public unlockPrivilege() {
        super("unlockPrivilege");
      }

      public unlockPrivilege_args getEmptyArgsInstance() {
        return new unlockPrivilege_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unlockPrivilege_result getResult(I iface, unlockPrivilege_args args) throws org.apache.thrift.TException {
        unlockPrivilege_result result = new unlockPrivilege_result();
        result.success = iface.unlockPrivilege(args.userId, args.privilegeId);
        return result;
      }
    }

    public static class getMyTaskStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyTaskStatus_args> {
      public getMyTaskStatus() {
        super("getMyTaskStatus");
      }

      public getMyTaskStatus_args getEmptyArgsInstance() {
        return new getMyTaskStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyTaskStatus_result getResult(I iface, getMyTaskStatus_args args) throws org.apache.thrift.TException {
        getMyTaskStatus_result result = new getMyTaskStatus_result();
        result.success = iface.getMyTaskStatus(args.userId, args.taskTypeIds);
        return result;
      }
    }

    public static class getPointsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPointsRecord_args> {
      public getPointsRecord() {
        super("getPointsRecord");
      }

      public getPointsRecord_args getEmptyArgsInstance() {
        return new getPointsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPointsRecord_result getResult(I iface, getPointsRecord_args args) throws org.apache.thrift.TException {
        getPointsRecord_result result = new getPointsRecord_result();
        result.success = iface.getPointsRecord(args.userId, args.pageNo, args.numPerPage);
        return result;
      }
    }

    public static class earnPointsBydailyActive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, earnPointsBydailyActive_args> {
      public earnPointsBydailyActive() {
        super("earnPointsBydailyActive");
      }

      public earnPointsBydailyActive_args getEmptyArgsInstance() {
        return new earnPointsBydailyActive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public earnPointsBydailyActive_result getResult(I iface, earnPointsBydailyActive_args args) throws org.apache.thrift.TException {
        earnPointsBydailyActive_result result = new earnPointsBydailyActive_result();
        result.success = iface.earnPointsBydailyActive(args.userId);
        return result;
      }
    }

    public static class earnPointsByshare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, earnPointsByshare_args> {
      public earnPointsByshare() {
        super("earnPointsByshare");
      }

      public earnPointsByshare_args getEmptyArgsInstance() {
        return new earnPointsByshare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public earnPointsByshare_result getResult(I iface, earnPointsByshare_args args) throws org.apache.thrift.TException {
        earnPointsByshare_result result = new earnPointsByshare_result();
        result.success = iface.earnPointsByshare(args.userId);
        return result;
      }
    }

    public static class getPushStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPushStatus_args> {
      public getPushStatus() {
        super("getPushStatus");
      }

      public getPushStatus_args getEmptyArgsInstance() {
        return new getPushStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPushStatus_result getResult(I iface, getPushStatus_args args) throws org.apache.thrift.TException {
        getPushStatus_result result = new getPushStatus_result();
        result.success = iface.getPushStatus(args.userId);
        return result;
      }
    }

    public static class pushSettings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushSettings_args> {
      public pushSettings() {
        super("pushSettings");
      }

      public pushSettings_args getEmptyArgsInstance() {
        return new pushSettings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushSettings_result getResult(I iface, pushSettings_args args) throws org.apache.thrift.TException {
        pushSettings_result result = new pushSettings_result();
        result.success = iface.pushSettings(args.userId, args.pushType, args.isNeedRemind);
        return result;
      }
    }

    public static class stickTopOrBottom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stickTopOrBottom_args> {
      public stickTopOrBottom() {
        super("stickTopOrBottom");
      }

      public stickTopOrBottom_args getEmptyArgsInstance() {
        return new stickTopOrBottom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stickTopOrBottom_result getResult(I iface, stickTopOrBottom_args args) throws org.apache.thrift.TException {
        stickTopOrBottom_result result = new stickTopOrBottom_result();
        result.success = iface.stickTopOrBottom(args.userId, args.stockCodes, args.action);
        return result;
      }
    }

    public static class movePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, movePosition_args> {
      public movePosition() {
        super("movePosition");
      }

      public movePosition_args getEmptyArgsInstance() {
        return new movePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public movePosition_result getResult(I iface, movePosition_args args) throws org.apache.thrift.TException {
        movePosition_result result = new movePosition_result();
        result.success = iface.movePosition(args.userId, args.stockCodes, args.shift);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSendCode", new getSendCode());
      processMap.put("dynamicLogin", new dynamicLogin());
      processMap.put("inviteCheck", new inviteCheck());
      processMap.put("inviteRegister", new inviteRegister());
      processMap.put("oauthLogin", new oauthLogin());
      processMap.put("getUserInfo", new getUserInfo());
      processMap.put("getMyPoints", new getMyPoints());
      processMap.put("getRecentGainPoints", new getRecentGainPoints());
      processMap.put("binding", new binding());
      processMap.put("addPortfolio", new addPortfolio());
      processMap.put("synchronizePortfolio", new synchronizePortfolio());
      processMap.put("deletePortfolio", new deletePortfolio());
      processMap.put("getPortfolio", new getPortfolio());
      processMap.put("addOrCancelAttention", new addOrCancelAttention());
      processMap.put("getMyInvite", new getMyInvite());
      processMap.put("getPrivilegeStatus", new getPrivilegeStatus());
      processMap.put("unlockPrivilege", new unlockPrivilege());
      processMap.put("getMyTaskStatus", new getMyTaskStatus());
      processMap.put("getPointsRecord", new getPointsRecord());
      processMap.put("earnPointsBydailyActive", new earnPointsBydailyActive());
      processMap.put("earnPointsByshare", new earnPointsByshare());
      processMap.put("getPushStatus", new getPushStatus());
      processMap.put("pushSettings", new pushSettings());
      processMap.put("stickTopOrBottom", new stickTopOrBottom());
      processMap.put("movePosition", new movePosition());
      return processMap;
    }

    public static class getSendCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSendCode_args, SendCode> {
      public getSendCode() {
        super("getSendCode");
      }

      public getSendCode_args getEmptyArgsInstance() {
        return new getSendCode_args();
      }

      public AsyncMethodCallback<SendCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SendCode>() { 
          public void onComplete(SendCode o) {
            getSendCode_result result = new getSendCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSendCode_result result = new getSendCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSendCode_args args, org.apache.thrift.async.AsyncMethodCallback<SendCode> resultHandler) throws TException {
        iface.getSendCode(args.phoneNumber,resultHandler);
      }
    }

    public static class dynamicLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dynamicLogin_args, UserData> {
      public dynamicLogin() {
        super("dynamicLogin");
      }

      public dynamicLogin_args getEmptyArgsInstance() {
        return new dynamicLogin_args();
      }

      public AsyncMethodCallback<UserData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserData>() { 
          public void onComplete(UserData o) {
            dynamicLogin_result result = new dynamicLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dynamicLogin_result result = new dynamicLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dynamicLogin_args args, org.apache.thrift.async.AsyncMethodCallback<UserData> resultHandler) throws TException {
        iface.dynamicLogin(args.phoneNumber, args.code,resultHandler);
      }
    }

    public static class inviteCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inviteCheck_args, IsSuccess> {
      public inviteCheck() {
        super("inviteCheck");
      }

      public inviteCheck_args getEmptyArgsInstance() {
        return new inviteCheck_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            inviteCheck_result result = new inviteCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inviteCheck_result result = new inviteCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inviteCheck_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.inviteCheck(args.phoneNumber,resultHandler);
      }
    }

    public static class inviteRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inviteRegister_args, IsSuccess> {
      public inviteRegister() {
        super("inviteRegister");
      }

      public inviteRegister_args getEmptyArgsInstance() {
        return new inviteRegister_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            inviteRegister_result result = new inviteRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inviteRegister_result result = new inviteRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inviteRegister_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.inviteRegister(args.phoneNumber, args.code, args.inviteCode,resultHandler);
      }
    }

    public static class oauthLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, oauthLogin_args, UserData> {
      public oauthLogin() {
        super("oauthLogin");
      }

      public oauthLogin_args getEmptyArgsInstance() {
        return new oauthLogin_args();
      }

      public AsyncMethodCallback<UserData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserData>() { 
          public void onComplete(UserData o) {
            oauthLogin_result result = new oauthLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            oauthLogin_result result = new oauthLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, oauthLogin_args args, org.apache.thrift.async.AsyncMethodCallback<UserData> resultHandler) throws TException {
        iface.oauthLogin(args.params,resultHandler);
      }
    }

    public static class getUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfo_args, UserData> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      public AsyncMethodCallback<UserData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserData>() { 
          public void onComplete(UserData o) {
            getUserInfo_result result = new getUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserInfo_result result = new getUserInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<UserData> resultHandler) throws TException {
        iface.getUserInfo(args.userId,resultHandler);
      }
    }

    public static class getMyPoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyPoints_args, UserPoints> {
      public getMyPoints() {
        super("getMyPoints");
      }

      public getMyPoints_args getEmptyArgsInstance() {
        return new getMyPoints_args();
      }

      public AsyncMethodCallback<UserPoints> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserPoints>() { 
          public void onComplete(UserPoints o) {
            getMyPoints_result result = new getMyPoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyPoints_result result = new getMyPoints_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyPoints_args args, org.apache.thrift.async.AsyncMethodCallback<UserPoints> resultHandler) throws TException {
        iface.getMyPoints(args.userId,resultHandler);
      }
    }

    public static class getRecentGainPoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecentGainPoints_args, UserPoints> {
      public getRecentGainPoints() {
        super("getRecentGainPoints");
      }

      public getRecentGainPoints_args getEmptyArgsInstance() {
        return new getRecentGainPoints_args();
      }

      public AsyncMethodCallback<UserPoints> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserPoints>() { 
          public void onComplete(UserPoints o) {
            getRecentGainPoints_result result = new getRecentGainPoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecentGainPoints_result result = new getRecentGainPoints_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecentGainPoints_args args, org.apache.thrift.async.AsyncMethodCallback<UserPoints> resultHandler) throws TException {
        iface.getRecentGainPoints(args.userId,resultHandler);
      }
    }

    public static class binding<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, binding_args, IsSuccess> {
      public binding() {
        super("binding");
      }

      public binding_args getEmptyArgsInstance() {
        return new binding_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            binding_result result = new binding_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            binding_result result = new binding_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, binding_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.binding(args.uid, args.bindValue, args.type,resultHandler);
      }
    }

    public static class addPortfolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPortfolio_args, IsSuccess> {
      public addPortfolio() {
        super("addPortfolio");
      }

      public addPortfolio_args getEmptyArgsInstance() {
        return new addPortfolio_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            addPortfolio_result result = new addPortfolio_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPortfolio_result result = new addPortfolio_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPortfolio_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.addPortfolio(args.userId, args.code,resultHandler);
      }
    }

    public static class synchronizePortfolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchronizePortfolio_args, List<String>> {
      public synchronizePortfolio() {
        super("synchronizePortfolio");
      }

      public synchronizePortfolio_args getEmptyArgsInstance() {
        return new synchronizePortfolio_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            synchronizePortfolio_result result = new synchronizePortfolio_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            synchronizePortfolio_result result = new synchronizePortfolio_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchronizePortfolio_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.synchronizePortfolio(args.userId, args.codeList,resultHandler);
      }
    }

    public static class deletePortfolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePortfolio_args, IsSuccess> {
      public deletePortfolio() {
        super("deletePortfolio");
      }

      public deletePortfolio_args getEmptyArgsInstance() {
        return new deletePortfolio_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            deletePortfolio_result result = new deletePortfolio_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deletePortfolio_result result = new deletePortfolio_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePortfolio_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.deletePortfolio(args.userId, args.code,resultHandler);
      }
    }

    public static class getPortfolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPortfolio_args, List<String>> {
      public getPortfolio() {
        super("getPortfolio");
      }

      public getPortfolio_args getEmptyArgsInstance() {
        return new getPortfolio_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getPortfolio_result result = new getPortfolio_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPortfolio_result result = new getPortfolio_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPortfolio_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getPortfolio(args.userId,resultHandler);
      }
    }

    public static class addOrCancelAttention<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrCancelAttention_args, IsSuccess> {
      public addOrCancelAttention() {
        super("addOrCancelAttention");
      }

      public addOrCancelAttention_args getEmptyArgsInstance() {
        return new addOrCancelAttention_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            addOrCancelAttention_result result = new addOrCancelAttention_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrCancelAttention_result result = new addOrCancelAttention_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrCancelAttention_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.addOrCancelAttention(args.aiId, args.userId, args.flag,resultHandler);
      }
    }

    public static class getMyInvite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyInvite_args, InviteData> {
      public getMyInvite() {
        super("getMyInvite");
      }

      public getMyInvite_args getEmptyArgsInstance() {
        return new getMyInvite_args();
      }

      public AsyncMethodCallback<InviteData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InviteData>() { 
          public void onComplete(InviteData o) {
            getMyInvite_result result = new getMyInvite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyInvite_result result = new getMyInvite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyInvite_args args, org.apache.thrift.async.AsyncMethodCallback<InviteData> resultHandler) throws TException {
        iface.getMyInvite(args.userId, args.pageNo, args.numPerPage,resultHandler);
      }
    }

    public static class getPrivilegeStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPrivilegeStatus_args, PrivilegeData> {
      public getPrivilegeStatus() {
        super("getPrivilegeStatus");
      }

      public getPrivilegeStatus_args getEmptyArgsInstance() {
        return new getPrivilegeStatus_args();
      }

      public AsyncMethodCallback<PrivilegeData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PrivilegeData>() { 
          public void onComplete(PrivilegeData o) {
            getPrivilegeStatus_result result = new getPrivilegeStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPrivilegeStatus_result result = new getPrivilegeStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPrivilegeStatus_args args, org.apache.thrift.async.AsyncMethodCallback<PrivilegeData> resultHandler) throws TException {
        iface.getPrivilegeStatus(args.userId, args.privilegeIds,resultHandler);
      }
    }

    public static class unlockPrivilege<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unlockPrivilege_args, IsSuccess> {
      public unlockPrivilege() {
        super("unlockPrivilege");
      }

      public unlockPrivilege_args getEmptyArgsInstance() {
        return new unlockPrivilege_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            unlockPrivilege_result result = new unlockPrivilege_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unlockPrivilege_result result = new unlockPrivilege_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unlockPrivilege_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.unlockPrivilege(args.userId, args.privilegeId,resultHandler);
      }
    }

    public static class getMyTaskStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyTaskStatus_args, TaskStatuData> {
      public getMyTaskStatus() {
        super("getMyTaskStatus");
      }

      public getMyTaskStatus_args getEmptyArgsInstance() {
        return new getMyTaskStatus_args();
      }

      public AsyncMethodCallback<TaskStatuData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TaskStatuData>() { 
          public void onComplete(TaskStatuData o) {
            getMyTaskStatus_result result = new getMyTaskStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyTaskStatus_result result = new getMyTaskStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyTaskStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TaskStatuData> resultHandler) throws TException {
        iface.getMyTaskStatus(args.userId, args.taskTypeIds,resultHandler);
      }
    }

    public static class getPointsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPointsRecord_args, PointsRecordData> {
      public getPointsRecord() {
        super("getPointsRecord");
      }

      public getPointsRecord_args getEmptyArgsInstance() {
        return new getPointsRecord_args();
      }

      public AsyncMethodCallback<PointsRecordData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PointsRecordData>() { 
          public void onComplete(PointsRecordData o) {
            getPointsRecord_result result = new getPointsRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPointsRecord_result result = new getPointsRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPointsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<PointsRecordData> resultHandler) throws TException {
        iface.getPointsRecord(args.userId, args.pageNo, args.numPerPage,resultHandler);
      }
    }

    public static class earnPointsBydailyActive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, earnPointsBydailyActive_args, IsSuccess> {
      public earnPointsBydailyActive() {
        super("earnPointsBydailyActive");
      }

      public earnPointsBydailyActive_args getEmptyArgsInstance() {
        return new earnPointsBydailyActive_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            earnPointsBydailyActive_result result = new earnPointsBydailyActive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            earnPointsBydailyActive_result result = new earnPointsBydailyActive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, earnPointsBydailyActive_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.earnPointsBydailyActive(args.userId,resultHandler);
      }
    }

    public static class earnPointsByshare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, earnPointsByshare_args, IsSuccess> {
      public earnPointsByshare() {
        super("earnPointsByshare");
      }

      public earnPointsByshare_args getEmptyArgsInstance() {
        return new earnPointsByshare_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            earnPointsByshare_result result = new earnPointsByshare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            earnPointsByshare_result result = new earnPointsByshare_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, earnPointsByshare_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.earnPointsByshare(args.userId,resultHandler);
      }
    }

    public static class getPushStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPushStatus_args, PushStatus> {
      public getPushStatus() {
        super("getPushStatus");
      }

      public getPushStatus_args getEmptyArgsInstance() {
        return new getPushStatus_args();
      }

      public AsyncMethodCallback<PushStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PushStatus>() { 
          public void onComplete(PushStatus o) {
            getPushStatus_result result = new getPushStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPushStatus_result result = new getPushStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPushStatus_args args, org.apache.thrift.async.AsyncMethodCallback<PushStatus> resultHandler) throws TException {
        iface.getPushStatus(args.userId,resultHandler);
      }
    }

    public static class pushSettings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushSettings_args, IsSuccess> {
      public pushSettings() {
        super("pushSettings");
      }

      public pushSettings_args getEmptyArgsInstance() {
        return new pushSettings_args();
      }

      public AsyncMethodCallback<IsSuccess> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsSuccess>() { 
          public void onComplete(IsSuccess o) {
            pushSettings_result result = new pushSettings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pushSettings_result result = new pushSettings_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pushSettings_args args, org.apache.thrift.async.AsyncMethodCallback<IsSuccess> resultHandler) throws TException {
        iface.pushSettings(args.userId, args.pushType, args.isNeedRemind,resultHandler);
      }
    }

    public static class stickTopOrBottom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stickTopOrBottom_args, List<String>> {
      public stickTopOrBottom() {
        super("stickTopOrBottom");
      }

      public stickTopOrBottom_args getEmptyArgsInstance() {
        return new stickTopOrBottom_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            stickTopOrBottom_result result = new stickTopOrBottom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stickTopOrBottom_result result = new stickTopOrBottom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stickTopOrBottom_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.stickTopOrBottom(args.userId, args.stockCodes, args.action,resultHandler);
      }
    }

    public static class movePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, movePosition_args, List<String>> {
      public movePosition() {
        super("movePosition");
      }

      public movePosition_args getEmptyArgsInstance() {
        return new movePosition_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            movePosition_result result = new movePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            movePosition_result result = new movePosition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, movePosition_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.movePosition(args.userId, args.stockCodes, args.shift,resultHandler);
      }
    }

  }

  public static class getSendCode_args implements org.apache.thrift.TBase<getSendCode_args, getSendCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSendCode_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSendCode_args");

    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSendCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSendCode_argsTupleSchemeFactory());
    }

    private String phoneNumber; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(phoneNumber);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getSendCode_args(android.os.Parcel in) {
      this.phoneNumber= in.readString();
    }

    public static final android.os.Parcelable.Creator<getSendCode_args> CREATOR = new android.os.Parcelable.Creator<getSendCode_args>() {
      @Override
      public getSendCode_args[] newArray(int size) {
        return new getSendCode_args[size];
      }

      @Override
      public getSendCode_args createFromParcel(android.os.Parcel in) {
        return new getSendCode_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE_NUMBER((short)1, "phoneNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE_NUMBER
            return PHONE_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSendCode_args.class, metaDataMap);
    }

    public getSendCode_args() {
    }

    public getSendCode_args(
      String phoneNumber)
    {
      this();
      this.phoneNumber = phoneNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSendCode_args(getSendCode_args other) {
      if (other.is_set_phoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
    }

    public getSendCode_args deepCopy() {
      return new getSendCode_args(this);
    }

    public void clear() {
      this.phoneNumber = null;
    }

    public String get_phoneNumber() {
      return this.phoneNumber;
    }

    public void set_phoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unset_phoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean is_set_phoneNumber() {
      return this.phoneNumber != null;
    }

    public void set_phoneNumber_isSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE_NUMBER:
        if (value == null) {
          unset_phoneNumber();
        } else {
          set_phoneNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE_NUMBER:
        return get_phoneNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE_NUMBER:
        return is_set_phoneNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSendCode_args)
        return this.equals((getSendCode_args)that);
      return false;
    }

    public boolean equals(getSendCode_args that) {
      if (that == null)
        return false;

      boolean this_present_phoneNumber = true && this.is_set_phoneNumber();
      boolean that_present_phoneNumber = true && that.is_set_phoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_phoneNumber = true && (is_set_phoneNumber());
      list.add(present_phoneNumber);
      if (present_phoneNumber)
        list.add(phoneNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSendCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_phoneNumber()).compareTo(other.is_set_phoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_phoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSendCode_args(");
      boolean first = true;

      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getSendCode_argsStandardSchemeFactory implements SchemeFactory {
      public getSendCode_argsStandardScheme getScheme() {
        return new getSendCode_argsStandardScheme();
      }
    }

    private static class getSendCode_argsStandardScheme extends StandardScheme<getSendCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSendCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.set_phoneNumber_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSendCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSendCode_argsTupleSchemeFactory implements SchemeFactory {
      public getSendCode_argsTupleScheme getScheme() {
        return new getSendCode_argsTupleScheme();
      }
    }

    private static class getSendCode_argsTupleScheme extends TupleScheme<getSendCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSendCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_phoneNumber()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_phoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSendCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.phoneNumber = iprot.readString();
          struct.set_phoneNumber_isSet(true);
        }
      }
    }

  }

  public static class getSendCode_result implements org.apache.thrift.TBase<getSendCode_result, getSendCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSendCode_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSendCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSendCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSendCode_resultTupleSchemeFactory());
    }

    private SendCode success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getSendCode_result(android.os.Parcel in) {
      this.success= in.readParcelable(getSendCode_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getSendCode_result> CREATOR = new android.os.Parcelable.Creator<getSendCode_result>() {
      @Override
      public getSendCode_result[] newArray(int size) {
        return new getSendCode_result[size];
      }

      @Override
      public getSendCode_result createFromParcel(android.os.Parcel in) {
        return new getSendCode_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SendCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSendCode_result.class, metaDataMap);
    }

    public getSendCode_result() {
    }

    public getSendCode_result(
      SendCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSendCode_result(getSendCode_result other) {
      if (other.is_set_success()) {
        this.success = new SendCode(other.success);
      }
    }

    public getSendCode_result deepCopy() {
      return new getSendCode_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public SendCode get_success() {
      return this.success;
    }

    public void set_success(SendCode success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((SendCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSendCode_result)
        return this.equals((getSendCode_result)that);
      return false;
    }

    public boolean equals(getSendCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSendCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSendCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getSendCode_resultStandardSchemeFactory implements SchemeFactory {
      public getSendCode_resultStandardScheme getScheme() {
        return new getSendCode_resultStandardScheme();
      }
    }

    private static class getSendCode_resultStandardScheme extends StandardScheme<getSendCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSendCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new SendCode();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSendCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSendCode_resultTupleSchemeFactory implements SchemeFactory {
      public getSendCode_resultTupleScheme getScheme() {
        return new getSendCode_resultTupleScheme();
      }
    }

    private static class getSendCode_resultTupleScheme extends TupleScheme<getSendCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSendCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSendCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new SendCode();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class dynamicLogin_args implements org.apache.thrift.TBase<dynamicLogin_args, dynamicLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<dynamicLogin_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dynamicLogin_args");

    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dynamicLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dynamicLogin_argsTupleSchemeFactory());
    }

    private String phoneNumber; // required
    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(phoneNumber);
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public dynamicLogin_args(android.os.Parcel in) {
      this.phoneNumber= in.readString();
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<dynamicLogin_args> CREATOR = new android.os.Parcelable.Creator<dynamicLogin_args>() {
      @Override
      public dynamicLogin_args[] newArray(int size) {
        return new dynamicLogin_args[size];
      }

      @Override
      public dynamicLogin_args createFromParcel(android.os.Parcel in) {
        return new dynamicLogin_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE_NUMBER((short)1, "phoneNumber"),
      CODE((short)2, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE_NUMBER
            return PHONE_NUMBER;
          case 2: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dynamicLogin_args.class, metaDataMap);
    }

    public dynamicLogin_args() {
    }

    public dynamicLogin_args(
      String phoneNumber,
      String code)
    {
      this();
      this.phoneNumber = phoneNumber;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dynamicLogin_args(dynamicLogin_args other) {
      if (other.is_set_phoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public dynamicLogin_args deepCopy() {
      return new dynamicLogin_args(this);
    }

    public void clear() {
      this.phoneNumber = null;
      this.code = null;
    }

    public String get_phoneNumber() {
      return this.phoneNumber;
    }

    public void set_phoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unset_phoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean is_set_phoneNumber() {
      return this.phoneNumber != null;
    }

    public void set_phoneNumber_isSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE_NUMBER:
        if (value == null) {
          unset_phoneNumber();
        } else {
          set_phoneNumber((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE_NUMBER:
        return get_phoneNumber();

      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE_NUMBER:
        return is_set_phoneNumber();
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dynamicLogin_args)
        return this.equals((dynamicLogin_args)that);
      return false;
    }

    public boolean equals(dynamicLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_phoneNumber = true && this.is_set_phoneNumber();
      boolean that_present_phoneNumber = true && that.is_set_phoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_phoneNumber = true && (is_set_phoneNumber());
      list.add(present_phoneNumber);
      if (present_phoneNumber)
        list.add(phoneNumber);

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(dynamicLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_phoneNumber()).compareTo(other.is_set_phoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_phoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dynamicLogin_args(");
      boolean first = true;

      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class dynamicLogin_argsStandardSchemeFactory implements SchemeFactory {
      public dynamicLogin_argsStandardScheme getScheme() {
        return new dynamicLogin_argsStandardScheme();
      }
    }

    private static class dynamicLogin_argsStandardScheme extends StandardScheme<dynamicLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dynamicLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.set_phoneNumber_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dynamicLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dynamicLogin_argsTupleSchemeFactory implements SchemeFactory {
      public dynamicLogin_argsTupleScheme getScheme() {
        return new dynamicLogin_argsTupleScheme();
      }
    }

    private static class dynamicLogin_argsTupleScheme extends TupleScheme<dynamicLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dynamicLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_phoneNumber()) {
          optionals.set(0);
        }
        if (struct.is_set_code()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_phoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dynamicLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.phoneNumber = iprot.readString();
          struct.set_phoneNumber_isSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
      }
    }

  }

  public static class dynamicLogin_result implements org.apache.thrift.TBase<dynamicLogin_result, dynamicLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<dynamicLogin_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dynamicLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dynamicLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dynamicLogin_resultTupleSchemeFactory());
    }

    private UserData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public dynamicLogin_result(android.os.Parcel in) {
      this.success= in.readParcelable(dynamicLogin_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<dynamicLogin_result> CREATOR = new android.os.Parcelable.Creator<dynamicLogin_result>() {
      @Override
      public dynamicLogin_result[] newArray(int size) {
        return new dynamicLogin_result[size];
      }

      @Override
      public dynamicLogin_result createFromParcel(android.os.Parcel in) {
        return new dynamicLogin_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dynamicLogin_result.class, metaDataMap);
    }

    public dynamicLogin_result() {
    }

    public dynamicLogin_result(
      UserData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dynamicLogin_result(dynamicLogin_result other) {
      if (other.is_set_success()) {
        this.success = new UserData(other.success);
      }
    }

    public dynamicLogin_result deepCopy() {
      return new dynamicLogin_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public UserData get_success() {
      return this.success;
    }

    public void set_success(UserData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((UserData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dynamicLogin_result)
        return this.equals((dynamicLogin_result)that);
      return false;
    }

    public boolean equals(dynamicLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(dynamicLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dynamicLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class dynamicLogin_resultStandardSchemeFactory implements SchemeFactory {
      public dynamicLogin_resultStandardScheme getScheme() {
        return new dynamicLogin_resultStandardScheme();
      }
    }

    private static class dynamicLogin_resultStandardScheme extends StandardScheme<dynamicLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dynamicLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new UserData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dynamicLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dynamicLogin_resultTupleSchemeFactory implements SchemeFactory {
      public dynamicLogin_resultTupleScheme getScheme() {
        return new dynamicLogin_resultTupleScheme();
      }
    }

    private static class dynamicLogin_resultTupleScheme extends TupleScheme<dynamicLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dynamicLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dynamicLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new UserData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class inviteCheck_args implements org.apache.thrift.TBase<inviteCheck_args, inviteCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<inviteCheck_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteCheck_args");

    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteCheck_argsTupleSchemeFactory());
    }

    private String phoneNumber; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(phoneNumber);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public inviteCheck_args(android.os.Parcel in) {
      this.phoneNumber= in.readString();
    }

    public static final android.os.Parcelable.Creator<inviteCheck_args> CREATOR = new android.os.Parcelable.Creator<inviteCheck_args>() {
      @Override
      public inviteCheck_args[] newArray(int size) {
        return new inviteCheck_args[size];
      }

      @Override
      public inviteCheck_args createFromParcel(android.os.Parcel in) {
        return new inviteCheck_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE_NUMBER((short)1, "phoneNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE_NUMBER
            return PHONE_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteCheck_args.class, metaDataMap);
    }

    public inviteCheck_args() {
    }

    public inviteCheck_args(
      String phoneNumber)
    {
      this();
      this.phoneNumber = phoneNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteCheck_args(inviteCheck_args other) {
      if (other.is_set_phoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
    }

    public inviteCheck_args deepCopy() {
      return new inviteCheck_args(this);
    }

    public void clear() {
      this.phoneNumber = null;
    }

    public String get_phoneNumber() {
      return this.phoneNumber;
    }

    public void set_phoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unset_phoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean is_set_phoneNumber() {
      return this.phoneNumber != null;
    }

    public void set_phoneNumber_isSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE_NUMBER:
        if (value == null) {
          unset_phoneNumber();
        } else {
          set_phoneNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE_NUMBER:
        return get_phoneNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE_NUMBER:
        return is_set_phoneNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteCheck_args)
        return this.equals((inviteCheck_args)that);
      return false;
    }

    public boolean equals(inviteCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_phoneNumber = true && this.is_set_phoneNumber();
      boolean that_present_phoneNumber = true && that.is_set_phoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_phoneNumber = true && (is_set_phoneNumber());
      list.add(present_phoneNumber);
      if (present_phoneNumber)
        list.add(phoneNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_phoneNumber()).compareTo(other.is_set_phoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_phoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteCheck_args(");
      boolean first = true;

      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class inviteCheck_argsStandardSchemeFactory implements SchemeFactory {
      public inviteCheck_argsStandardScheme getScheme() {
        return new inviteCheck_argsStandardScheme();
      }
    }

    private static class inviteCheck_argsStandardScheme extends StandardScheme<inviteCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.set_phoneNumber_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteCheck_argsTupleSchemeFactory implements SchemeFactory {
      public inviteCheck_argsTupleScheme getScheme() {
        return new inviteCheck_argsTupleScheme();
      }
    }

    private static class inviteCheck_argsTupleScheme extends TupleScheme<inviteCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_phoneNumber()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_phoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.phoneNumber = iprot.readString();
          struct.set_phoneNumber_isSet(true);
        }
      }
    }

  }

  public static class inviteCheck_result implements org.apache.thrift.TBase<inviteCheck_result, inviteCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<inviteCheck_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteCheck_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public inviteCheck_result(android.os.Parcel in) {
      this.success= in.readParcelable(inviteCheck_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<inviteCheck_result> CREATOR = new android.os.Parcelable.Creator<inviteCheck_result>() {
      @Override
      public inviteCheck_result[] newArray(int size) {
        return new inviteCheck_result[size];
      }

      @Override
      public inviteCheck_result createFromParcel(android.os.Parcel in) {
        return new inviteCheck_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteCheck_result.class, metaDataMap);
    }

    public inviteCheck_result() {
    }

    public inviteCheck_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteCheck_result(inviteCheck_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public inviteCheck_result deepCopy() {
      return new inviteCheck_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteCheck_result)
        return this.equals((inviteCheck_result)that);
      return false;
    }

    public boolean equals(inviteCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class inviteCheck_resultStandardSchemeFactory implements SchemeFactory {
      public inviteCheck_resultStandardScheme getScheme() {
        return new inviteCheck_resultStandardScheme();
      }
    }

    private static class inviteCheck_resultStandardScheme extends StandardScheme<inviteCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteCheck_resultTupleSchemeFactory implements SchemeFactory {
      public inviteCheck_resultTupleScheme getScheme() {
        return new inviteCheck_resultTupleScheme();
      }
    }

    private static class inviteCheck_resultTupleScheme extends TupleScheme<inviteCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class inviteRegister_args implements org.apache.thrift.TBase<inviteRegister_args, inviteRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<inviteRegister_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteRegister_args");

    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INVITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteRegister_argsTupleSchemeFactory());
    }

    private String phoneNumber; // required
    private String code; // required
    private String inviteCode; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(phoneNumber);
      out.writeString(code);
      out.writeString(inviteCode);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public inviteRegister_args(android.os.Parcel in) {
      this.phoneNumber= in.readString();
      this.code= in.readString();
      this.inviteCode= in.readString();
    }

    public static final android.os.Parcelable.Creator<inviteRegister_args> CREATOR = new android.os.Parcelable.Creator<inviteRegister_args>() {
      @Override
      public inviteRegister_args[] newArray(int size) {
        return new inviteRegister_args[size];
      }

      @Override
      public inviteRegister_args createFromParcel(android.os.Parcel in) {
        return new inviteRegister_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE_NUMBER((short)1, "phoneNumber"),
      CODE((short)2, "code"),
      INVITE_CODE((short)3, "inviteCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE_NUMBER
            return PHONE_NUMBER;
          case 2: // CODE
            return CODE;
          case 3: // INVITE_CODE
            return INVITE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INVITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("inviteCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteRegister_args.class, metaDataMap);
    }

    public inviteRegister_args() {
    }

    public inviteRegister_args(
      String phoneNumber,
      String code,
      String inviteCode)
    {
      this();
      this.phoneNumber = phoneNumber;
      this.code = code;
      this.inviteCode = inviteCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteRegister_args(inviteRegister_args other) {
      if (other.is_set_phoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
      if (other.is_set_code()) {
        this.code = other.code;
      }
      if (other.is_set_inviteCode()) {
        this.inviteCode = other.inviteCode;
      }
    }

    public inviteRegister_args deepCopy() {
      return new inviteRegister_args(this);
    }

    public void clear() {
      this.phoneNumber = null;
      this.code = null;
      this.inviteCode = null;
    }

    public String get_phoneNumber() {
      return this.phoneNumber;
    }

    public void set_phoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unset_phoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean is_set_phoneNumber() {
      return this.phoneNumber != null;
    }

    public void set_phoneNumber_isSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public String get_inviteCode() {
      return this.inviteCode;
    }

    public void set_inviteCode(String inviteCode) {
      this.inviteCode = inviteCode;
    }

    public void unset_inviteCode() {
      this.inviteCode = null;
    }

    /** Returns true if field inviteCode is set (has been assigned a value) and false otherwise */
    public boolean is_set_inviteCode() {
      return this.inviteCode != null;
    }

    public void set_inviteCode_isSet(boolean value) {
      if (!value) {
        this.inviteCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE_NUMBER:
        if (value == null) {
          unset_phoneNumber();
        } else {
          set_phoneNumber((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      case INVITE_CODE:
        if (value == null) {
          unset_inviteCode();
        } else {
          set_inviteCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE_NUMBER:
        return get_phoneNumber();

      case CODE:
        return get_code();

      case INVITE_CODE:
        return get_inviteCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE_NUMBER:
        return is_set_phoneNumber();
      case CODE:
        return is_set_code();
      case INVITE_CODE:
        return is_set_inviteCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteRegister_args)
        return this.equals((inviteRegister_args)that);
      return false;
    }

    public boolean equals(inviteRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_phoneNumber = true && this.is_set_phoneNumber();
      boolean that_present_phoneNumber = true && that.is_set_phoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_inviteCode = true && this.is_set_inviteCode();
      boolean that_present_inviteCode = true && that.is_set_inviteCode();
      if (this_present_inviteCode || that_present_inviteCode) {
        if (!(this_present_inviteCode && that_present_inviteCode))
          return false;
        if (!this.inviteCode.equals(that.inviteCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_phoneNumber = true && (is_set_phoneNumber());
      list.add(present_phoneNumber);
      if (present_phoneNumber)
        list.add(phoneNumber);

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_inviteCode = true && (is_set_inviteCode());
      list.add(present_inviteCode);
      if (present_inviteCode)
        list.add(inviteCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_phoneNumber()).compareTo(other.is_set_phoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_phoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_inviteCode()).compareTo(other.is_set_inviteCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_inviteCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteCode, other.inviteCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteRegister_args(");
      boolean first = true;

      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inviteCode:");
      if (this.inviteCode == null) {
        sb.append("null");
      } else {
        sb.append(this.inviteCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class inviteRegister_argsStandardSchemeFactory implements SchemeFactory {
      public inviteRegister_argsStandardScheme getScheme() {
        return new inviteRegister_argsStandardScheme();
      }
    }

    private static class inviteRegister_argsStandardScheme extends StandardScheme<inviteRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.set_phoneNumber_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INVITE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inviteCode = iprot.readString();
                struct.set_inviteCode_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.inviteCode != null) {
          oprot.writeFieldBegin(INVITE_CODE_FIELD_DESC);
          oprot.writeString(struct.inviteCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteRegister_argsTupleSchemeFactory implements SchemeFactory {
      public inviteRegister_argsTupleScheme getScheme() {
        return new inviteRegister_argsTupleScheme();
      }
    }

    private static class inviteRegister_argsTupleScheme extends TupleScheme<inviteRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_phoneNumber()) {
          optionals.set(0);
        }
        if (struct.is_set_code()) {
          optionals.set(1);
        }
        if (struct.is_set_inviteCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_phoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
        if (struct.is_set_inviteCode()) {
          oprot.writeString(struct.inviteCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.phoneNumber = iprot.readString();
          struct.set_phoneNumber_isSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
        if (incoming.get(2)) {
          struct.inviteCode = iprot.readString();
          struct.set_inviteCode_isSet(true);
        }
      }
    }

  }

  public static class inviteRegister_result implements org.apache.thrift.TBase<inviteRegister_result, inviteRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<inviteRegister_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteRegister_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public inviteRegister_result(android.os.Parcel in) {
      this.success= in.readParcelable(inviteRegister_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<inviteRegister_result> CREATOR = new android.os.Parcelable.Creator<inviteRegister_result>() {
      @Override
      public inviteRegister_result[] newArray(int size) {
        return new inviteRegister_result[size];
      }

      @Override
      public inviteRegister_result createFromParcel(android.os.Parcel in) {
        return new inviteRegister_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteRegister_result.class, metaDataMap);
    }

    public inviteRegister_result() {
    }

    public inviteRegister_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteRegister_result(inviteRegister_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public inviteRegister_result deepCopy() {
      return new inviteRegister_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteRegister_result)
        return this.equals((inviteRegister_result)that);
      return false;
    }

    public boolean equals(inviteRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class inviteRegister_resultStandardSchemeFactory implements SchemeFactory {
      public inviteRegister_resultStandardScheme getScheme() {
        return new inviteRegister_resultStandardScheme();
      }
    }

    private static class inviteRegister_resultStandardScheme extends StandardScheme<inviteRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteRegister_resultTupleSchemeFactory implements SchemeFactory {
      public inviteRegister_resultTupleScheme getScheme() {
        return new inviteRegister_resultTupleScheme();
      }
    }

    private static class inviteRegister_resultTupleScheme extends TupleScheme<inviteRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class oauthLogin_args implements org.apache.thrift.TBase<oauthLogin_args, oauthLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<oauthLogin_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("oauthLogin_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new oauthLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new oauthLogin_argsTupleSchemeFactory());
    }

    private OAuthInfo params; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(params, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public oauthLogin_args(android.os.Parcel in) {
      this.params= in.readParcelable(oauthLogin_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<oauthLogin_args> CREATOR = new android.os.Parcelable.Creator<oauthLogin_args>() {
      @Override
      public oauthLogin_args[] newArray(int size) {
        return new oauthLogin_args[size];
      }

      @Override
      public oauthLogin_args createFromParcel(android.os.Parcel in) {
        return new oauthLogin_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OAuthInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(oauthLogin_args.class, metaDataMap);
    }

    public oauthLogin_args() {
    }

    public oauthLogin_args(
      OAuthInfo params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public oauthLogin_args(oauthLogin_args other) {
      if (other.is_set_params()) {
        this.params = new OAuthInfo(other.params);
      }
    }

    public oauthLogin_args deepCopy() {
      return new oauthLogin_args(this);
    }

    public void clear() {
      if (this.params != null) {
        this.params.clear();
      }
    }

    public OAuthInfo get_params() {
      return this.params;
    }

    public void set_params(OAuthInfo params) {
      this.params = params;
    }

    public void unset_params() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean is_set_params() {
      return this.params != null;
    }

    public void set_params_isSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unset_params();
        } else {
          set_params((OAuthInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return get_params();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return is_set_params();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof oauthLogin_args)
        return this.equals((oauthLogin_args)that);
      return false;
    }

    public boolean equals(oauthLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.is_set_params();
      boolean that_present_params = true && that.is_set_params();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (is_set_params());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(oauthLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_params()).compareTo(other.is_set_params());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_params()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("oauthLogin_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class oauthLogin_argsStandardSchemeFactory implements SchemeFactory {
      public oauthLogin_argsStandardScheme getScheme() {
        return new oauthLogin_argsStandardScheme();
      }
    }

    private static class oauthLogin_argsStandardScheme extends StandardScheme<oauthLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, oauthLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.params == null) {
                  struct.params = new OAuthInfo();
                }
                struct.params.read(iprot);
                struct.set_params_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, oauthLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class oauthLogin_argsTupleSchemeFactory implements SchemeFactory {
      public oauthLogin_argsTupleScheme getScheme() {
        return new oauthLogin_argsTupleScheme();
      }
    }

    private static class oauthLogin_argsTupleScheme extends TupleScheme<oauthLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, oauthLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_params()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_params()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, oauthLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.params == null) {
            struct.params = new OAuthInfo();
          }
          struct.params.read(iprot);
          struct.set_params_isSet(true);
        }
      }
    }

  }

  public static class oauthLogin_result implements org.apache.thrift.TBase<oauthLogin_result, oauthLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<oauthLogin_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("oauthLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new oauthLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new oauthLogin_resultTupleSchemeFactory());
    }

    private UserData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public oauthLogin_result(android.os.Parcel in) {
      this.success= in.readParcelable(oauthLogin_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<oauthLogin_result> CREATOR = new android.os.Parcelable.Creator<oauthLogin_result>() {
      @Override
      public oauthLogin_result[] newArray(int size) {
        return new oauthLogin_result[size];
      }

      @Override
      public oauthLogin_result createFromParcel(android.os.Parcel in) {
        return new oauthLogin_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(oauthLogin_result.class, metaDataMap);
    }

    public oauthLogin_result() {
    }

    public oauthLogin_result(
      UserData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public oauthLogin_result(oauthLogin_result other) {
      if (other.is_set_success()) {
        this.success = new UserData(other.success);
      }
    }

    public oauthLogin_result deepCopy() {
      return new oauthLogin_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public UserData get_success() {
      return this.success;
    }

    public void set_success(UserData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((UserData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof oauthLogin_result)
        return this.equals((oauthLogin_result)that);
      return false;
    }

    public boolean equals(oauthLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(oauthLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("oauthLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class oauthLogin_resultStandardSchemeFactory implements SchemeFactory {
      public oauthLogin_resultStandardScheme getScheme() {
        return new oauthLogin_resultStandardScheme();
      }
    }

    private static class oauthLogin_resultStandardScheme extends StandardScheme<oauthLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, oauthLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new UserData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, oauthLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class oauthLogin_resultTupleSchemeFactory implements SchemeFactory {
      public oauthLogin_resultTupleScheme getScheme() {
        return new oauthLogin_resultTupleScheme();
      }
    }

    private static class oauthLogin_resultTupleScheme extends TupleScheme<oauthLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, oauthLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, oauthLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new UserData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getUserInfo_args implements org.apache.thrift.TBase<getUserInfo_args, getUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfo_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getUserInfo_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getUserInfo_args> CREATOR = new android.os.Parcelable.Creator<getUserInfo_args>() {
      @Override
      public getUserInfo_args[] newArray(int size) {
        return new getUserInfo_args[size];
      }

      @Override
      public getUserInfo_args createFromParcel(android.os.Parcel in) {
        return new getUserInfo_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_args.class, metaDataMap);
    }

    public getUserInfo_args() {
    }

    public getUserInfo_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_args(getUserInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getUserInfo_args deepCopy() {
      return new getUserInfo_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_args)
        return this.equals((getUserInfo_args)that);
      return false;
    }

    public boolean equals(getUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getUserInfo_argsStandardScheme getScheme() {
        return new getUserInfo_argsStandardScheme();
      }
    }

    private static class getUserInfo_argsStandardScheme extends StandardScheme<getUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getUserInfo_argsTupleScheme getScheme() {
        return new getUserInfo_argsTupleScheme();
      }
    }

    private static class getUserInfo_argsTupleScheme extends TupleScheme<getUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getUserInfo_result implements org.apache.thrift.TBase<getUserInfo_result, getUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfo_resultTupleSchemeFactory());
    }

    private UserData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getUserInfo_result(android.os.Parcel in) {
      this.success= in.readParcelable(getUserInfo_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getUserInfo_result> CREATOR = new android.os.Parcelable.Creator<getUserInfo_result>() {
      @Override
      public getUserInfo_result[] newArray(int size) {
        return new getUserInfo_result[size];
      }

      @Override
      public getUserInfo_result createFromParcel(android.os.Parcel in) {
        return new getUserInfo_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_result.class, metaDataMap);
    }

    public getUserInfo_result() {
    }

    public getUserInfo_result(
      UserData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_result(getUserInfo_result other) {
      if (other.is_set_success()) {
        this.success = new UserData(other.success);
      }
    }

    public getUserInfo_result deepCopy() {
      return new getUserInfo_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public UserData get_success() {
      return this.success;
    }

    public void set_success(UserData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((UserData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_result)
        return this.equals((getUserInfo_result)that);
      return false;
    }

    public boolean equals(getUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getUserInfo_resultStandardScheme getScheme() {
        return new getUserInfo_resultStandardScheme();
      }
    }

    private static class getUserInfo_resultStandardScheme extends StandardScheme<getUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new UserData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getUserInfo_resultTupleScheme getScheme() {
        return new getUserInfo_resultTupleScheme();
      }
    }

    private static class getUserInfo_resultTupleScheme extends TupleScheme<getUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new UserData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getMyPoints_args implements org.apache.thrift.TBase<getMyPoints_args, getMyPoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyPoints_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyPoints_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyPoints_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyPoints_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getMyPoints_args> CREATOR = new android.os.Parcelable.Creator<getMyPoints_args>() {
      @Override
      public getMyPoints_args[] newArray(int size) {
        return new getMyPoints_args[size];
      }

      @Override
      public getMyPoints_args createFromParcel(android.os.Parcel in) {
        return new getMyPoints_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyPoints_args.class, metaDataMap);
    }

    public getMyPoints_args() {
    }

    public getMyPoints_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyPoints_args(getMyPoints_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getMyPoints_args deepCopy() {
      return new getMyPoints_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyPoints_args)
        return this.equals((getMyPoints_args)that);
      return false;
    }

    public boolean equals(getMyPoints_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyPoints_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyPoints_argsStandardSchemeFactory implements SchemeFactory {
      public getMyPoints_argsStandardScheme getScheme() {
        return new getMyPoints_argsStandardScheme();
      }
    }

    private static class getMyPoints_argsStandardScheme extends StandardScheme<getMyPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyPoints_argsTupleSchemeFactory implements SchemeFactory {
      public getMyPoints_argsTupleScheme getScheme() {
        return new getMyPoints_argsTupleScheme();
      }
    }

    private static class getMyPoints_argsTupleScheme extends TupleScheme<getMyPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getMyPoints_result implements org.apache.thrift.TBase<getMyPoints_result, getMyPoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyPoints_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyPoints_resultTupleSchemeFactory());
    }

    private UserPoints success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyPoints_result(android.os.Parcel in) {
      this.success= in.readParcelable(getMyPoints_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMyPoints_result> CREATOR = new android.os.Parcelable.Creator<getMyPoints_result>() {
      @Override
      public getMyPoints_result[] newArray(int size) {
        return new getMyPoints_result[size];
      }

      @Override
      public getMyPoints_result createFromParcel(android.os.Parcel in) {
        return new getMyPoints_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPoints.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyPoints_result.class, metaDataMap);
    }

    public getMyPoints_result() {
    }

    public getMyPoints_result(
      UserPoints success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyPoints_result(getMyPoints_result other) {
      if (other.is_set_success()) {
        this.success = new UserPoints(other.success);
      }
    }

    public getMyPoints_result deepCopy() {
      return new getMyPoints_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public UserPoints get_success() {
      return this.success;
    }

    public void set_success(UserPoints success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((UserPoints)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyPoints_result)
        return this.equals((getMyPoints_result)that);
      return false;
    }

    public boolean equals(getMyPoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyPoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyPoints_resultStandardSchemeFactory implements SchemeFactory {
      public getMyPoints_resultStandardScheme getScheme() {
        return new getMyPoints_resultStandardScheme();
      }
    }

    private static class getMyPoints_resultStandardScheme extends StandardScheme<getMyPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new UserPoints();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyPoints_resultTupleSchemeFactory implements SchemeFactory {
      public getMyPoints_resultTupleScheme getScheme() {
        return new getMyPoints_resultTupleScheme();
      }
    }

    private static class getMyPoints_resultTupleScheme extends TupleScheme<getMyPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new UserPoints();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getRecentGainPoints_args implements org.apache.thrift.TBase<getRecentGainPoints_args, getRecentGainPoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentGainPoints_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentGainPoints_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentGainPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentGainPoints_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRecentGainPoints_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getRecentGainPoints_args> CREATOR = new android.os.Parcelable.Creator<getRecentGainPoints_args>() {
      @Override
      public getRecentGainPoints_args[] newArray(int size) {
        return new getRecentGainPoints_args[size];
      }

      @Override
      public getRecentGainPoints_args createFromParcel(android.os.Parcel in) {
        return new getRecentGainPoints_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentGainPoints_args.class, metaDataMap);
    }

    public getRecentGainPoints_args() {
    }

    public getRecentGainPoints_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentGainPoints_args(getRecentGainPoints_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getRecentGainPoints_args deepCopy() {
      return new getRecentGainPoints_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentGainPoints_args)
        return this.equals((getRecentGainPoints_args)that);
      return false;
    }

    public boolean equals(getRecentGainPoints_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentGainPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentGainPoints_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getRecentGainPoints_argsStandardSchemeFactory implements SchemeFactory {
      public getRecentGainPoints_argsStandardScheme getScheme() {
        return new getRecentGainPoints_argsStandardScheme();
      }
    }

    private static class getRecentGainPoints_argsStandardScheme extends StandardScheme<getRecentGainPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentGainPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentGainPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentGainPoints_argsTupleSchemeFactory implements SchemeFactory {
      public getRecentGainPoints_argsTupleScheme getScheme() {
        return new getRecentGainPoints_argsTupleScheme();
      }
    }

    private static class getRecentGainPoints_argsTupleScheme extends TupleScheme<getRecentGainPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentGainPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentGainPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getRecentGainPoints_result implements org.apache.thrift.TBase<getRecentGainPoints_result, getRecentGainPoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentGainPoints_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentGainPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentGainPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentGainPoints_resultTupleSchemeFactory());
    }

    private UserPoints success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRecentGainPoints_result(android.os.Parcel in) {
      this.success= in.readParcelable(getRecentGainPoints_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getRecentGainPoints_result> CREATOR = new android.os.Parcelable.Creator<getRecentGainPoints_result>() {
      @Override
      public getRecentGainPoints_result[] newArray(int size) {
        return new getRecentGainPoints_result[size];
      }

      @Override
      public getRecentGainPoints_result createFromParcel(android.os.Parcel in) {
        return new getRecentGainPoints_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPoints.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentGainPoints_result.class, metaDataMap);
    }

    public getRecentGainPoints_result() {
    }

    public getRecentGainPoints_result(
      UserPoints success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentGainPoints_result(getRecentGainPoints_result other) {
      if (other.is_set_success()) {
        this.success = new UserPoints(other.success);
      }
    }

    public getRecentGainPoints_result deepCopy() {
      return new getRecentGainPoints_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public UserPoints get_success() {
      return this.success;
    }

    public void set_success(UserPoints success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((UserPoints)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentGainPoints_result)
        return this.equals((getRecentGainPoints_result)that);
      return false;
    }

    public boolean equals(getRecentGainPoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentGainPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentGainPoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getRecentGainPoints_resultStandardSchemeFactory implements SchemeFactory {
      public getRecentGainPoints_resultStandardScheme getScheme() {
        return new getRecentGainPoints_resultStandardScheme();
      }
    }

    private static class getRecentGainPoints_resultStandardScheme extends StandardScheme<getRecentGainPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentGainPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new UserPoints();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentGainPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentGainPoints_resultTupleSchemeFactory implements SchemeFactory {
      public getRecentGainPoints_resultTupleScheme getScheme() {
        return new getRecentGainPoints_resultTupleScheme();
      }
    }

    private static class getRecentGainPoints_resultTupleScheme extends TupleScheme<getRecentGainPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentGainPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentGainPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new UserPoints();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class binding_args implements org.apache.thrift.TBase<binding_args, binding_args._Fields>, java.io.Serializable, Cloneable, Comparable<binding_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("binding_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BIND_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bindValue", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new binding_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new binding_argsTupleSchemeFactory());
    }

    private int uid; // required
    private String bindValue; // required
    private BindType type; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(uid);
      out.writeString(bindValue);
      out.writeInt(type.getValue());
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public binding_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.uid = in.readInt();
      this.bindValue= in.readString();
      this.type = BindType.findByValue(in.readInt());
    }

    public static final android.os.Parcelable.Creator<binding_args> CREATOR = new android.os.Parcelable.Creator<binding_args>() {
      @Override
      public binding_args[] newArray(int size) {
        return new binding_args[size];
      }

      @Override
      public binding_args createFromParcel(android.os.Parcel in) {
        return new binding_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      BIND_VALUE((short)2, "bindValue"),
      /**
       * 
       * @see BindType
       */
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // BIND_VALUE
            return BIND_VALUE;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BIND_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bindValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BindType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(binding_args.class, metaDataMap);
    }

    public binding_args() {
    }

    public binding_args(
      int uid,
      String bindValue,
      BindType type)
    {
      this();
      this.uid = uid;
      set_uid_isSet(true);
      this.bindValue = bindValue;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public binding_args(binding_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.is_set_bindValue()) {
        this.bindValue = other.bindValue;
      }
      if (other.is_set_type()) {
        this.type = other.type;
      }
    }

    public binding_args deepCopy() {
      return new binding_args(this);
    }

    public void clear() {
      set_uid_isSet(false);
      this.uid = 0;
      this.bindValue = null;
      this.type = null;
    }

    public int get_uid() {
      return this.uid;
    }

    public void set_uid(int uid) {
      this.uid = uid;
      set_uid_isSet(true);
    }

    public void unset_uid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean is_set_uid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void set_uid_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public String get_bindValue() {
      return this.bindValue;
    }

    public void set_bindValue(String bindValue) {
      this.bindValue = bindValue;
    }

    public void unset_bindValue() {
      this.bindValue = null;
    }

    /** Returns true if field bindValue is set (has been assigned a value) and false otherwise */
    public boolean is_set_bindValue() {
      return this.bindValue != null;
    }

    public void set_bindValue_isSet(boolean value) {
      if (!value) {
        this.bindValue = null;
      }
    }

    /**
     * 
     * @see BindType
     */
    public BindType get_type() {
      return this.type;
    }

    /**
     * 
     * @see BindType
     */
    public void set_type(BindType type) {
      this.type = type;
    }

    public void unset_type() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean is_set_type() {
      return this.type != null;
    }

    public void set_type_isSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unset_uid();
        } else {
          set_uid((Integer)value);
        }
        break;

      case BIND_VALUE:
        if (value == null) {
          unset_bindValue();
        } else {
          set_bindValue((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unset_type();
        } else {
          set_type((BindType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return get_uid();

      case BIND_VALUE:
        return get_bindValue();

      case TYPE:
        return get_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return is_set_uid();
      case BIND_VALUE:
        return is_set_bindValue();
      case TYPE:
        return is_set_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof binding_args)
        return this.equals((binding_args)that);
      return false;
    }

    public boolean equals(binding_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_bindValue = true && this.is_set_bindValue();
      boolean that_present_bindValue = true && that.is_set_bindValue();
      if (this_present_bindValue || that_present_bindValue) {
        if (!(this_present_bindValue && that_present_bindValue))
          return false;
        if (!this.bindValue.equals(that.bindValue))
          return false;
      }

      boolean this_present_type = true && this.is_set_type();
      boolean that_present_type = true && that.is_set_type();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      boolean present_bindValue = true && (is_set_bindValue());
      list.add(present_bindValue);
      if (present_bindValue)
        list.add(bindValue);

      boolean present_type = true && (is_set_type());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(binding_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_uid()).compareTo(other.is_set_uid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_uid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_bindValue()).compareTo(other.is_set_bindValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_bindValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindValue, other.bindValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_type()).compareTo(other.is_set_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("binding_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindValue:");
      if (this.bindValue == null) {
        sb.append("null");
      } else {
        sb.append(this.bindValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class binding_argsStandardSchemeFactory implements SchemeFactory {
      public binding_argsStandardScheme getScheme() {
        return new binding_argsStandardScheme();
      }
    }

    private static class binding_argsStandardScheme extends StandardScheme<binding_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, binding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.set_uid_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIND_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bindValue = iprot.readString();
                struct.set_bindValue_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.rjzd.aistock.api.BindType.findByValue(iprot.readI32());
                struct.set_type_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, binding_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.bindValue != null) {
          oprot.writeFieldBegin(BIND_VALUE_FIELD_DESC);
          oprot.writeString(struct.bindValue);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class binding_argsTupleSchemeFactory implements SchemeFactory {
      public binding_argsTupleScheme getScheme() {
        return new binding_argsTupleScheme();
      }
    }

    private static class binding_argsTupleScheme extends TupleScheme<binding_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, binding_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_uid()) {
          optionals.set(0);
        }
        if (struct.is_set_bindValue()) {
          optionals.set(1);
        }
        if (struct.is_set_type()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_uid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.is_set_bindValue()) {
          oprot.writeString(struct.bindValue);
        }
        if (struct.is_set_type()) {
          oprot.writeI32(struct.type.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, binding_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.set_uid_isSet(true);
        }
        if (incoming.get(1)) {
          struct.bindValue = iprot.readString();
          struct.set_bindValue_isSet(true);
        }
        if (incoming.get(2)) {
          struct.type = com.rjzd.aistock.api.BindType.findByValue(iprot.readI32());
          struct.set_type_isSet(true);
        }
      }
    }

  }

  public static class binding_result implements org.apache.thrift.TBase<binding_result, binding_result._Fields>, java.io.Serializable, Cloneable, Comparable<binding_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("binding_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new binding_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new binding_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public binding_result(android.os.Parcel in) {
      this.success= in.readParcelable(binding_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<binding_result> CREATOR = new android.os.Parcelable.Creator<binding_result>() {
      @Override
      public binding_result[] newArray(int size) {
        return new binding_result[size];
      }

      @Override
      public binding_result createFromParcel(android.os.Parcel in) {
        return new binding_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(binding_result.class, metaDataMap);
    }

    public binding_result() {
    }

    public binding_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public binding_result(binding_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public binding_result deepCopy() {
      return new binding_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof binding_result)
        return this.equals((binding_result)that);
      return false;
    }

    public boolean equals(binding_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(binding_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("binding_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class binding_resultStandardSchemeFactory implements SchemeFactory {
      public binding_resultStandardScheme getScheme() {
        return new binding_resultStandardScheme();
      }
    }

    private static class binding_resultStandardScheme extends StandardScheme<binding_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, binding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, binding_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class binding_resultTupleSchemeFactory implements SchemeFactory {
      public binding_resultTupleScheme getScheme() {
        return new binding_resultTupleScheme();
      }
    }

    private static class binding_resultTupleScheme extends TupleScheme<binding_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, binding_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, binding_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class addPortfolio_args implements org.apache.thrift.TBase<addPortfolio_args, addPortfolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPortfolio_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPortfolio_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPortfolio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPortfolio_argsTupleSchemeFactory());
    }

    private int userId; // required
    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public addPortfolio_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<addPortfolio_args> CREATOR = new android.os.Parcelable.Creator<addPortfolio_args>() {
      @Override
      public addPortfolio_args[] newArray(int size) {
        return new addPortfolio_args[size];
      }

      @Override
      public addPortfolio_args createFromParcel(android.os.Parcel in) {
        return new addPortfolio_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      CODE((short)2, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPortfolio_args.class, metaDataMap);
    }

    public addPortfolio_args() {
    }

    public addPortfolio_args(
      int userId,
      String code)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPortfolio_args(addPortfolio_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public addPortfolio_args deepCopy() {
      return new addPortfolio_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      this.code = null;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPortfolio_args)
        return this.equals((addPortfolio_args)that);
      return false;
    }

    public boolean equals(addPortfolio_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPortfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPortfolio_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addPortfolio_argsStandardSchemeFactory implements SchemeFactory {
      public addPortfolio_argsStandardScheme getScheme() {
        return new addPortfolio_argsStandardScheme();
      }
    }

    private static class addPortfolio_argsStandardScheme extends StandardScheme<addPortfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPortfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPortfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPortfolio_argsTupleSchemeFactory implements SchemeFactory {
      public addPortfolio_argsTupleScheme getScheme() {
        return new addPortfolio_argsTupleScheme();
      }
    }

    private static class addPortfolio_argsTupleScheme extends TupleScheme<addPortfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_code()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
      }
    }

  }

  public static class addPortfolio_result implements org.apache.thrift.TBase<addPortfolio_result, addPortfolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPortfolio_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPortfolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPortfolio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPortfolio_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public addPortfolio_result(android.os.Parcel in) {
      this.success= in.readParcelable(addPortfolio_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<addPortfolio_result> CREATOR = new android.os.Parcelable.Creator<addPortfolio_result>() {
      @Override
      public addPortfolio_result[] newArray(int size) {
        return new addPortfolio_result[size];
      }

      @Override
      public addPortfolio_result createFromParcel(android.os.Parcel in) {
        return new addPortfolio_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPortfolio_result.class, metaDataMap);
    }

    public addPortfolio_result() {
    }

    public addPortfolio_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPortfolio_result(addPortfolio_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public addPortfolio_result deepCopy() {
      return new addPortfolio_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPortfolio_result)
        return this.equals((addPortfolio_result)that);
      return false;
    }

    public boolean equals(addPortfolio_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPortfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPortfolio_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addPortfolio_resultStandardSchemeFactory implements SchemeFactory {
      public addPortfolio_resultStandardScheme getScheme() {
        return new addPortfolio_resultStandardScheme();
      }
    }

    private static class addPortfolio_resultStandardScheme extends StandardScheme<addPortfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPortfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPortfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPortfolio_resultTupleSchemeFactory implements SchemeFactory {
      public addPortfolio_resultTupleScheme getScheme() {
        return new addPortfolio_resultTupleScheme();
      }
    }

    private static class addPortfolio_resultTupleScheme extends TupleScheme<addPortfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class synchronizePortfolio_args implements org.apache.thrift.TBase<synchronizePortfolio_args, synchronizePortfolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizePortfolio_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizePortfolio_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("codeList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchronizePortfolio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchronizePortfolio_argsTupleSchemeFactory());
    }

    private int userId; // required
    private List<String> codeList; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeList(codeList);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public synchronizePortfolio_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.codeList = new ArrayList<String>();
      in.readList(this.codeList, synchronizePortfolio_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<synchronizePortfolio_args> CREATOR = new android.os.Parcelable.Creator<synchronizePortfolio_args>() {
      @Override
      public synchronizePortfolio_args[] newArray(int size) {
        return new synchronizePortfolio_args[size];
      }

      @Override
      public synchronizePortfolio_args createFromParcel(android.os.Parcel in) {
        return new synchronizePortfolio_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      CODE_LIST((short)2, "codeList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // CODE_LIST
            return CODE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("codeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizePortfolio_args.class, metaDataMap);
    }

    public synchronizePortfolio_args() {
    }

    public synchronizePortfolio_args(
      int userId,
      List<String> codeList)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.codeList = codeList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizePortfolio_args(synchronizePortfolio_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_codeList()) {
        List<String> __this__codeList = new ArrayList<String>(other.codeList);
        this.codeList = __this__codeList;
      }
    }

    public synchronizePortfolio_args deepCopy() {
      return new synchronizePortfolio_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      if (this.codeList != null) {
        this.codeList.clear();
      }
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_codeList_size() {
      return (this.codeList == null) ? 0 : this.codeList.size();
    }

    public java.util.Iterator<String> get_codeList_iterator() {
      return (this.codeList == null) ? null : this.codeList.iterator();
    }

    public void add_to_codeList(String elem) {
      if (this.codeList == null) {
        this.codeList = new ArrayList<String>();
      }
      this.codeList.add(elem);
    }

    public List<String> get_codeList() {
      return this.codeList;
    }

    public void set_codeList(List<String> codeList) {
      this.codeList = codeList;
    }

    public void unset_codeList() {
      this.codeList = null;
    }

    /** Returns true if field codeList is set (has been assigned a value) and false otherwise */
    public boolean is_set_codeList() {
      return this.codeList != null;
    }

    public void set_codeList_isSet(boolean value) {
      if (!value) {
        this.codeList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case CODE_LIST:
        if (value == null) {
          unset_codeList();
        } else {
          set_codeList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case CODE_LIST:
        return get_codeList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case CODE_LIST:
        return is_set_codeList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizePortfolio_args)
        return this.equals((synchronizePortfolio_args)that);
      return false;
    }

    public boolean equals(synchronizePortfolio_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_codeList = true && this.is_set_codeList();
      boolean that_present_codeList = true && that.is_set_codeList();
      if (this_present_codeList || that_present_codeList) {
        if (!(this_present_codeList && that_present_codeList))
          return false;
        if (!this.codeList.equals(that.codeList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_codeList = true && (is_set_codeList());
      list.add(present_codeList);
      if (present_codeList)
        list.add(codeList);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchronizePortfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_codeList()).compareTo(other.is_set_codeList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_codeList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeList, other.codeList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizePortfolio_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("codeList:");
      if (this.codeList == null) {
        sb.append("null");
      } else {
        sb.append(this.codeList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class synchronizePortfolio_argsStandardSchemeFactory implements SchemeFactory {
      public synchronizePortfolio_argsStandardScheme getScheme() {
        return new synchronizePortfolio_argsStandardScheme();
      }
    }

    private static class synchronizePortfolio_argsStandardScheme extends StandardScheme<synchronizePortfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizePortfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
                  if (struct.codeList == null) {
                    struct.codeList = new ArrayList<String>(_list566.size);
                  }
                  String _elem567 = null;
                  for (int _i568 = 0; _i568 < _list566.size; ++_i568)
                  {
                    _elem567 = iprot.readString();
                    struct.codeList.add(_elem567);
                  }
                  iprot.readListEnd();
                }
                struct.set_codeList_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizePortfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.codeList != null) {
          oprot.writeFieldBegin(CODE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.codeList.size()));
            for (String _iter569 : struct.codeList)
            {
              oprot.writeString(_iter569);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizePortfolio_argsTupleSchemeFactory implements SchemeFactory {
      public synchronizePortfolio_argsTupleScheme getScheme() {
        return new synchronizePortfolio_argsTupleScheme();
      }
    }

    private static class synchronizePortfolio_argsTupleScheme extends TupleScheme<synchronizePortfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizePortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_codeList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_codeList()) {
          {
            oprot.writeI32(struct.codeList.size());
            for (String _iter570 : struct.codeList)
            {
              oprot.writeString(_iter570);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizePortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.codeList == null) {
              struct.codeList = new ArrayList<String>(_list571.size);
            }
            String _elem572 = null;
            for (int _i573 = 0; _i573 < _list571.size; ++_i573)
            {
              _elem572 = iprot.readString();
              struct.codeList.add(_elem572);
            }
          }
          struct.set_codeList_isSet(true);
        }
      }
    }

  }

  public static class synchronizePortfolio_result implements org.apache.thrift.TBase<synchronizePortfolio_result, synchronizePortfolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizePortfolio_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizePortfolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchronizePortfolio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchronizePortfolio_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public synchronizePortfolio_result(android.os.Parcel in) {
      this.success = new ArrayList<String>();
      in.readList(this.success, synchronizePortfolio_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<synchronizePortfolio_result> CREATOR = new android.os.Parcelable.Creator<synchronizePortfolio_result>() {
      @Override
      public synchronizePortfolio_result[] newArray(int size) {
        return new synchronizePortfolio_result[size];
      }

      @Override
      public synchronizePortfolio_result createFromParcel(android.os.Parcel in) {
        return new synchronizePortfolio_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizePortfolio_result.class, metaDataMap);
    }

    public synchronizePortfolio_result() {
    }

    public synchronizePortfolio_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizePortfolio_result(synchronizePortfolio_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public synchronizePortfolio_result deepCopy() {
      return new synchronizePortfolio_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizePortfolio_result)
        return this.equals((synchronizePortfolio_result)that);
      return false;
    }

    public boolean equals(synchronizePortfolio_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchronizePortfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizePortfolio_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class synchronizePortfolio_resultStandardSchemeFactory implements SchemeFactory {
      public synchronizePortfolio_resultStandardScheme getScheme() {
        return new synchronizePortfolio_resultStandardScheme();
      }
    }

    private static class synchronizePortfolio_resultStandardScheme extends StandardScheme<synchronizePortfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizePortfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
                  if (struct.success == null) {
                    struct.success = new ArrayList<String>(_list574.size);
                  }
                  String _elem575 = null;
                  for (int _i576 = 0; _i576 < _list574.size; ++_i576)
                  {
                    _elem575 = iprot.readString();
                    struct.success.add(_elem575);
                  }
                  iprot.readListEnd();
                }
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizePortfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter577 : struct.success)
            {
              oprot.writeString(_iter577);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizePortfolio_resultTupleSchemeFactory implements SchemeFactory {
      public synchronizePortfolio_resultTupleScheme getScheme() {
        return new synchronizePortfolio_resultTupleScheme();
      }
    }

    private static class synchronizePortfolio_resultTupleScheme extends TupleScheme<synchronizePortfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizePortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter578 : struct.success)
            {
              oprot.writeString(_iter578);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizePortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.success == null) {
              struct.success = new ArrayList<String>(_list579.size);
            }
            String _elem580 = null;
            for (int _i581 = 0; _i581 < _list579.size; ++_i581)
            {
              _elem580 = iprot.readString();
              struct.success.add(_elem580);
            }
          }
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class deletePortfolio_args implements org.apache.thrift.TBase<deletePortfolio_args, deletePortfolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePortfolio_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePortfolio_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePortfolio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePortfolio_argsTupleSchemeFactory());
    }

    private int userId; // required
    private String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public deletePortfolio_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<deletePortfolio_args> CREATOR = new android.os.Parcelable.Creator<deletePortfolio_args>() {
      @Override
      public deletePortfolio_args[] newArray(int size) {
        return new deletePortfolio_args[size];
      }

      @Override
      public deletePortfolio_args createFromParcel(android.os.Parcel in) {
        return new deletePortfolio_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      CODE((short)2, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePortfolio_args.class, metaDataMap);
    }

    public deletePortfolio_args() {
    }

    public deletePortfolio_args(
      int userId,
      String code)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePortfolio_args(deletePortfolio_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_code()) {
        this.code = other.code;
      }
    }

    public deletePortfolio_args deepCopy() {
      return new deletePortfolio_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      this.code = null;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String get_code() {
      return this.code;
    }

    public void set_code(String code) {
      this.code = code;
    }

    public void unset_code() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean is_set_code() {
      return this.code != null;
    }

    public void set_code_isSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case CODE:
        if (value == null) {
          unset_code();
        } else {
          set_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case CODE:
        return get_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case CODE:
        return is_set_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePortfolio_args)
        return this.equals((deletePortfolio_args)that);
      return false;
    }

    public boolean equals(deletePortfolio_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_code = true && this.is_set_code();
      boolean that_present_code = true && that.is_set_code();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_code = true && (is_set_code());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePortfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_code()).compareTo(other.is_set_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePortfolio_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class deletePortfolio_argsStandardSchemeFactory implements SchemeFactory {
      public deletePortfolio_argsStandardScheme getScheme() {
        return new deletePortfolio_argsStandardScheme();
      }
    }

    private static class deletePortfolio_argsStandardScheme extends StandardScheme<deletePortfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePortfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.set_code_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePortfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePortfolio_argsTupleSchemeFactory implements SchemeFactory {
      public deletePortfolio_argsTupleScheme getScheme() {
        return new deletePortfolio_argsTupleScheme();
      }
    }

    private static class deletePortfolio_argsTupleScheme extends TupleScheme<deletePortfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_code()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_code()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.set_code_isSet(true);
        }
      }
    }

  }

  public static class deletePortfolio_result implements org.apache.thrift.TBase<deletePortfolio_result, deletePortfolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePortfolio_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePortfolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePortfolio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePortfolio_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public deletePortfolio_result(android.os.Parcel in) {
      this.success= in.readParcelable(deletePortfolio_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<deletePortfolio_result> CREATOR = new android.os.Parcelable.Creator<deletePortfolio_result>() {
      @Override
      public deletePortfolio_result[] newArray(int size) {
        return new deletePortfolio_result[size];
      }

      @Override
      public deletePortfolio_result createFromParcel(android.os.Parcel in) {
        return new deletePortfolio_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePortfolio_result.class, metaDataMap);
    }

    public deletePortfolio_result() {
    }

    public deletePortfolio_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePortfolio_result(deletePortfolio_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public deletePortfolio_result deepCopy() {
      return new deletePortfolio_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePortfolio_result)
        return this.equals((deletePortfolio_result)that);
      return false;
    }

    public boolean equals(deletePortfolio_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePortfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePortfolio_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class deletePortfolio_resultStandardSchemeFactory implements SchemeFactory {
      public deletePortfolio_resultStandardScheme getScheme() {
        return new deletePortfolio_resultStandardScheme();
      }
    }

    private static class deletePortfolio_resultStandardScheme extends StandardScheme<deletePortfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePortfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePortfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePortfolio_resultTupleSchemeFactory implements SchemeFactory {
      public deletePortfolio_resultTupleScheme getScheme() {
        return new deletePortfolio_resultTupleScheme();
      }
    }

    private static class deletePortfolio_resultTupleScheme extends TupleScheme<deletePortfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getPortfolio_args implements org.apache.thrift.TBase<getPortfolio_args, getPortfolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPortfolio_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPortfolio_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPortfolio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPortfolio_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPortfolio_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getPortfolio_args> CREATOR = new android.os.Parcelable.Creator<getPortfolio_args>() {
      @Override
      public getPortfolio_args[] newArray(int size) {
        return new getPortfolio_args[size];
      }

      @Override
      public getPortfolio_args createFromParcel(android.os.Parcel in) {
        return new getPortfolio_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPortfolio_args.class, metaDataMap);
    }

    public getPortfolio_args() {
    }

    public getPortfolio_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPortfolio_args(getPortfolio_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getPortfolio_args deepCopy() {
      return new getPortfolio_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPortfolio_args)
        return this.equals((getPortfolio_args)that);
      return false;
    }

    public boolean equals(getPortfolio_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPortfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPortfolio_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPortfolio_argsStandardSchemeFactory implements SchemeFactory {
      public getPortfolio_argsStandardScheme getScheme() {
        return new getPortfolio_argsStandardScheme();
      }
    }

    private static class getPortfolio_argsStandardScheme extends StandardScheme<getPortfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPortfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPortfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPortfolio_argsTupleSchemeFactory implements SchemeFactory {
      public getPortfolio_argsTupleScheme getScheme() {
        return new getPortfolio_argsTupleScheme();
      }
    }

    private static class getPortfolio_argsTupleScheme extends TupleScheme<getPortfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getPortfolio_result implements org.apache.thrift.TBase<getPortfolio_result, getPortfolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPortfolio_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPortfolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPortfolio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPortfolio_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPortfolio_result(android.os.Parcel in) {
      this.success = new ArrayList<String>();
      in.readList(this.success, getPortfolio_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPortfolio_result> CREATOR = new android.os.Parcelable.Creator<getPortfolio_result>() {
      @Override
      public getPortfolio_result[] newArray(int size) {
        return new getPortfolio_result[size];
      }

      @Override
      public getPortfolio_result createFromParcel(android.os.Parcel in) {
        return new getPortfolio_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPortfolio_result.class, metaDataMap);
    }

    public getPortfolio_result() {
    }

    public getPortfolio_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPortfolio_result(getPortfolio_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getPortfolio_result deepCopy() {
      return new getPortfolio_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPortfolio_result)
        return this.equals((getPortfolio_result)that);
      return false;
    }

    public boolean equals(getPortfolio_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPortfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPortfolio_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPortfolio_resultStandardSchemeFactory implements SchemeFactory {
      public getPortfolio_resultStandardScheme getScheme() {
        return new getPortfolio_resultStandardScheme();
      }
    }

    private static class getPortfolio_resultStandardScheme extends StandardScheme<getPortfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPortfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
                  if (struct.success == null) {
                    struct.success = new ArrayList<String>(_list582.size);
                  }
                  String _elem583 = null;
                  for (int _i584 = 0; _i584 < _list582.size; ++_i584)
                  {
                    _elem583 = iprot.readString();
                    struct.success.add(_elem583);
                  }
                  iprot.readListEnd();
                }
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPortfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter585 : struct.success)
            {
              oprot.writeString(_iter585);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPortfolio_resultTupleSchemeFactory implements SchemeFactory {
      public getPortfolio_resultTupleScheme getScheme() {
        return new getPortfolio_resultTupleScheme();
      }
    }

    private static class getPortfolio_resultTupleScheme extends TupleScheme<getPortfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter586 : struct.success)
            {
              oprot.writeString(_iter586);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.success == null) {
              struct.success = new ArrayList<String>(_list587.size);
            }
            String _elem588 = null;
            for (int _i589 = 0; _i589 < _list587.size; ++_i589)
            {
              _elem588 = iprot.readString();
              struct.success.add(_elem588);
            }
          }
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class addOrCancelAttention_args implements org.apache.thrift.TBase<addOrCancelAttention_args, addOrCancelAttention_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrCancelAttention_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrCancelAttention_args");

    private static final org.apache.thrift.protocol.TField AI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aiId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrCancelAttention_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrCancelAttention_argsTupleSchemeFactory());
    }

    private String aiId; // required
    private int userId; // required
    private AttentionFlag flag; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeString(aiId);
      out.writeInt(userId);
      out.writeInt(flag.getValue());
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public addOrCancelAttention_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.aiId= in.readString();
      this.userId = in.readInt();
      this.flag = AttentionFlag.findByValue(in.readInt());
    }

    public static final android.os.Parcelable.Creator<addOrCancelAttention_args> CREATOR = new android.os.Parcelable.Creator<addOrCancelAttention_args>() {
      @Override
      public addOrCancelAttention_args[] newArray(int size) {
        return new addOrCancelAttention_args[size];
      }

      @Override
      public addOrCancelAttention_args createFromParcel(android.os.Parcel in) {
        return new addOrCancelAttention_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AI_ID((short)1, "aiId"),
      USER_ID((short)2, "userId"),
      /**
       * 
       * @see AttentionFlag
       */
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AI_ID
            return AI_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AI_ID, new org.apache.thrift.meta_data.FieldMetaData("aiId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AttentionFlag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrCancelAttention_args.class, metaDataMap);
    }

    public addOrCancelAttention_args() {
    }

    public addOrCancelAttention_args(
      String aiId,
      int userId,
      AttentionFlag flag)
    {
      this();
      this.aiId = aiId;
      this.userId = userId;
      set_userId_isSet(true);
      this.flag = flag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrCancelAttention_args(addOrCancelAttention_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_aiId()) {
        this.aiId = other.aiId;
      }
      this.userId = other.userId;
      if (other.is_set_flag()) {
        this.flag = other.flag;
      }
    }

    public addOrCancelAttention_args deepCopy() {
      return new addOrCancelAttention_args(this);
    }

    public void clear() {
      this.aiId = null;
      set_userId_isSet(false);
      this.userId = 0;
      this.flag = null;
    }

    public String get_aiId() {
      return this.aiId;
    }

    public void set_aiId(String aiId) {
      this.aiId = aiId;
    }

    public void unset_aiId() {
      this.aiId = null;
    }

    /** Returns true if field aiId is set (has been assigned a value) and false otherwise */
    public boolean is_set_aiId() {
      return this.aiId != null;
    }

    public void set_aiId_isSet(boolean value) {
      if (!value) {
        this.aiId = null;
      }
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    /**
     * 
     * @see AttentionFlag
     */
    public AttentionFlag get_flag() {
      return this.flag;
    }

    /**
     * 
     * @see AttentionFlag
     */
    public void set_flag(AttentionFlag flag) {
      this.flag = flag;
    }

    public void unset_flag() {
      this.flag = null;
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean is_set_flag() {
      return this.flag != null;
    }

    public void set_flag_isSet(boolean value) {
      if (!value) {
        this.flag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AI_ID:
        if (value == null) {
          unset_aiId();
        } else {
          set_aiId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unset_flag();
        } else {
          set_flag((AttentionFlag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AI_ID:
        return get_aiId();

      case USER_ID:
        return get_userId();

      case FLAG:
        return get_flag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AI_ID:
        return is_set_aiId();
      case USER_ID:
        return is_set_userId();
      case FLAG:
        return is_set_flag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrCancelAttention_args)
        return this.equals((addOrCancelAttention_args)that);
      return false;
    }

    public boolean equals(addOrCancelAttention_args that) {
      if (that == null)
        return false;

      boolean this_present_aiId = true && this.is_set_aiId();
      boolean that_present_aiId = true && that.is_set_aiId();
      if (this_present_aiId || that_present_aiId) {
        if (!(this_present_aiId && that_present_aiId))
          return false;
        if (!this.aiId.equals(that.aiId))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_flag = true && this.is_set_flag();
      boolean that_present_flag = true && that.is_set_flag();
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (!this.flag.equals(that.flag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_aiId = true && (is_set_aiId());
      list.add(present_aiId);
      if (present_aiId)
        list.add(aiId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_flag = true && (is_set_flag());
      list.add(present_flag);
      if (present_flag)
        list.add(flag.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrCancelAttention_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_aiId()).compareTo(other.is_set_aiId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_aiId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aiId, other.aiId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_flag()).compareTo(other.is_set_flag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_flag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrCancelAttention_args(");
      boolean first = true;

      sb.append("aiId:");
      if (this.aiId == null) {
        sb.append("null");
      } else {
        sb.append(this.aiId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addOrCancelAttention_argsStandardSchemeFactory implements SchemeFactory {
      public addOrCancelAttention_argsStandardScheme getScheme() {
        return new addOrCancelAttention_argsStandardScheme();
      }
    }

    private static class addOrCancelAttention_argsStandardScheme extends StandardScheme<addOrCancelAttention_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrCancelAttention_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AI_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aiId = iprot.readString();
                struct.set_aiId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = com.rjzd.aistock.api.AttentionFlag.findByValue(iprot.readI32());
                struct.set_flag_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrCancelAttention_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.aiId != null) {
          oprot.writeFieldBegin(AI_ID_FIELD_DESC);
          oprot.writeString(struct.aiId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.flag != null) {
          oprot.writeFieldBegin(FLAG_FIELD_DESC);
          oprot.writeI32(struct.flag.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrCancelAttention_argsTupleSchemeFactory implements SchemeFactory {
      public addOrCancelAttention_argsTupleScheme getScheme() {
        return new addOrCancelAttention_argsTupleScheme();
      }
    }

    private static class addOrCancelAttention_argsTupleScheme extends TupleScheme<addOrCancelAttention_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrCancelAttention_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_aiId()) {
          optionals.set(0);
        }
        if (struct.is_set_userId()) {
          optionals.set(1);
        }
        if (struct.is_set_flag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_aiId()) {
          oprot.writeString(struct.aiId);
        }
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_flag()) {
          oprot.writeI32(struct.flag.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrCancelAttention_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.aiId = iprot.readString();
          struct.set_aiId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = com.rjzd.aistock.api.AttentionFlag.findByValue(iprot.readI32());
          struct.set_flag_isSet(true);
        }
      }
    }

  }

  public static class addOrCancelAttention_result implements org.apache.thrift.TBase<addOrCancelAttention_result, addOrCancelAttention_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrCancelAttention_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrCancelAttention_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrCancelAttention_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrCancelAttention_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public addOrCancelAttention_result(android.os.Parcel in) {
      this.success= in.readParcelable(addOrCancelAttention_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<addOrCancelAttention_result> CREATOR = new android.os.Parcelable.Creator<addOrCancelAttention_result>() {
      @Override
      public addOrCancelAttention_result[] newArray(int size) {
        return new addOrCancelAttention_result[size];
      }

      @Override
      public addOrCancelAttention_result createFromParcel(android.os.Parcel in) {
        return new addOrCancelAttention_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrCancelAttention_result.class, metaDataMap);
    }

    public addOrCancelAttention_result() {
    }

    public addOrCancelAttention_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrCancelAttention_result(addOrCancelAttention_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public addOrCancelAttention_result deepCopy() {
      return new addOrCancelAttention_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrCancelAttention_result)
        return this.equals((addOrCancelAttention_result)that);
      return false;
    }

    public boolean equals(addOrCancelAttention_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrCancelAttention_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrCancelAttention_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addOrCancelAttention_resultStandardSchemeFactory implements SchemeFactory {
      public addOrCancelAttention_resultStandardScheme getScheme() {
        return new addOrCancelAttention_resultStandardScheme();
      }
    }

    private static class addOrCancelAttention_resultStandardScheme extends StandardScheme<addOrCancelAttention_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrCancelAttention_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrCancelAttention_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrCancelAttention_resultTupleSchemeFactory implements SchemeFactory {
      public addOrCancelAttention_resultTupleScheme getScheme() {
        return new addOrCancelAttention_resultTupleScheme();
      }
    }

    private static class addOrCancelAttention_resultTupleScheme extends TupleScheme<addOrCancelAttention_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrCancelAttention_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrCancelAttention_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getMyInvite_args implements org.apache.thrift.TBase<getMyInvite_args, getMyInvite_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyInvite_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyInvite_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyInvite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyInvite_argsTupleSchemeFactory());
    }

    private int userId; // required
    private int pageNo; // required
    private int numPerPage; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeInt(pageNo);
      out.writeInt(numPerPage);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyInvite_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.pageNo = in.readInt();
      this.numPerPage = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getMyInvite_args> CREATOR = new android.os.Parcelable.Creator<getMyInvite_args>() {
      @Override
      public getMyInvite_args[] newArray(int size) {
        return new getMyInvite_args[size];
      }

      @Override
      public getMyInvite_args createFromParcel(android.os.Parcel in) {
        return new getMyInvite_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NO((short)2, "pageNo"),
      NUM_PER_PAGE((short)3, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __NUMPERPAGE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyInvite_args.class, metaDataMap);
    }

    public getMyInvite_args() {
    }

    public getMyInvite_args(
      int userId,
      int pageNo,
      int numPerPage)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyInvite_args(getMyInvite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.pageNo = other.pageNo;
      this.numPerPage = other.numPerPage;
    }

    public getMyInvite_args deepCopy() {
      return new getMyInvite_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_numPerPage_isSet(false);
      this.numPerPage = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_numPerPage() {
      return this.numPerPage;
    }

    public void set_numPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    public void unset_numPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean is_set_numPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void set_numPerPage_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unset_numPerPage();
        } else {
          set_numPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case PAGE_NO:
        return get_pageNo();

      case NUM_PER_PAGE:
        return get_numPerPage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case PAGE_NO:
        return is_set_pageNo();
      case NUM_PER_PAGE:
        return is_set_numPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyInvite_args)
        return this.equals((getMyInvite_args)that);
      return false;
    }

    public boolean equals(getMyInvite_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_numPerPage = true;
      list.add(present_numPerPage);
      if (present_numPerPage)
        list.add(numPerPage);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyInvite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_numPerPage()).compareTo(other.is_set_numPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_numPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyInvite_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyInvite_argsStandardSchemeFactory implements SchemeFactory {
      public getMyInvite_argsStandardScheme getScheme() {
        return new getMyInvite_argsStandardScheme();
      }
    }

    private static class getMyInvite_argsStandardScheme extends StandardScheme<getMyInvite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyInvite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.set_numPerPage_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyInvite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyInvite_argsTupleSchemeFactory implements SchemeFactory {
      public getMyInvite_argsTupleScheme getScheme() {
        return new getMyInvite_argsTupleScheme();
      }
    }

    private static class getMyInvite_argsTupleScheme extends TupleScheme<getMyInvite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyInvite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(1);
        }
        if (struct.is_set_numPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_numPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyInvite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.set_numPerPage_isSet(true);
        }
      }
    }

  }

  public static class getMyInvite_result implements org.apache.thrift.TBase<getMyInvite_result, getMyInvite_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyInvite_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyInvite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyInvite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyInvite_resultTupleSchemeFactory());
    }

    private InviteData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyInvite_result(android.os.Parcel in) {
      this.success= in.readParcelable(getMyInvite_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMyInvite_result> CREATOR = new android.os.Parcelable.Creator<getMyInvite_result>() {
      @Override
      public getMyInvite_result[] newArray(int size) {
        return new getMyInvite_result[size];
      }

      @Override
      public getMyInvite_result createFromParcel(android.os.Parcel in) {
        return new getMyInvite_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InviteData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyInvite_result.class, metaDataMap);
    }

    public getMyInvite_result() {
    }

    public getMyInvite_result(
      InviteData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyInvite_result(getMyInvite_result other) {
      if (other.is_set_success()) {
        this.success = new InviteData(other.success);
      }
    }

    public getMyInvite_result deepCopy() {
      return new getMyInvite_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public InviteData get_success() {
      return this.success;
    }

    public void set_success(InviteData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((InviteData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyInvite_result)
        return this.equals((getMyInvite_result)that);
      return false;
    }

    public boolean equals(getMyInvite_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyInvite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyInvite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyInvite_resultStandardSchemeFactory implements SchemeFactory {
      public getMyInvite_resultStandardScheme getScheme() {
        return new getMyInvite_resultStandardScheme();
      }
    }

    private static class getMyInvite_resultStandardScheme extends StandardScheme<getMyInvite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyInvite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new InviteData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyInvite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyInvite_resultTupleSchemeFactory implements SchemeFactory {
      public getMyInvite_resultTupleScheme getScheme() {
        return new getMyInvite_resultTupleScheme();
      }
    }

    private static class getMyInvite_resultTupleScheme extends TupleScheme<getMyInvite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyInvite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyInvite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new InviteData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getPrivilegeStatus_args implements org.apache.thrift.TBase<getPrivilegeStatus_args, getPrivilegeStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivilegeStatus_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivilegeStatus_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PRIVILEGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("privilegeIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrivilegeStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrivilegeStatus_argsTupleSchemeFactory());
    }

    private int userId; // required
    private List<String> privilegeIds; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeList(privilegeIds);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPrivilegeStatus_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.privilegeIds = new ArrayList<String>();
      in.readList(this.privilegeIds, getPrivilegeStatus_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPrivilegeStatus_args> CREATOR = new android.os.Parcelable.Creator<getPrivilegeStatus_args>() {
      @Override
      public getPrivilegeStatus_args[] newArray(int size) {
        return new getPrivilegeStatus_args[size];
      }

      @Override
      public getPrivilegeStatus_args createFromParcel(android.os.Parcel in) {
        return new getPrivilegeStatus_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PRIVILEGE_IDS((short)2, "privilegeIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PRIVILEGE_IDS
            return PRIVILEGE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PRIVILEGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("privilegeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivilegeStatus_args.class, metaDataMap);
    }

    public getPrivilegeStatus_args() {
    }

    public getPrivilegeStatus_args(
      int userId,
      List<String> privilegeIds)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.privilegeIds = privilegeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivilegeStatus_args(getPrivilegeStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_privilegeIds()) {
        List<String> __this__privilegeIds = new ArrayList<String>(other.privilegeIds);
        this.privilegeIds = __this__privilegeIds;
      }
    }

    public getPrivilegeStatus_args deepCopy() {
      return new getPrivilegeStatus_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      if (this.privilegeIds != null) {
        this.privilegeIds.clear();
      }
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_privilegeIds_size() {
      return (this.privilegeIds == null) ? 0 : this.privilegeIds.size();
    }

    public java.util.Iterator<String> get_privilegeIds_iterator() {
      return (this.privilegeIds == null) ? null : this.privilegeIds.iterator();
    }

    public void add_to_privilegeIds(String elem) {
      if (this.privilegeIds == null) {
        this.privilegeIds = new ArrayList<String>();
      }
      this.privilegeIds.add(elem);
    }

    public List<String> get_privilegeIds() {
      return this.privilegeIds;
    }

    public void set_privilegeIds(List<String> privilegeIds) {
      this.privilegeIds = privilegeIds;
    }

    public void unset_privilegeIds() {
      this.privilegeIds = null;
    }

    /** Returns true if field privilegeIds is set (has been assigned a value) and false otherwise */
    public boolean is_set_privilegeIds() {
      return this.privilegeIds != null;
    }

    public void set_privilegeIds_isSet(boolean value) {
      if (!value) {
        this.privilegeIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case PRIVILEGE_IDS:
        if (value == null) {
          unset_privilegeIds();
        } else {
          set_privilegeIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case PRIVILEGE_IDS:
        return get_privilegeIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case PRIVILEGE_IDS:
        return is_set_privilegeIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivilegeStatus_args)
        return this.equals((getPrivilegeStatus_args)that);
      return false;
    }

    public boolean equals(getPrivilegeStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_privilegeIds = true && this.is_set_privilegeIds();
      boolean that_present_privilegeIds = true && that.is_set_privilegeIds();
      if (this_present_privilegeIds || that_present_privilegeIds) {
        if (!(this_present_privilegeIds && that_present_privilegeIds))
          return false;
        if (!this.privilegeIds.equals(that.privilegeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_privilegeIds = true && (is_set_privilegeIds());
      list.add(present_privilegeIds);
      if (present_privilegeIds)
        list.add(privilegeIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrivilegeStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_privilegeIds()).compareTo(other.is_set_privilegeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_privilegeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilegeIds, other.privilegeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrivilegeStatus_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("privilegeIds:");
      if (this.privilegeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.privilegeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPrivilegeStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getPrivilegeStatus_argsStandardScheme getScheme() {
        return new getPrivilegeStatus_argsStandardScheme();
      }
    }

    private static class getPrivilegeStatus_argsStandardScheme extends StandardScheme<getPrivilegeStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivilegeStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIVILEGE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
                  if (struct.privilegeIds == null) {
                    struct.privilegeIds = new ArrayList<String>(_list590.size);
                  }
                  String _elem591 = null;
                  for (int _i592 = 0; _i592 < _list590.size; ++_i592)
                  {
                    _elem591 = iprot.readString();
                    struct.privilegeIds.add(_elem591);
                  }
                  iprot.readListEnd();
                }
                struct.set_privilegeIds_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivilegeStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.privilegeIds != null) {
          oprot.writeFieldBegin(PRIVILEGE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.privilegeIds.size()));
            for (String _iter593 : struct.privilegeIds)
            {
              oprot.writeString(_iter593);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivilegeStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getPrivilegeStatus_argsTupleScheme getScheme() {
        return new getPrivilegeStatus_argsTupleScheme();
      }
    }

    private static class getPrivilegeStatus_argsTupleScheme extends TupleScheme<getPrivilegeStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivilegeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_privilegeIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_privilegeIds()) {
          {
            oprot.writeI32(struct.privilegeIds.size());
            for (String _iter594 : struct.privilegeIds)
            {
              oprot.writeString(_iter594);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivilegeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.privilegeIds == null) {
              struct.privilegeIds = new ArrayList<String>(_list595.size);
            }
            String _elem596 = null;
            for (int _i597 = 0; _i597 < _list595.size; ++_i597)
            {
              _elem596 = iprot.readString();
              struct.privilegeIds.add(_elem596);
            }
          }
          struct.set_privilegeIds_isSet(true);
        }
      }
    }

  }

  public static class getPrivilegeStatus_result implements org.apache.thrift.TBase<getPrivilegeStatus_result, getPrivilegeStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivilegeStatus_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivilegeStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrivilegeStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrivilegeStatus_resultTupleSchemeFactory());
    }

    private PrivilegeData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPrivilegeStatus_result(android.os.Parcel in) {
      this.success= in.readParcelable(getPrivilegeStatus_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPrivilegeStatus_result> CREATOR = new android.os.Parcelable.Creator<getPrivilegeStatus_result>() {
      @Override
      public getPrivilegeStatus_result[] newArray(int size) {
        return new getPrivilegeStatus_result[size];
      }

      @Override
      public getPrivilegeStatus_result createFromParcel(android.os.Parcel in) {
        return new getPrivilegeStatus_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrivilegeData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivilegeStatus_result.class, metaDataMap);
    }

    public getPrivilegeStatus_result() {
    }

    public getPrivilegeStatus_result(
      PrivilegeData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivilegeStatus_result(getPrivilegeStatus_result other) {
      if (other.is_set_success()) {
        this.success = new PrivilegeData(other.success);
      }
    }

    public getPrivilegeStatus_result deepCopy() {
      return new getPrivilegeStatus_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public PrivilegeData get_success() {
      return this.success;
    }

    public void set_success(PrivilegeData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((PrivilegeData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivilegeStatus_result)
        return this.equals((getPrivilegeStatus_result)that);
      return false;
    }

    public boolean equals(getPrivilegeStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrivilegeStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrivilegeStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPrivilegeStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getPrivilegeStatus_resultStandardScheme getScheme() {
        return new getPrivilegeStatus_resultStandardScheme();
      }
    }

    private static class getPrivilegeStatus_resultStandardScheme extends StandardScheme<getPrivilegeStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivilegeStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new PrivilegeData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivilegeStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivilegeStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getPrivilegeStatus_resultTupleScheme getScheme() {
        return new getPrivilegeStatus_resultTupleScheme();
      }
    }

    private static class getPrivilegeStatus_resultTupleScheme extends TupleScheme<getPrivilegeStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivilegeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivilegeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new PrivilegeData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class unlockPrivilege_args implements org.apache.thrift.TBase<unlockPrivilege_args, unlockPrivilege_args._Fields>, java.io.Serializable, Cloneable, Comparable<unlockPrivilege_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlockPrivilege_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PRIVILEGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("privilegeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlockPrivilege_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlockPrivilege_argsTupleSchemeFactory());
    }

    private int userId; // required
    private String privilegeId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeString(privilegeId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public unlockPrivilege_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.privilegeId= in.readString();
    }

    public static final android.os.Parcelable.Creator<unlockPrivilege_args> CREATOR = new android.os.Parcelable.Creator<unlockPrivilege_args>() {
      @Override
      public unlockPrivilege_args[] newArray(int size) {
        return new unlockPrivilege_args[size];
      }

      @Override
      public unlockPrivilege_args createFromParcel(android.os.Parcel in) {
        return new unlockPrivilege_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PRIVILEGE_ID((short)2, "privilegeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PRIVILEGE_ID
            return PRIVILEGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PRIVILEGE_ID, new org.apache.thrift.meta_data.FieldMetaData("privilegeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlockPrivilege_args.class, metaDataMap);
    }

    public unlockPrivilege_args() {
    }

    public unlockPrivilege_args(
      int userId,
      String privilegeId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.privilegeId = privilegeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlockPrivilege_args(unlockPrivilege_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_privilegeId()) {
        this.privilegeId = other.privilegeId;
      }
    }

    public unlockPrivilege_args deepCopy() {
      return new unlockPrivilege_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      this.privilegeId = null;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String get_privilegeId() {
      return this.privilegeId;
    }

    public void set_privilegeId(String privilegeId) {
      this.privilegeId = privilegeId;
    }

    public void unset_privilegeId() {
      this.privilegeId = null;
    }

    /** Returns true if field privilegeId is set (has been assigned a value) and false otherwise */
    public boolean is_set_privilegeId() {
      return this.privilegeId != null;
    }

    public void set_privilegeId_isSet(boolean value) {
      if (!value) {
        this.privilegeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case PRIVILEGE_ID:
        if (value == null) {
          unset_privilegeId();
        } else {
          set_privilegeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case PRIVILEGE_ID:
        return get_privilegeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case PRIVILEGE_ID:
        return is_set_privilegeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlockPrivilege_args)
        return this.equals((unlockPrivilege_args)that);
      return false;
    }

    public boolean equals(unlockPrivilege_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_privilegeId = true && this.is_set_privilegeId();
      boolean that_present_privilegeId = true && that.is_set_privilegeId();
      if (this_present_privilegeId || that_present_privilegeId) {
        if (!(this_present_privilegeId && that_present_privilegeId))
          return false;
        if (!this.privilegeId.equals(that.privilegeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_privilegeId = true && (is_set_privilegeId());
      list.add(present_privilegeId);
      if (present_privilegeId)
        list.add(privilegeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlockPrivilege_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_privilegeId()).compareTo(other.is_set_privilegeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_privilegeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilegeId, other.privilegeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlockPrivilege_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("privilegeId:");
      if (this.privilegeId == null) {
        sb.append("null");
      } else {
        sb.append(this.privilegeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class unlockPrivilege_argsStandardSchemeFactory implements SchemeFactory {
      public unlockPrivilege_argsStandardScheme getScheme() {
        return new unlockPrivilege_argsStandardScheme();
      }
    }

    private static class unlockPrivilege_argsStandardScheme extends StandardScheme<unlockPrivilege_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlockPrivilege_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIVILEGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.privilegeId = iprot.readString();
                struct.set_privilegeId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlockPrivilege_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.privilegeId != null) {
          oprot.writeFieldBegin(PRIVILEGE_ID_FIELD_DESC);
          oprot.writeString(struct.privilegeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlockPrivilege_argsTupleSchemeFactory implements SchemeFactory {
      public unlockPrivilege_argsTupleScheme getScheme() {
        return new unlockPrivilege_argsTupleScheme();
      }
    }

    private static class unlockPrivilege_argsTupleScheme extends TupleScheme<unlockPrivilege_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlockPrivilege_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_privilegeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_privilegeId()) {
          oprot.writeString(struct.privilegeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlockPrivilege_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.privilegeId = iprot.readString();
          struct.set_privilegeId_isSet(true);
        }
      }
    }

  }

  public static class unlockPrivilege_result implements org.apache.thrift.TBase<unlockPrivilege_result, unlockPrivilege_result._Fields>, java.io.Serializable, Cloneable, Comparable<unlockPrivilege_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlockPrivilege_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlockPrivilege_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlockPrivilege_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public unlockPrivilege_result(android.os.Parcel in) {
      this.success= in.readParcelable(unlockPrivilege_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<unlockPrivilege_result> CREATOR = new android.os.Parcelable.Creator<unlockPrivilege_result>() {
      @Override
      public unlockPrivilege_result[] newArray(int size) {
        return new unlockPrivilege_result[size];
      }

      @Override
      public unlockPrivilege_result createFromParcel(android.os.Parcel in) {
        return new unlockPrivilege_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlockPrivilege_result.class, metaDataMap);
    }

    public unlockPrivilege_result() {
    }

    public unlockPrivilege_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlockPrivilege_result(unlockPrivilege_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public unlockPrivilege_result deepCopy() {
      return new unlockPrivilege_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlockPrivilege_result)
        return this.equals((unlockPrivilege_result)that);
      return false;
    }

    public boolean equals(unlockPrivilege_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlockPrivilege_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlockPrivilege_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class unlockPrivilege_resultStandardSchemeFactory implements SchemeFactory {
      public unlockPrivilege_resultStandardScheme getScheme() {
        return new unlockPrivilege_resultStandardScheme();
      }
    }

    private static class unlockPrivilege_resultStandardScheme extends StandardScheme<unlockPrivilege_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlockPrivilege_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlockPrivilege_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlockPrivilege_resultTupleSchemeFactory implements SchemeFactory {
      public unlockPrivilege_resultTupleScheme getScheme() {
        return new unlockPrivilege_resultTupleScheme();
      }
    }

    private static class unlockPrivilege_resultTupleScheme extends TupleScheme<unlockPrivilege_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlockPrivilege_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlockPrivilege_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getMyTaskStatus_args implements org.apache.thrift.TBase<getMyTaskStatus_args, getMyTaskStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyTaskStatus_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyTaskStatus_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_TYPE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTypeIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyTaskStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyTaskStatus_argsTupleSchemeFactory());
    }

    private int userId; // required
    private List<String> taskTypeIds; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeList(taskTypeIds);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyTaskStatus_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.taskTypeIds = new ArrayList<String>();
      in.readList(this.taskTypeIds, getMyTaskStatus_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMyTaskStatus_args> CREATOR = new android.os.Parcelable.Creator<getMyTaskStatus_args>() {
      @Override
      public getMyTaskStatus_args[] newArray(int size) {
        return new getMyTaskStatus_args[size];
      }

      @Override
      public getMyTaskStatus_args createFromParcel(android.os.Parcel in) {
        return new getMyTaskStatus_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      TASK_TYPE_IDS((short)2, "taskTypeIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TASK_TYPE_IDS
            return TASK_TYPE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TASK_TYPE_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskTypeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyTaskStatus_args.class, metaDataMap);
    }

    public getMyTaskStatus_args() {
    }

    public getMyTaskStatus_args(
      int userId,
      List<String> taskTypeIds)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.taskTypeIds = taskTypeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyTaskStatus_args(getMyTaskStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_taskTypeIds()) {
        List<String> __this__taskTypeIds = new ArrayList<String>(other.taskTypeIds);
        this.taskTypeIds = __this__taskTypeIds;
      }
    }

    public getMyTaskStatus_args deepCopy() {
      return new getMyTaskStatus_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      if (this.taskTypeIds != null) {
        this.taskTypeIds.clear();
      }
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_taskTypeIds_size() {
      return (this.taskTypeIds == null) ? 0 : this.taskTypeIds.size();
    }

    public java.util.Iterator<String> get_taskTypeIds_iterator() {
      return (this.taskTypeIds == null) ? null : this.taskTypeIds.iterator();
    }

    public void add_to_taskTypeIds(String elem) {
      if (this.taskTypeIds == null) {
        this.taskTypeIds = new ArrayList<String>();
      }
      this.taskTypeIds.add(elem);
    }

    public List<String> get_taskTypeIds() {
      return this.taskTypeIds;
    }

    public void set_taskTypeIds(List<String> taskTypeIds) {
      this.taskTypeIds = taskTypeIds;
    }

    public void unset_taskTypeIds() {
      this.taskTypeIds = null;
    }

    /** Returns true if field taskTypeIds is set (has been assigned a value) and false otherwise */
    public boolean is_set_taskTypeIds() {
      return this.taskTypeIds != null;
    }

    public void set_taskTypeIds_isSet(boolean value) {
      if (!value) {
        this.taskTypeIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case TASK_TYPE_IDS:
        if (value == null) {
          unset_taskTypeIds();
        } else {
          set_taskTypeIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case TASK_TYPE_IDS:
        return get_taskTypeIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case TASK_TYPE_IDS:
        return is_set_taskTypeIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyTaskStatus_args)
        return this.equals((getMyTaskStatus_args)that);
      return false;
    }

    public boolean equals(getMyTaskStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_taskTypeIds = true && this.is_set_taskTypeIds();
      boolean that_present_taskTypeIds = true && that.is_set_taskTypeIds();
      if (this_present_taskTypeIds || that_present_taskTypeIds) {
        if (!(this_present_taskTypeIds && that_present_taskTypeIds))
          return false;
        if (!this.taskTypeIds.equals(that.taskTypeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_taskTypeIds = true && (is_set_taskTypeIds());
      list.add(present_taskTypeIds);
      if (present_taskTypeIds)
        list.add(taskTypeIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyTaskStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_taskTypeIds()).compareTo(other.is_set_taskTypeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_taskTypeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTypeIds, other.taskTypeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyTaskStatus_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskTypeIds:");
      if (this.taskTypeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskTypeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyTaskStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getMyTaskStatus_argsStandardScheme getScheme() {
        return new getMyTaskStatus_argsStandardScheme();
      }
    }

    private static class getMyTaskStatus_argsStandardScheme extends StandardScheme<getMyTaskStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyTaskStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_TYPE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
                  if (struct.taskTypeIds == null) {
                    struct.taskTypeIds = new ArrayList<String>(_list598.size);
                  }
                  String _elem599 = null;
                  for (int _i600 = 0; _i600 < _list598.size; ++_i600)
                  {
                    _elem599 = iprot.readString();
                    struct.taskTypeIds.add(_elem599);
                  }
                  iprot.readListEnd();
                }
                struct.set_taskTypeIds_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyTaskStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.taskTypeIds != null) {
          oprot.writeFieldBegin(TASK_TYPE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taskTypeIds.size()));
            for (String _iter601 : struct.taskTypeIds)
            {
              oprot.writeString(_iter601);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyTaskStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getMyTaskStatus_argsTupleScheme getScheme() {
        return new getMyTaskStatus_argsTupleScheme();
      }
    }

    private static class getMyTaskStatus_argsTupleScheme extends TupleScheme<getMyTaskStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_taskTypeIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_taskTypeIds()) {
          {
            oprot.writeI32(struct.taskTypeIds.size());
            for (String _iter602 : struct.taskTypeIds)
            {
              oprot.writeString(_iter602);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.taskTypeIds == null) {
              struct.taskTypeIds = new ArrayList<String>(_list603.size);
            }
            String _elem604 = null;
            for (int _i605 = 0; _i605 < _list603.size; ++_i605)
            {
              _elem604 = iprot.readString();
              struct.taskTypeIds.add(_elem604);
            }
          }
          struct.set_taskTypeIds_isSet(true);
        }
      }
    }

  }

  public static class getMyTaskStatus_result implements org.apache.thrift.TBase<getMyTaskStatus_result, getMyTaskStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyTaskStatus_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyTaskStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyTaskStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyTaskStatus_resultTupleSchemeFactory());
    }

    private TaskStatuData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getMyTaskStatus_result(android.os.Parcel in) {
      this.success= in.readParcelable(getMyTaskStatus_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getMyTaskStatus_result> CREATOR = new android.os.Parcelable.Creator<getMyTaskStatus_result>() {
      @Override
      public getMyTaskStatus_result[] newArray(int size) {
        return new getMyTaskStatus_result[size];
      }

      @Override
      public getMyTaskStatus_result createFromParcel(android.os.Parcel in) {
        return new getMyTaskStatus_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskStatuData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyTaskStatus_result.class, metaDataMap);
    }

    public getMyTaskStatus_result() {
    }

    public getMyTaskStatus_result(
      TaskStatuData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyTaskStatus_result(getMyTaskStatus_result other) {
      if (other.is_set_success()) {
        this.success = new TaskStatuData(other.success);
      }
    }

    public getMyTaskStatus_result deepCopy() {
      return new getMyTaskStatus_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public TaskStatuData get_success() {
      return this.success;
    }

    public void set_success(TaskStatuData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((TaskStatuData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyTaskStatus_result)
        return this.equals((getMyTaskStatus_result)that);
      return false;
    }

    public boolean equals(getMyTaskStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyTaskStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyTaskStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMyTaskStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getMyTaskStatus_resultStandardScheme getScheme() {
        return new getMyTaskStatus_resultStandardScheme();
      }
    }

    private static class getMyTaskStatus_resultStandardScheme extends StandardScheme<getMyTaskStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyTaskStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new TaskStatuData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyTaskStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyTaskStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getMyTaskStatus_resultTupleScheme getScheme() {
        return new getMyTaskStatus_resultTupleScheme();
      }
    }

    private static class getMyTaskStatus_resultTupleScheme extends TupleScheme<getMyTaskStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new TaskStatuData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getPointsRecord_args implements org.apache.thrift.TBase<getPointsRecord_args, getPointsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPointsRecord_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointsRecord_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointsRecord_argsTupleSchemeFactory());
    }

    private int userId; // required
    private int pageNo; // required
    private int numPerPage; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeInt(pageNo);
      out.writeInt(numPerPage);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPointsRecord_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.pageNo = in.readInt();
      this.numPerPage = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getPointsRecord_args> CREATOR = new android.os.Parcelable.Creator<getPointsRecord_args>() {
      @Override
      public getPointsRecord_args[] newArray(int size) {
        return new getPointsRecord_args[size];
      }

      @Override
      public getPointsRecord_args createFromParcel(android.os.Parcel in) {
        return new getPointsRecord_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NO((short)2, "pageNo"),
      NUM_PER_PAGE((short)3, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __NUMPERPAGE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointsRecord_args.class, metaDataMap);
    }

    public getPointsRecord_args() {
    }

    public getPointsRecord_args(
      int userId,
      int pageNo,
      int numPerPage)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointsRecord_args(getPointsRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.pageNo = other.pageNo;
      this.numPerPage = other.numPerPage;
    }

    public getPointsRecord_args deepCopy() {
      return new getPointsRecord_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      set_pageNo_isSet(false);
      this.pageNo = 0;
      set_numPerPage_isSet(false);
      this.numPerPage = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_pageNo() {
      return this.pageNo;
    }

    public void set_pageNo(int pageNo) {
      this.pageNo = pageNo;
      set_pageNo_isSet(true);
    }

    public void unset_pageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_pageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void set_pageNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int get_numPerPage() {
      return this.numPerPage;
    }

    public void set_numPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      set_numPerPage_isSet(true);
    }

    public void unset_numPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean is_set_numPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void set_numPerPage_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unset_pageNo();
        } else {
          set_pageNo((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unset_numPerPage();
        } else {
          set_numPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case PAGE_NO:
        return get_pageNo();

      case NUM_PER_PAGE:
        return get_numPerPage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case PAGE_NO:
        return is_set_pageNo();
      case NUM_PER_PAGE:
        return is_set_numPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointsRecord_args)
        return this.equals((getPointsRecord_args)that);
      return false;
    }

    public boolean equals(getPointsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_numPerPage = true;
      list.add(present_numPerPage);
      if (present_numPerPage)
        list.add(numPerPage);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pageNo()).compareTo(other.is_set_pageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_numPerPage()).compareTo(other.is_set_numPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_numPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointsRecord_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPointsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getPointsRecord_argsStandardScheme getScheme() {
        return new getPointsRecord_argsStandardScheme();
      }
    }

    private static class getPointsRecord_argsStandardScheme extends StandardScheme<getPointsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.set_pageNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.set_numPerPage_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getPointsRecord_argsTupleScheme getScheme() {
        return new getPointsRecord_argsTupleScheme();
      }
    }

    private static class getPointsRecord_argsTupleScheme extends TupleScheme<getPointsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_pageNo()) {
          optionals.set(1);
        }
        if (struct.is_set_numPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_pageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.is_set_numPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.set_pageNo_isSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.set_numPerPage_isSet(true);
        }
      }
    }

  }

  public static class getPointsRecord_result implements org.apache.thrift.TBase<getPointsRecord_result, getPointsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPointsRecord_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointsRecord_resultTupleSchemeFactory());
    }

    private PointsRecordData success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPointsRecord_result(android.os.Parcel in) {
      this.success= in.readParcelable(getPointsRecord_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPointsRecord_result> CREATOR = new android.os.Parcelable.Creator<getPointsRecord_result>() {
      @Override
      public getPointsRecord_result[] newArray(int size) {
        return new getPointsRecord_result[size];
      }

      @Override
      public getPointsRecord_result createFromParcel(android.os.Parcel in) {
        return new getPointsRecord_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PointsRecordData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointsRecord_result.class, metaDataMap);
    }

    public getPointsRecord_result() {
    }

    public getPointsRecord_result(
      PointsRecordData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointsRecord_result(getPointsRecord_result other) {
      if (other.is_set_success()) {
        this.success = new PointsRecordData(other.success);
      }
    }

    public getPointsRecord_result deepCopy() {
      return new getPointsRecord_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public PointsRecordData get_success() {
      return this.success;
    }

    public void set_success(PointsRecordData success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((PointsRecordData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointsRecord_result)
        return this.equals((getPointsRecord_result)that);
      return false;
    }

    public boolean equals(getPointsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointsRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPointsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getPointsRecord_resultStandardScheme getScheme() {
        return new getPointsRecord_resultStandardScheme();
      }
    }

    private static class getPointsRecord_resultStandardScheme extends StandardScheme<getPointsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new PointsRecordData();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getPointsRecord_resultTupleScheme getScheme() {
        return new getPointsRecord_resultTupleScheme();
      }
    }

    private static class getPointsRecord_resultTupleScheme extends TupleScheme<getPointsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new PointsRecordData();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class earnPointsBydailyActive_args implements org.apache.thrift.TBase<earnPointsBydailyActive_args, earnPointsBydailyActive_args._Fields>, java.io.Serializable, Cloneable, Comparable<earnPointsBydailyActive_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("earnPointsBydailyActive_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new earnPointsBydailyActive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new earnPointsBydailyActive_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public earnPointsBydailyActive_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<earnPointsBydailyActive_args> CREATOR = new android.os.Parcelable.Creator<earnPointsBydailyActive_args>() {
      @Override
      public earnPointsBydailyActive_args[] newArray(int size) {
        return new earnPointsBydailyActive_args[size];
      }

      @Override
      public earnPointsBydailyActive_args createFromParcel(android.os.Parcel in) {
        return new earnPointsBydailyActive_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(earnPointsBydailyActive_args.class, metaDataMap);
    }

    public earnPointsBydailyActive_args() {
    }

    public earnPointsBydailyActive_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public earnPointsBydailyActive_args(earnPointsBydailyActive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public earnPointsBydailyActive_args deepCopy() {
      return new earnPointsBydailyActive_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof earnPointsBydailyActive_args)
        return this.equals((earnPointsBydailyActive_args)that);
      return false;
    }

    public boolean equals(earnPointsBydailyActive_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(earnPointsBydailyActive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("earnPointsBydailyActive_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class earnPointsBydailyActive_argsStandardSchemeFactory implements SchemeFactory {
      public earnPointsBydailyActive_argsStandardScheme getScheme() {
        return new earnPointsBydailyActive_argsStandardScheme();
      }
    }

    private static class earnPointsBydailyActive_argsStandardScheme extends StandardScheme<earnPointsBydailyActive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, earnPointsBydailyActive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, earnPointsBydailyActive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class earnPointsBydailyActive_argsTupleSchemeFactory implements SchemeFactory {
      public earnPointsBydailyActive_argsTupleScheme getScheme() {
        return new earnPointsBydailyActive_argsTupleScheme();
      }
    }

    private static class earnPointsBydailyActive_argsTupleScheme extends TupleScheme<earnPointsBydailyActive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, earnPointsBydailyActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, earnPointsBydailyActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class earnPointsBydailyActive_result implements org.apache.thrift.TBase<earnPointsBydailyActive_result, earnPointsBydailyActive_result._Fields>, java.io.Serializable, Cloneable, Comparable<earnPointsBydailyActive_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("earnPointsBydailyActive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new earnPointsBydailyActive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new earnPointsBydailyActive_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public earnPointsBydailyActive_result(android.os.Parcel in) {
      this.success= in.readParcelable(earnPointsBydailyActive_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<earnPointsBydailyActive_result> CREATOR = new android.os.Parcelable.Creator<earnPointsBydailyActive_result>() {
      @Override
      public earnPointsBydailyActive_result[] newArray(int size) {
        return new earnPointsBydailyActive_result[size];
      }

      @Override
      public earnPointsBydailyActive_result createFromParcel(android.os.Parcel in) {
        return new earnPointsBydailyActive_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(earnPointsBydailyActive_result.class, metaDataMap);
    }

    public earnPointsBydailyActive_result() {
    }

    public earnPointsBydailyActive_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public earnPointsBydailyActive_result(earnPointsBydailyActive_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public earnPointsBydailyActive_result deepCopy() {
      return new earnPointsBydailyActive_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof earnPointsBydailyActive_result)
        return this.equals((earnPointsBydailyActive_result)that);
      return false;
    }

    public boolean equals(earnPointsBydailyActive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(earnPointsBydailyActive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("earnPointsBydailyActive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class earnPointsBydailyActive_resultStandardSchemeFactory implements SchemeFactory {
      public earnPointsBydailyActive_resultStandardScheme getScheme() {
        return new earnPointsBydailyActive_resultStandardScheme();
      }
    }

    private static class earnPointsBydailyActive_resultStandardScheme extends StandardScheme<earnPointsBydailyActive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, earnPointsBydailyActive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, earnPointsBydailyActive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class earnPointsBydailyActive_resultTupleSchemeFactory implements SchemeFactory {
      public earnPointsBydailyActive_resultTupleScheme getScheme() {
        return new earnPointsBydailyActive_resultTupleScheme();
      }
    }

    private static class earnPointsBydailyActive_resultTupleScheme extends TupleScheme<earnPointsBydailyActive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, earnPointsBydailyActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, earnPointsBydailyActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class earnPointsByshare_args implements org.apache.thrift.TBase<earnPointsByshare_args, earnPointsByshare_args._Fields>, java.io.Serializable, Cloneable, Comparable<earnPointsByshare_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("earnPointsByshare_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new earnPointsByshare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new earnPointsByshare_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public earnPointsByshare_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<earnPointsByshare_args> CREATOR = new android.os.Parcelable.Creator<earnPointsByshare_args>() {
      @Override
      public earnPointsByshare_args[] newArray(int size) {
        return new earnPointsByshare_args[size];
      }

      @Override
      public earnPointsByshare_args createFromParcel(android.os.Parcel in) {
        return new earnPointsByshare_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(earnPointsByshare_args.class, metaDataMap);
    }

    public earnPointsByshare_args() {
    }

    public earnPointsByshare_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public earnPointsByshare_args(earnPointsByshare_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public earnPointsByshare_args deepCopy() {
      return new earnPointsByshare_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof earnPointsByshare_args)
        return this.equals((earnPointsByshare_args)that);
      return false;
    }

    public boolean equals(earnPointsByshare_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(earnPointsByshare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("earnPointsByshare_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class earnPointsByshare_argsStandardSchemeFactory implements SchemeFactory {
      public earnPointsByshare_argsStandardScheme getScheme() {
        return new earnPointsByshare_argsStandardScheme();
      }
    }

    private static class earnPointsByshare_argsStandardScheme extends StandardScheme<earnPointsByshare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, earnPointsByshare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, earnPointsByshare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class earnPointsByshare_argsTupleSchemeFactory implements SchemeFactory {
      public earnPointsByshare_argsTupleScheme getScheme() {
        return new earnPointsByshare_argsTupleScheme();
      }
    }

    private static class earnPointsByshare_argsTupleScheme extends TupleScheme<earnPointsByshare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, earnPointsByshare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, earnPointsByshare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class earnPointsByshare_result implements org.apache.thrift.TBase<earnPointsByshare_result, earnPointsByshare_result._Fields>, java.io.Serializable, Cloneable, Comparable<earnPointsByshare_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("earnPointsByshare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new earnPointsByshare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new earnPointsByshare_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public earnPointsByshare_result(android.os.Parcel in) {
      this.success= in.readParcelable(earnPointsByshare_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<earnPointsByshare_result> CREATOR = new android.os.Parcelable.Creator<earnPointsByshare_result>() {
      @Override
      public earnPointsByshare_result[] newArray(int size) {
        return new earnPointsByshare_result[size];
      }

      @Override
      public earnPointsByshare_result createFromParcel(android.os.Parcel in) {
        return new earnPointsByshare_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(earnPointsByshare_result.class, metaDataMap);
    }

    public earnPointsByshare_result() {
    }

    public earnPointsByshare_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public earnPointsByshare_result(earnPointsByshare_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public earnPointsByshare_result deepCopy() {
      return new earnPointsByshare_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof earnPointsByshare_result)
        return this.equals((earnPointsByshare_result)that);
      return false;
    }

    public boolean equals(earnPointsByshare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(earnPointsByshare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("earnPointsByshare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class earnPointsByshare_resultStandardSchemeFactory implements SchemeFactory {
      public earnPointsByshare_resultStandardScheme getScheme() {
        return new earnPointsByshare_resultStandardScheme();
      }
    }

    private static class earnPointsByshare_resultStandardScheme extends StandardScheme<earnPointsByshare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, earnPointsByshare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, earnPointsByshare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class earnPointsByshare_resultTupleSchemeFactory implements SchemeFactory {
      public earnPointsByshare_resultTupleScheme getScheme() {
        return new earnPointsByshare_resultTupleScheme();
      }
    }

    private static class earnPointsByshare_resultTupleScheme extends TupleScheme<earnPointsByshare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, earnPointsByshare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, earnPointsByshare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class getPushStatus_args implements org.apache.thrift.TBase<getPushStatus_args, getPushStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPushStatus_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushStatus_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushStatus_argsTupleSchemeFactory());
    }

    private int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPushStatus_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<getPushStatus_args> CREATOR = new android.os.Parcelable.Creator<getPushStatus_args>() {
      @Override
      public getPushStatus_args[] newArray(int size) {
        return new getPushStatus_args[size];
      }

      @Override
      public getPushStatus_args createFromParcel(android.os.Parcel in) {
        return new getPushStatus_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushStatus_args.class, metaDataMap);
    }

    public getPushStatus_args() {
    }

    public getPushStatus_args(
      int userId)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushStatus_args(getPushStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getPushStatus_args deepCopy() {
      return new getPushStatus_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushStatus_args)
        return this.equals((getPushStatus_args)that);
      return false;
    }

    public boolean equals(getPushStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPushStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushStatus_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPushStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getPushStatus_argsStandardScheme getScheme() {
        return new getPushStatus_argsStandardScheme();
      }
    }

    private static class getPushStatus_argsStandardScheme extends StandardScheme<getPushStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getPushStatus_argsTupleScheme getScheme() {
        return new getPushStatus_argsTupleScheme();
      }
    }

    private static class getPushStatus_argsTupleScheme extends TupleScheme<getPushStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
      }
    }

  }

  public static class getPushStatus_result implements org.apache.thrift.TBase<getPushStatus_result, getPushStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPushStatus_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushStatus_resultTupleSchemeFactory());
    }

    private PushStatus success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getPushStatus_result(android.os.Parcel in) {
      this.success= in.readParcelable(getPushStatus_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getPushStatus_result> CREATOR = new android.os.Parcelable.Creator<getPushStatus_result>() {
      @Override
      public getPushStatus_result[] newArray(int size) {
        return new getPushStatus_result[size];
      }

      @Override
      public getPushStatus_result createFromParcel(android.os.Parcel in) {
        return new getPushStatus_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PushStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushStatus_result.class, metaDataMap);
    }

    public getPushStatus_result() {
    }

    public getPushStatus_result(
      PushStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushStatus_result(getPushStatus_result other) {
      if (other.is_set_success()) {
        this.success = new PushStatus(other.success);
      }
    }

    public getPushStatus_result deepCopy() {
      return new getPushStatus_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public PushStatus get_success() {
      return this.success;
    }

    public void set_success(PushStatus success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((PushStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushStatus_result)
        return this.equals((getPushStatus_result)that);
      return false;
    }

    public boolean equals(getPushStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPushStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getPushStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getPushStatus_resultStandardScheme getScheme() {
        return new getPushStatus_resultStandardScheme();
      }
    }

    private static class getPushStatus_resultStandardScheme extends StandardScheme<getPushStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new PushStatus();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getPushStatus_resultTupleScheme getScheme() {
        return new getPushStatus_resultTupleScheme();
      }
    }

    private static class getPushStatus_resultTupleScheme extends TupleScheme<getPushStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new PushStatus();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class pushSettings_args implements org.apache.thrift.TBase<pushSettings_args, pushSettings_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushSettings_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushSettings_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PUSH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pushType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IS_NEED_REMIND_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedRemind", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushSettings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushSettings_argsTupleSchemeFactory());
    }

    private int userId; // required
    private String pushType; // required
    private boolean isNeedRemind; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeString(pushType);
      out.writeInt(isNeedRemind ? 1 : 0);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public pushSettings_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.pushType= in.readString();
      this.isNeedRemind = (in.readInt()==1);
    }

    public static final android.os.Parcelable.Creator<pushSettings_args> CREATOR = new android.os.Parcelable.Creator<pushSettings_args>() {
      @Override
      public pushSettings_args[] newArray(int size) {
        return new pushSettings_args[size];
      }

      @Override
      public pushSettings_args createFromParcel(android.os.Parcel in) {
        return new pushSettings_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PUSH_TYPE((short)2, "pushType"),
      IS_NEED_REMIND((short)3, "isNeedRemind");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PUSH_TYPE
            return PUSH_TYPE;
          case 3: // IS_NEED_REMIND
            return IS_NEED_REMIND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ISNEEDREMIND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PUSH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pushType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_NEED_REMIND, new org.apache.thrift.meta_data.FieldMetaData("isNeedRemind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushSettings_args.class, metaDataMap);
    }

    public pushSettings_args() {
    }

    public pushSettings_args(
      int userId,
      String pushType,
      boolean isNeedRemind)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.pushType = pushType;
      this.isNeedRemind = isNeedRemind;
      set_isNeedRemind_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushSettings_args(pushSettings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_pushType()) {
        this.pushType = other.pushType;
      }
      this.isNeedRemind = other.isNeedRemind;
    }

    public pushSettings_args deepCopy() {
      return new pushSettings_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      this.pushType = null;
      set_isNeedRemind_isSet(false);
      this.isNeedRemind = false;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String get_pushType() {
      return this.pushType;
    }

    public void set_pushType(String pushType) {
      this.pushType = pushType;
    }

    public void unset_pushType() {
      this.pushType = null;
    }

    /** Returns true if field pushType is set (has been assigned a value) and false otherwise */
    public boolean is_set_pushType() {
      return this.pushType != null;
    }

    public void set_pushType_isSet(boolean value) {
      if (!value) {
        this.pushType = null;
      }
    }

    public boolean is_isNeedRemind() {
      return this.isNeedRemind;
    }

    public void set_isNeedRemind(boolean isNeedRemind) {
      this.isNeedRemind = isNeedRemind;
      set_isNeedRemind_isSet(true);
    }

    public void unset_isNeedRemind() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDREMIND_ISSET_ID);
    }

    /** Returns true if field isNeedRemind is set (has been assigned a value) and false otherwise */
    public boolean is_set_isNeedRemind() {
      return EncodingUtils.testBit(__isset_bitfield, __ISNEEDREMIND_ISSET_ID);
    }

    public void set_isNeedRemind_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDREMIND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case PUSH_TYPE:
        if (value == null) {
          unset_pushType();
        } else {
          set_pushType((String)value);
        }
        break;

      case IS_NEED_REMIND:
        if (value == null) {
          unset_isNeedRemind();
        } else {
          set_isNeedRemind((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case PUSH_TYPE:
        return get_pushType();

      case IS_NEED_REMIND:
        return is_isNeedRemind();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case PUSH_TYPE:
        return is_set_pushType();
      case IS_NEED_REMIND:
        return is_set_isNeedRemind();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushSettings_args)
        return this.equals((pushSettings_args)that);
      return false;
    }

    public boolean equals(pushSettings_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pushType = true && this.is_set_pushType();
      boolean that_present_pushType = true && that.is_set_pushType();
      if (this_present_pushType || that_present_pushType) {
        if (!(this_present_pushType && that_present_pushType))
          return false;
        if (!this.pushType.equals(that.pushType))
          return false;
      }

      boolean this_present_isNeedRemind = true;
      boolean that_present_isNeedRemind = true;
      if (this_present_isNeedRemind || that_present_isNeedRemind) {
        if (!(this_present_isNeedRemind && that_present_isNeedRemind))
          return false;
        if (this.isNeedRemind != that.isNeedRemind)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_pushType = true && (is_set_pushType());
      list.add(present_pushType);
      if (present_pushType)
        list.add(pushType);

      boolean present_isNeedRemind = true;
      list.add(present_isNeedRemind);
      if (present_isNeedRemind)
        list.add(isNeedRemind);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_pushType()).compareTo(other.is_set_pushType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_pushType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushType, other.pushType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_isNeedRemind()).compareTo(other.is_set_isNeedRemind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_isNeedRemind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedRemind, other.isNeedRemind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushSettings_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pushType:");
      if (this.pushType == null) {
        sb.append("null");
      } else {
        sb.append(this.pushType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isNeedRemind:");
      sb.append(this.isNeedRemind);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class pushSettings_argsStandardSchemeFactory implements SchemeFactory {
      public pushSettings_argsStandardScheme getScheme() {
        return new pushSettings_argsStandardScheme();
      }
    }

    private static class pushSettings_argsStandardScheme extends StandardScheme<pushSettings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUSH_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pushType = iprot.readString();
                struct.set_pushType_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_NEED_REMIND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isNeedRemind = iprot.readBool();
                struct.set_isNeedRemind_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushSettings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.pushType != null) {
          oprot.writeFieldBegin(PUSH_TYPE_FIELD_DESC);
          oprot.writeString(struct.pushType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_NEED_REMIND_FIELD_DESC);
        oprot.writeBool(struct.isNeedRemind);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushSettings_argsTupleSchemeFactory implements SchemeFactory {
      public pushSettings_argsTupleScheme getScheme() {
        return new pushSettings_argsTupleScheme();
      }
    }

    private static class pushSettings_argsTupleScheme extends TupleScheme<pushSettings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_pushType()) {
          optionals.set(1);
        }
        if (struct.is_set_isNeedRemind()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_pushType()) {
          oprot.writeString(struct.pushType);
        }
        if (struct.is_set_isNeedRemind()) {
          oprot.writeBool(struct.isNeedRemind);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          struct.pushType = iprot.readString();
          struct.set_pushType_isSet(true);
        }
        if (incoming.get(2)) {
          struct.isNeedRemind = iprot.readBool();
          struct.set_isNeedRemind_isSet(true);
        }
      }
    }

  }

  public static class pushSettings_result implements org.apache.thrift.TBase<pushSettings_result, pushSettings_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushSettings_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushSettings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushSettings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushSettings_resultTupleSchemeFactory());
    }

    private IsSuccess success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public pushSettings_result(android.os.Parcel in) {
      this.success= in.readParcelable(pushSettings_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<pushSettings_result> CREATOR = new android.os.Parcelable.Creator<pushSettings_result>() {
      @Override
      public pushSettings_result[] newArray(int size) {
        return new pushSettings_result[size];
      }

      @Override
      public pushSettings_result createFromParcel(android.os.Parcel in) {
        return new pushSettings_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsSuccess.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushSettings_result.class, metaDataMap);
    }

    public pushSettings_result() {
    }

    public pushSettings_result(
      IsSuccess success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushSettings_result(pushSettings_result other) {
      if (other.is_set_success()) {
        this.success = new IsSuccess(other.success);
      }
    }

    public pushSettings_result deepCopy() {
      return new pushSettings_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public IsSuccess get_success() {
      return this.success;
    }

    public void set_success(IsSuccess success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IsSuccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushSettings_result)
        return this.equals((pushSettings_result)that);
      return false;
    }

    public boolean equals(pushSettings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class pushSettings_resultStandardSchemeFactory implements SchemeFactory {
      public pushSettings_resultStandardScheme getScheme() {
        return new pushSettings_resultStandardScheme();
      }
    }

    private static class pushSettings_resultStandardScheme extends StandardScheme<pushSettings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new IsSuccess();
                }
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushSettings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushSettings_resultTupleSchemeFactory implements SchemeFactory {
      public pushSettings_resultTupleScheme getScheme() {
        return new pushSettings_resultTupleScheme();
      }
    }

    private static class pushSettings_resultTupleScheme extends TupleScheme<pushSettings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new IsSuccess();
          }
          struct.success.read(iprot);
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class stickTopOrBottom_args implements org.apache.thrift.TBase<stickTopOrBottom_args, stickTopOrBottom_args._Fields>, java.io.Serializable, Cloneable, Comparable<stickTopOrBottom_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stickTopOrBottom_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCodes", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stickTopOrBottom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stickTopOrBottom_argsTupleSchemeFactory());
    }

    private int userId; // required
    private List<String> stockCodes; // required
    private int action; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeList(stockCodes);
      out.writeInt(action);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public stickTopOrBottom_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.stockCodes = new ArrayList<String>();
      in.readList(this.stockCodes, stickTopOrBottom_args.class.getClassLoader());
      this.action = in.readInt();
    }

    public static final android.os.Parcelable.Creator<stickTopOrBottom_args> CREATOR = new android.os.Parcelable.Creator<stickTopOrBottom_args>() {
      @Override
      public stickTopOrBottom_args[] newArray(int size) {
        return new stickTopOrBottom_args[size];
      }

      @Override
      public stickTopOrBottom_args createFromParcel(android.os.Parcel in) {
        return new stickTopOrBottom_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STOCK_CODES((short)2, "stockCodes"),
      ACTION((short)3, "action");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STOCK_CODES
            return STOCK_CODES;
          case 3: // ACTION
            return ACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ACTION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODES, new org.apache.thrift.meta_data.FieldMetaData("stockCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stickTopOrBottom_args.class, metaDataMap);
    }

    public stickTopOrBottom_args() {
    }

    public stickTopOrBottom_args(
      int userId,
      List<String> stockCodes,
      int action)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.stockCodes = stockCodes;
      this.action = action;
      set_action_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stickTopOrBottom_args(stickTopOrBottom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_stockCodes()) {
        List<String> __this__stockCodes = new ArrayList<String>(other.stockCodes);
        this.stockCodes = __this__stockCodes;
      }
      this.action = other.action;
    }

    public stickTopOrBottom_args deepCopy() {
      return new stickTopOrBottom_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      if (this.stockCodes != null) {
        this.stockCodes.clear();
      }
      set_action_isSet(false);
      this.action = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_stockCodes_size() {
      return (this.stockCodes == null) ? 0 : this.stockCodes.size();
    }

    public java.util.Iterator<String> get_stockCodes_iterator() {
      return (this.stockCodes == null) ? null : this.stockCodes.iterator();
    }

    public void add_to_stockCodes(String elem) {
      if (this.stockCodes == null) {
        this.stockCodes = new ArrayList<String>();
      }
      this.stockCodes.add(elem);
    }

    public List<String> get_stockCodes() {
      return this.stockCodes;
    }

    public void set_stockCodes(List<String> stockCodes) {
      this.stockCodes = stockCodes;
    }

    public void unset_stockCodes() {
      this.stockCodes = null;
    }

    /** Returns true if field stockCodes is set (has been assigned a value) and false otherwise */
    public boolean is_set_stockCodes() {
      return this.stockCodes != null;
    }

    public void set_stockCodes_isSet(boolean value) {
      if (!value) {
        this.stockCodes = null;
      }
    }

    public int get_action() {
      return this.action;
    }

    public void set_action(int action) {
      this.action = action;
      set_action_isSet(true);
    }

    public void unset_action() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ISSET_ID);
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean is_set_action() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTION_ISSET_ID);
    }

    public void set_action_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case STOCK_CODES:
        if (value == null) {
          unset_stockCodes();
        } else {
          set_stockCodes((List<String>)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unset_action();
        } else {
          set_action((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case STOCK_CODES:
        return get_stockCodes();

      case ACTION:
        return get_action();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case STOCK_CODES:
        return is_set_stockCodes();
      case ACTION:
        return is_set_action();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stickTopOrBottom_args)
        return this.equals((stickTopOrBottom_args)that);
      return false;
    }

    public boolean equals(stickTopOrBottom_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_stockCodes = true && this.is_set_stockCodes();
      boolean that_present_stockCodes = true && that.is_set_stockCodes();
      if (this_present_stockCodes || that_present_stockCodes) {
        if (!(this_present_stockCodes && that_present_stockCodes))
          return false;
        if (!this.stockCodes.equals(that.stockCodes))
          return false;
      }

      boolean this_present_action = true;
      boolean that_present_action = true;
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (this.action != that.action)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_stockCodes = true && (is_set_stockCodes());
      list.add(present_stockCodes);
      if (present_stockCodes)
        list.add(stockCodes);

      boolean present_action = true;
      list.add(present_action);
      if (present_action)
        list.add(action);

      return list.hashCode();
    }

    @Override
    public int compareTo(stickTopOrBottom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_stockCodes()).compareTo(other.is_set_stockCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_stockCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCodes, other.stockCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_action()).compareTo(other.is_set_action());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_action()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stickTopOrBottom_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCodes:");
      if (this.stockCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCodes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      sb.append(this.action);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class stickTopOrBottom_argsStandardSchemeFactory implements SchemeFactory {
      public stickTopOrBottom_argsStandardScheme getScheme() {
        return new stickTopOrBottom_argsStandardScheme();
      }
    }

    private static class stickTopOrBottom_argsStandardScheme extends StandardScheme<stickTopOrBottom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stickTopOrBottom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
                  if (struct.stockCodes == null) {
                    struct.stockCodes = new ArrayList<String>(_list606.size);
                  }
                  String _elem607 = null;
                  for (int _i608 = 0; _i608 < _list606.size; ++_i608)
                  {
                    _elem607 = iprot.readString();
                    struct.stockCodes.add(_elem607);
                  }
                  iprot.readListEnd();
                }
                struct.set_stockCodes_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.action = iprot.readI32();
                struct.set_action_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stickTopOrBottom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.stockCodes != null) {
          oprot.writeFieldBegin(STOCK_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stockCodes.size()));
            for (String _iter609 : struct.stockCodes)
            {
              oprot.writeString(_iter609);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stickTopOrBottom_argsTupleSchemeFactory implements SchemeFactory {
      public stickTopOrBottom_argsTupleScheme getScheme() {
        return new stickTopOrBottom_argsTupleScheme();
      }
    }

    private static class stickTopOrBottom_argsTupleScheme extends TupleScheme<stickTopOrBottom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stickTopOrBottom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_stockCodes()) {
          optionals.set(1);
        }
        if (struct.is_set_action()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_stockCodes()) {
          {
            oprot.writeI32(struct.stockCodes.size());
            for (String _iter610 : struct.stockCodes)
            {
              oprot.writeString(_iter610);
            }
          }
        }
        if (struct.is_set_action()) {
          oprot.writeI32(struct.action);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stickTopOrBottom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.stockCodes == null) {
              struct.stockCodes = new ArrayList<String>(_list611.size);
            }
            String _elem612 = null;
            for (int _i613 = 0; _i613 < _list611.size; ++_i613)
            {
              _elem612 = iprot.readString();
              struct.stockCodes.add(_elem612);
            }
          }
          struct.set_stockCodes_isSet(true);
        }
        if (incoming.get(2)) {
          struct.action = iprot.readI32();
          struct.set_action_isSet(true);
        }
      }
    }

  }

  public static class stickTopOrBottom_result implements org.apache.thrift.TBase<stickTopOrBottom_result, stickTopOrBottom_result._Fields>, java.io.Serializable, Cloneable, Comparable<stickTopOrBottom_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stickTopOrBottom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stickTopOrBottom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stickTopOrBottom_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public stickTopOrBottom_result(android.os.Parcel in) {
      this.success = new ArrayList<String>();
      in.readList(this.success, stickTopOrBottom_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<stickTopOrBottom_result> CREATOR = new android.os.Parcelable.Creator<stickTopOrBottom_result>() {
      @Override
      public stickTopOrBottom_result[] newArray(int size) {
        return new stickTopOrBottom_result[size];
      }

      @Override
      public stickTopOrBottom_result createFromParcel(android.os.Parcel in) {
        return new stickTopOrBottom_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stickTopOrBottom_result.class, metaDataMap);
    }

    public stickTopOrBottom_result() {
    }

    public stickTopOrBottom_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stickTopOrBottom_result(stickTopOrBottom_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public stickTopOrBottom_result deepCopy() {
      return new stickTopOrBottom_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stickTopOrBottom_result)
        return this.equals((stickTopOrBottom_result)that);
      return false;
    }

    public boolean equals(stickTopOrBottom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(stickTopOrBottom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stickTopOrBottom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class stickTopOrBottom_resultStandardSchemeFactory implements SchemeFactory {
      public stickTopOrBottom_resultStandardScheme getScheme() {
        return new stickTopOrBottom_resultStandardScheme();
      }
    }

    private static class stickTopOrBottom_resultStandardScheme extends StandardScheme<stickTopOrBottom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stickTopOrBottom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
                  if (struct.success == null) {
                    struct.success = new ArrayList<String>(_list614.size);
                  }
                  String _elem615 = null;
                  for (int _i616 = 0; _i616 < _list614.size; ++_i616)
                  {
                    _elem615 = iprot.readString();
                    struct.success.add(_elem615);
                  }
                  iprot.readListEnd();
                }
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stickTopOrBottom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter617 : struct.success)
            {
              oprot.writeString(_iter617);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stickTopOrBottom_resultTupleSchemeFactory implements SchemeFactory {
      public stickTopOrBottom_resultTupleScheme getScheme() {
        return new stickTopOrBottom_resultTupleScheme();
      }
    }

    private static class stickTopOrBottom_resultTupleScheme extends TupleScheme<stickTopOrBottom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stickTopOrBottom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter618 : struct.success)
            {
              oprot.writeString(_iter618);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stickTopOrBottom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.success == null) {
              struct.success = new ArrayList<String>(_list619.size);
            }
            String _elem620 = null;
            for (int _i621 = 0; _i621 < _list619.size; ++_i621)
            {
              _elem620 = iprot.readString();
              struct.success.add(_elem620);
            }
          }
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class movePosition_args implements org.apache.thrift.TBase<movePosition_args, movePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<movePosition_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePosition_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCodes", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SHIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("shift", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new movePosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new movePosition_argsTupleSchemeFactory());
    }

    private int userId; // required
    private List<String> stockCodes; // required
    private int shift; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
      out.writeList(stockCodes);
      out.writeInt(shift);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public movePosition_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
      this.stockCodes = new ArrayList<String>();
      in.readList(this.stockCodes, movePosition_args.class.getClassLoader());
      this.shift = in.readInt();
    }

    public static final android.os.Parcelable.Creator<movePosition_args> CREATOR = new android.os.Parcelable.Creator<movePosition_args>() {
      @Override
      public movePosition_args[] newArray(int size) {
        return new movePosition_args[size];
      }

      @Override
      public movePosition_args createFromParcel(android.os.Parcel in) {
        return new movePosition_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STOCK_CODES((short)2, "stockCodes"),
      SHIFT((short)3, "shift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STOCK_CODES
            return STOCK_CODES;
          case 3: // SHIFT
            return SHIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __SHIFT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODES, new org.apache.thrift.meta_data.FieldMetaData("stockCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SHIFT, new org.apache.thrift.meta_data.FieldMetaData("shift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePosition_args.class, metaDataMap);
    }

    public movePosition_args() {
    }

    public movePosition_args(
      int userId,
      List<String> stockCodes,
      int shift)
    {
      this();
      this.userId = userId;
      set_userId_isSet(true);
      this.stockCodes = stockCodes;
      this.shift = shift;
      set_shift_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public movePosition_args(movePosition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.is_set_stockCodes()) {
        List<String> __this__stockCodes = new ArrayList<String>(other.stockCodes);
        this.stockCodes = __this__stockCodes;
      }
      this.shift = other.shift;
    }

    public movePosition_args deepCopy() {
      return new movePosition_args(this);
    }

    public void clear() {
      set_userId_isSet(false);
      this.userId = 0;
      if (this.stockCodes != null) {
        this.stockCodes.clear();
      }
      set_shift_isSet(false);
      this.shift = 0;
    }

    public int get_userId() {
      return this.userId;
    }

    public void set_userId(int userId) {
      this.userId = userId;
      set_userId_isSet(true);
    }

    public void unset_userId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean is_set_userId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void set_userId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int get_stockCodes_size() {
      return (this.stockCodes == null) ? 0 : this.stockCodes.size();
    }

    public java.util.Iterator<String> get_stockCodes_iterator() {
      return (this.stockCodes == null) ? null : this.stockCodes.iterator();
    }

    public void add_to_stockCodes(String elem) {
      if (this.stockCodes == null) {
        this.stockCodes = new ArrayList<String>();
      }
      this.stockCodes.add(elem);
    }

    public List<String> get_stockCodes() {
      return this.stockCodes;
    }

    public void set_stockCodes(List<String> stockCodes) {
      this.stockCodes = stockCodes;
    }

    public void unset_stockCodes() {
      this.stockCodes = null;
    }

    /** Returns true if field stockCodes is set (has been assigned a value) and false otherwise */
    public boolean is_set_stockCodes() {
      return this.stockCodes != null;
    }

    public void set_stockCodes_isSet(boolean value) {
      if (!value) {
        this.stockCodes = null;
      }
    }

    public int get_shift() {
      return this.shift;
    }

    public void set_shift(int shift) {
      this.shift = shift;
      set_shift_isSet(true);
    }

    public void unset_shift() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIFT_ISSET_ID);
    }

    /** Returns true if field shift is set (has been assigned a value) and false otherwise */
    public boolean is_set_shift() {
      return EncodingUtils.testBit(__isset_bitfield, __SHIFT_ISSET_ID);
    }

    public void set_shift_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unset_userId();
        } else {
          set_userId((Integer)value);
        }
        break;

      case STOCK_CODES:
        if (value == null) {
          unset_stockCodes();
        } else {
          set_stockCodes((List<String>)value);
        }
        break;

      case SHIFT:
        if (value == null) {
          unset_shift();
        } else {
          set_shift((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return get_userId();

      case STOCK_CODES:
        return get_stockCodes();

      case SHIFT:
        return get_shift();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return is_set_userId();
      case STOCK_CODES:
        return is_set_stockCodes();
      case SHIFT:
        return is_set_shift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof movePosition_args)
        return this.equals((movePosition_args)that);
      return false;
    }

    public boolean equals(movePosition_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_stockCodes = true && this.is_set_stockCodes();
      boolean that_present_stockCodes = true && that.is_set_stockCodes();
      if (this_present_stockCodes || that_present_stockCodes) {
        if (!(this_present_stockCodes && that_present_stockCodes))
          return false;
        if (!this.stockCodes.equals(that.stockCodes))
          return false;
      }

      boolean this_present_shift = true;
      boolean that_present_shift = true;
      if (this_present_shift || that_present_shift) {
        if (!(this_present_shift && that_present_shift))
          return false;
        if (this.shift != that.shift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_stockCodes = true && (is_set_stockCodes());
      list.add(present_stockCodes);
      if (present_stockCodes)
        list.add(stockCodes);

      boolean present_shift = true;
      list.add(present_shift);
      if (present_shift)
        list.add(shift);

      return list.hashCode();
    }

    @Override
    public int compareTo(movePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_userId()).compareTo(other.is_set_userId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_userId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_stockCodes()).compareTo(other.is_set_stockCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_stockCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCodes, other.stockCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_shift()).compareTo(other.is_set_shift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_shift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shift, other.shift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("movePosition_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCodes:");
      if (this.stockCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCodes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shift:");
      sb.append(this.shift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class movePosition_argsStandardSchemeFactory implements SchemeFactory {
      public movePosition_argsStandardScheme getScheme() {
        return new movePosition_argsStandardScheme();
      }
    }

    private static class movePosition_argsStandardScheme extends StandardScheme<movePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, movePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.set_userId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
                  if (struct.stockCodes == null) {
                    struct.stockCodes = new ArrayList<String>(_list622.size);
                  }
                  String _elem623 = null;
                  for (int _i624 = 0; _i624 < _list622.size; ++_i624)
                  {
                    _elem623 = iprot.readString();
                    struct.stockCodes.add(_elem623);
                  }
                  iprot.readListEnd();
                }
                struct.set_stockCodes_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shift = iprot.readI32();
                struct.set_shift_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, movePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.stockCodes != null) {
          oprot.writeFieldBegin(STOCK_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stockCodes.size()));
            for (String _iter625 : struct.stockCodes)
            {
              oprot.writeString(_iter625);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHIFT_FIELD_DESC);
        oprot.writeI32(struct.shift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class movePosition_argsTupleSchemeFactory implements SchemeFactory {
      public movePosition_argsTupleScheme getScheme() {
        return new movePosition_argsTupleScheme();
      }
    }

    private static class movePosition_argsTupleScheme extends TupleScheme<movePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, movePosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_userId()) {
          optionals.set(0);
        }
        if (struct.is_set_stockCodes()) {
          optionals.set(1);
        }
        if (struct.is_set_shift()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.is_set_userId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.is_set_stockCodes()) {
          {
            oprot.writeI32(struct.stockCodes.size());
            for (String _iter626 : struct.stockCodes)
            {
              oprot.writeString(_iter626);
            }
          }
        }
        if (struct.is_set_shift()) {
          oprot.writeI32(struct.shift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, movePosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.set_userId_isSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.stockCodes == null) {
              struct.stockCodes = new ArrayList<String>(_list627.size);
            }
            String _elem628 = null;
            for (int _i629 = 0; _i629 < _list627.size; ++_i629)
            {
              _elem628 = iprot.readString();
              struct.stockCodes.add(_elem628);
            }
          }
          struct.set_stockCodes_isSet(true);
        }
        if (incoming.get(2)) {
          struct.shift = iprot.readI32();
          struct.set_shift_isSet(true);
        }
      }
    }

  }

  public static class movePosition_result implements org.apache.thrift.TBase<movePosition_result, movePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<movePosition_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new movePosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new movePosition_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public movePosition_result(android.os.Parcel in) {
      this.success = new ArrayList<String>();
      in.readList(this.success, movePosition_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<movePosition_result> CREATOR = new android.os.Parcelable.Creator<movePosition_result>() {
      @Override
      public movePosition_result[] newArray(int size) {
        return new movePosition_result[size];
      }

      @Override
      public movePosition_result createFromParcel(android.os.Parcel in) {
        return new movePosition_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePosition_result.class, metaDataMap);
    }

    public movePosition_result() {
    }

    public movePosition_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public movePosition_result(movePosition_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public movePosition_result deepCopy() {
      return new movePosition_result(this);
    }

    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof movePosition_result)
        return this.equals((movePosition_result)that);
      return false;
    }

    public boolean equals(movePosition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(movePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("movePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class movePosition_resultStandardSchemeFactory implements SchemeFactory {
      public movePosition_resultStandardScheme getScheme() {
        return new movePosition_resultStandardScheme();
      }
    }

    private static class movePosition_resultStandardScheme extends StandardScheme<movePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, movePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
                  if (struct.success == null) {
                    struct.success = new ArrayList<String>(_list630.size);
                  }
                  String _elem631 = null;
                  for (int _i632 = 0; _i632 < _list630.size; ++_i632)
                  {
                    _elem631 = iprot.readString();
                    struct.success.add(_elem631);
                  }
                  iprot.readListEnd();
                }
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, movePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter633 : struct.success)
            {
              oprot.writeString(_iter633);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class movePosition_resultTupleSchemeFactory implements SchemeFactory {
      public movePosition_resultTupleScheme getScheme() {
        return new movePosition_resultTupleScheme();
      }
    }

    private static class movePosition_resultTupleScheme extends TupleScheme<movePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, movePosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter634 : struct.success)
            {
              oprot.writeString(_iter634);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, movePosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            if (struct.success == null) {
              struct.success = new ArrayList<String>(_list635.size);
            }
            String _elem636 = null;
            for (int _i637 = 0; _i637 < _list635.size; ++_i637)
            {
              _elem636 = iprot.readString();
              struct.success.add(_elem636);
            }
          }
          struct.set_success_isSet(true);
        }
      }
    }

  }

}
